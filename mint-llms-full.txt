# Editor permissions
Source: https://mintlify.com/docs/advanced/dashboard/permissions

Allow more members of your team to update your docs

An editor has access to your dashboard and web editor.

Anyone can contribute to your documentation by working locally and pushing changes to your repository, but there are key differences in how changes get deployed:

* **Editor changes**: When an editor publishes through the web editor or merges a pull request into your docs repository, changes deploy to your live site automatically.
* **Non-editor changes**: When a non-editor merges a pull request into your repository, you must manually trigger a deployment from your dashboard for those changes to appear on your live site.

## Add editors

By default, the team member who created your Mintlify organization has editor access. Add additional editors in the [Members](https://dashboard.mintlify.com/settings/organization/members) page of your dashboard.

Editor seats are billed based on usage, and you can have as many editors as you need. See our [pricing page](https://mintlify.com/pricing) for more details.


# Roles
Source: https://mintlify.com/docs/advanced/dashboard/roles

Control access to your dashboard with roles.

<Info>
  RBAC functionality is available on [Enterprise plan](https://mintlify.com/pricing?ref=rbac).
</Info>

Mintlify provides two dashboard access levels: Editor and Admin.

The following describes actions that are limited to the Admin role:

|                         | Editor | Admin |
| ----------------------- | :----: | :---: |
| Update user roles       |    ❌   |   ✅   |
| Delete users            |    ❌   |   ✅   |
| Invite admin users      |    ❌   |   ✅   |
| Manage & update billing |    ❌   |   ✅   |
| Update custom domain    |    ❌   |   ✅   |
| Update Git source       |    ❌   |   ✅   |
| Delete org              |    ❌   |   ✅   |

Other actions on the dashboard are available to both roles.

You can invite as many admins as you want, but we recommend limiting admin
access to users who need it.


# Single sign-on (SSO)
Source: https://mintlify.com/docs/advanced/dashboard/sso

Customize how your team can login to your admin dashboard

<Info>
  SSO functionality is available on [Enterprise plan](https://mintlify.com/pricing?ref=sso).
</Info>

Use single sign-on to your dashboard via SAML and OIDC. If you use Okta, Google Workspace, or Microsoft Entra, we have provider-specific documentation for setting up SSO. If you use another provider, please [contact us](mailto:support@mintlify.com).

## Okta

<Tabs>
  <Tab title="SAML">
    <Steps>
      <Step title="Create an application">
        Under `Applications`, click to create a new app integration using SAML 2.0.
      </Step>

      <Step title="Configure integration">
        Enter the following:

        * Single sign-on URL (provided by Mintlify)
        * Audience URI (provided by Mintlify)
        * Name ID Format: `EmailAddress`
        * Attribute Statements:
          | Name        | Name format | Value            |
          | ----------- | ----------- | ---------------- |
          | `firstName` | Basic       | `user.firstName` |
          | `lastName`  | Basic       | `user.lastName`  |
      </Step>

      <Step title="Send us your IdP information">
        Once the application is set up, navigate to the sign-on tab and send us the metadata URL.
        We'll enable the connection from our side using this information.
      </Step>
    </Steps>
  </Tab>

  <Tab title="OIDC">
    <Steps>
      <Step title="Create an application">
        Under `Applications`, click to create a new app integration using OIDC.
        You should choose the `Web Application` application type.
      </Step>

      <Step title="Configure integration">
        Select the authorization code grant type and enter the Redirect URI provided by Mintlify.
      </Step>

      <Step title="Send us your IdP information">
        Once the application is set up, navigate to the General tab and locate the client ID & client secret.
        Please securely provide us with these, along with your Okta instance URL (e.g. `<your-tenant-name>.okta.com`). You can send these via a service like 1Password or SendSafely.
      </Step>
    </Steps>
  </Tab>
</Tabs>

## Google Workspace

<Tabs>
  <Tab title="SAML">
    <Steps>
      <Step title="Create an application">
        Under `Web and mobile apps`, select `Add custom SAML app` from the `Add app` dropdown.

        <Frame>
                    <img src="https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/gsuite-add-custom-saml-app.png?maxW=3804&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=77dfb5dcd184cd99f5398b70340d5948" alt="" width="3804" height="1860" data-path="images/gsuite-add-custom-saml-app.png" srcset="https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/gsuite-add-custom-saml-app.png?w=280&maxW=3804&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=2e7d052e53bdc976f680105ad52f709f 280w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/gsuite-add-custom-saml-app.png?w=560&maxW=3804&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=c2a5655f3233c9ce8fe6ffd027014352 560w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/gsuite-add-custom-saml-app.png?w=840&maxW=3804&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=2853ac446d3fa99a9e828ad0b0a669d1 840w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/gsuite-add-custom-saml-app.png?w=1100&maxW=3804&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=56e1eaa85f04d78987c92b628950a4b2 1100w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/gsuite-add-custom-saml-app.png?w=1650&maxW=3804&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=0ffc5f7d913dde18c7a896aedfeb70b6 1650w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/gsuite-add-custom-saml-app.png?w=2500&maxW=3804&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=325b3de445e49511c5fe7f14dd94601a 2500w" data-optimize="true" data-opv="2" />
        </Frame>
      </Step>

      <Step title="Send us your IdP information">
        Copy the provided SSO URL, Entity ID, and x509 certificate and send it to the Mintlify team.

        <Frame>
                    <img src="https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/gsuite-saml-metadata.png?maxW=3800&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=fa56c1aaa34b06b4a2dde7124c79a801" alt="" width="3800" height="1850" data-path="images/gsuite-saml-metadata.png" srcset="https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/gsuite-saml-metadata.png?w=280&maxW=3800&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=d6b532839ddf367460aa7e6eb8042314 280w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/gsuite-saml-metadata.png?w=560&maxW=3800&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=7eccf6d930de96bfcb289c80a479f5e6 560w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/gsuite-saml-metadata.png?w=840&maxW=3800&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=95d5fadcb24d44aec54a7c681adfc5c6 840w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/gsuite-saml-metadata.png?w=1100&maxW=3800&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=2a48366268e861854dbf586872218734 1100w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/gsuite-saml-metadata.png?w=1650&maxW=3800&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=8442e2eb01fe6f650ec62974341cb8fb 1650w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/gsuite-saml-metadata.png?w=2500&maxW=3800&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=e5aa6106dbaa90a6063991ceaf4577cf 2500w" data-optimize="true" data-opv="2" />
        </Frame>
      </Step>

      <Step title="Configure integration">
        On the Service provider details page, enter the following:

        * ACS URL (provided by Mintlify)
        * Entity ID (provided by Mintlify)
        * Name ID format: `EMAIL`
        * Name ID: `Basic Information > Primary email`

        <Frame>
                    <img src="https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/gsuite-sp-details.png?maxW=3788&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=30144957dfd13548cd442436f851ccf5" alt="" width="3788" height="1864" data-path="images/gsuite-sp-details.png" srcset="https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/gsuite-sp-details.png?w=280&maxW=3788&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=d87985feeaccb283e3bfda0c25b858f8 280w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/gsuite-sp-details.png?w=560&maxW=3788&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=ffcf99792c53407dbf1468b277e164c2 560w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/gsuite-sp-details.png?w=840&maxW=3788&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=a41924561ca035de5e0643352f30dd8d 840w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/gsuite-sp-details.png?w=1100&maxW=3788&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=abdffc2180511d3dd744b9255cd61c9e 1100w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/gsuite-sp-details.png?w=1650&maxW=3788&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=b87cb951130fb289155135a01bff333e 1650w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/gsuite-sp-details.png?w=2500&maxW=3788&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=75265d11c9cb7ffec7e565fb33d7a7b8 2500w" data-optimize="true" data-opv="2" />
        </Frame>

        On the next page, enter the following attribute statements:

        | Google Directory Attribute | App Attribute |
        | -------------------------- | ------------- |
        | `First name`               | `firstName`   |
        | `Last name`                | `lastName`    |

        Once this step is complete and users are assigned to the application, let our team know and we'll enable SSO for your account!
      </Step>
    </Steps>
  </Tab>
</Tabs>

## Microsoft Entra

<Tabs>
  <Tab title="SAML">
    <Steps>
      <Step title="Create an application">
        1. Under "Enterprise applications", select **New application**.
        2. Select **Create your own application** and choose "Integrate any other application you don't find in the gallery (Non-gallery)."
      </Step>

      <Step title="Configure SAML">
        Navigate to the Single Sign-On setup page and select **SAML**. Under "Basic SAML Configuration," enter the following:

        * Identifier (Entity ID): The Audience URI provided by Mintlify.
        * Reply URL (Assertion Consumer Service URL): The ACS URL provided by Mintlify.

        Leave the other values blank and select **Save**.
      </Step>

      <Step title="Configure Attributes & Claims">
        Edit the Attributes & Claims section:

        1. Select **Unique User Identifier (Name ID)** under "Required Claim."
        2. Change the Source attribute to use `user.primaryauthoritativeemail`.
        3. Under Additional claims, create the following claims:
           | Name        | Value            |
           | ----------- | ---------------- |
           | `firstName` | `user.givenname` |
           | `lastName`  | `user.surname`   |
      </Step>

      <Step title="Send Mintlify your IdP information">
        Once the application is set up, navigate to the "SAML Certificates" section and send us the App Federation Metadata URL.
        We'll enable the connection from our side using this information.
      </Step>

      <Step title="Assign Users">
        Navigate to "Users and groups" in your Entra application and add the users who should have access to your dashboard.
      </Step>
    </Steps>
  </Tab>
</Tabs>


# Cloudflare
Source: https://mintlify.com/docs/advanced/subpath/cloudflare

Host documentation at a /docs subpath using Cloudflare Workers

To host your documentation at a `/docs` subpath using Cloudflare, you will need to create and configure a Cloudflare Worker.

<Info>
  Before you begin, you need a Cloudflare account and a domain name (can be managed on or off Cloudflare).
</Info>

## Set up a Cloudflare Worker

Create a Cloudflare Worker by following the [Cloudflare Workers getting started guide](https://developers.cloudflare.com/workers/get-started/dashboard/), if you have not already.

<Warning>
  If your DNS provider is Cloudflare, do not use proxying for the CNAME record.
</Warning>

### Proxies with Vercel deployments

If you use Cloudflare as a proxy with Vercel deployments, you must ensure proper configuration to avoid conflicts with Vercel's domain verification and SSL certificate provisioning.

Improper proxy configuration can prevent Vercel from provisioning Let's Encrypt SSL certificates and cause domain verification failures.

#### Required path allowlist

Your Cloudflare Worker must allow traffic to these specific paths without blocking or redirecting:

* `/.well-known/acme-challenge/*` - Required for Let's Encrypt certificate verification
* `/.well-known/vercel/*` - Required for Vercel domain verification

While Cloudflare automatically handles many verification rules, creating additional custom rules may inadvertently block this critical traffic.

#### Header forwarding requirements

Ensure that the `HOST` header is correctly forwarded in your Worker configuration. Failure to properly forward headers will cause verification requests to fail.

### Configure routing

In your Cloudflare dashboard, select **Edit Code** and add the following script into your Worker's code. See the [Cloudflare documentation](https://developers.cloudflare.com/workers-ai/get-started/dashboard/#development) for more information on editing a Worker.

<Tip>
  Replace `[SUBDOMAIN]` with your unique subdomain and `[YOUR_DOMAIN]` with your website's base URL.
</Tip>

```javascript
addEventListener("fetch", (event) => {
  event.respondWith(handleRequest(event.request));
});

async function handleRequest(request) {
  try {
    const urlObject = new URL(request.url);
    
    // If the request is to a Vercel verification path, allow it to pass through
    if (urlObject.pathname.startsWith('/.well-known/')) {
      return await fetch(request);
    }
    
    // If the request is to the docs subdirectory
    if (/^\/docs/.test(urlObject.pathname)) {
      // Then Proxy to Mintlify
      const DOCS_URL = "[SUBDOMAIN].mintlify.dev";
      const CUSTOM_URL = "[YOUR_DOMAIN]";

      let url = new URL(request.url);
      url.hostname = DOCS_URL;

      let proxyRequest = new Request(url, request);

      proxyRequest.headers.set("Host", DOCS_URL);
      proxyRequest.headers.set("X-Forwarded-Host", CUSTOM_URL);
      proxyRequest.headers.set("X-Forwarded-Proto", "https");
      // If deploying to Vercel, preserve client IP
      proxyRequest.headers.set("CF-Connecting-IP", request.headers.get("CF-Connecting-IP"));

      return await fetch(proxyRequest);
    }
  } catch (error) {
    // If no action found, play the regular request
    return await fetch(request);
  }
}
```

Select **Deploy** and wait for the changes to propagate.

<Note>
  After configuring your DNS, custom subdomains are usually available within a few minutes. DNS propagation can sometimes take 1-4 hours, and in rare cases up to 48 hours. If your subdomain is not immediately available, please wait before troubleshooting.
</Note>

### Test your Worker

After your code deploys, test your Worker to ensure it routes to your Mintlify docs.

1. Test using the Worker's preview URL: `your-worker.your-subdomain.workers.dev/docs`
2. Verify the Worker routes to your Mintlify docs and your website.

### Add custom domain

1. In your [Cloudflare dashboard](https://dash.cloudflare.com/), navigate to your Worker.
2. Go to **Settings > Domains & Routes > Add > Custom Domain**.
3. Add your domain.

<Tip>
  We recommend you add your domain both with and without `www.` prepended.
</Tip>

See [Add a custom domain](https://developers.cloudflare.com/workers/configuration/routing/custom-domains/#add-a-custom-domain) in the Cloudflare documentation for more information.

### Resolve DNS conflicts

If your domain already points to another service, you must remove the existing DNS record. Your Cloudflare Worker must be configured to control all traffic for your domain.

1. Delete the existing DNS record for your domain. See [Delete DNS records](https://developers.cloudflare.com/dns/manage-dns-records/how-to/create-dns-records/#delete-dns-records) in the Cloudflare documentation for more information.
2. Return to your Worker and add your custom domain.

## Webflow custom routing

If you use Webflow to host your main site and want to serve Mintlify docs at `/docs` on the same domain, you'll need to configure custom routing through Cloudflare Workers to proxy all non-docs traffic to your main site.

<Warning>
  Make sure your main site is set up on a landing page before deploying this Worker, or visitors to your main site will see errors.
</Warning>

1. In Webflow, set up a landing page for your main site like `landing.yoursite.com`. This will be the page that visitors see when they visit your site.
2. Deploy your main site to the landing page. This ensures that your main site remains accessible while you configure the Worker.
3. To avoid conflicts, update any absolute URLs in your main site to be relative.
4. In Cloudflare, select **Edit Code** and add the following script into your Worker's code.

<Tip> Replace `[SUBDOMAIN]` with your unique subdomain, `[YOUR_DOMAIN]` with your website's base URL, and `[LANDING_DOMAIN]` with your landing page URL. </Tip>

```javascript
addEventListener("fetch", (event) => {
event.respondWith(handleRequest(event.request));
});
async function handleRequest(request) {
try {
  const urlObject = new URL(request.url);
  
  // If the request is to a Vercel verification path, allow it to pass through
  if (urlObject.pathname.startsWith('/.well-known/')) {
    return await fetch(request);
  }
  
  // If the request is to the docs subdirectory
  if (/^\/docs/.test(urlObject.pathname)) {
    // Proxy to Mintlify
    const DOCS_URL = "[SUBDOMAIN].mintlify.dev";
    const CUSTOM_URL = "[YOUR_DOMAIN]";
    let url = new URL(request.url);
    url.hostname = DOCS_URL;
    let proxyRequest = new Request(url, request);
    proxyRequest.headers.set("Host", DOCS_URL);
    proxyRequest.headers.set("X-Forwarded-Host", CUSTOM_URL);
    proxyRequest.headers.set("X-Forwarded-Proto", "https");
    // If deploying to Vercel, preserve client IP
    proxyRequest.headers.set("CF-Connecting-IP", request.headers.get("CF-Connecting-IP"));
    return await fetch(proxyRequest);
  }
  // Route everything else to main site
  const MAIN_SITE_URL = "[LANDING_DOMAIN]";
  if (MAIN_SITE_URL && MAIN_SITE_URL !== "[LANDING_DOMAIN]") {
    let mainSiteUrl = new URL(request.url);
    mainSiteUrl.hostname = MAIN_SITE_URL;
    return await fetch(mainSiteUrl, {
      method: request.method,
      headers: request.headers,
      body: request.body
    });
  }
} catch (error) {
  // If no action found, serve the regular request
  return await fetch(request);
}
}
```

5. Select **Deploy** and wait for the changes to propagate.

<Note>
  After configuring your DNS, custom subdomains are usually available within a few minutes. DNS propagation can sometimes take 1-4 hours, and in rare cases up to 48 hours. If your subdomain is not immediately available, please wait before troubleshooting.
</Note>


# AWS Route 53 and CloudFront
Source: https://mintlify.com/docs/advanced/subpath/route53-cloudfront

Host documentation at a /docs subdirectory using AWS services

To host your documentation at a `/docs` subpath using AWS Route 53 and CloudFront, you need to configure your DNS provider to point to your CloudFront distribution.

## Proxies with Vercel deployments

If you use AWS CloudFront as a proxy with Vercel deployments, you must configure CloudFront to avoid interfering with Vercel's domain verification and SSL certificate provisioning.

Improper CloudFront configuration can prevent Vercel from provisioning Let's Encrypt SSL certificates and cause domain verification failures.

### Required path allowlist

CloudFront must allow traffic to these specific paths without caching or blocking:

* `/.well-known/acme-challenge/*` - Required for Let's Encrypt certificate verification
* `/.well-known/vercel/*` - Required for Vercel domain verification

These paths should be configured to bypass CloudFront caching and pass through directly to your origin.

### Header forwarding requirements

You must create a custom origin request policy that forwards the `HOST` header and client IP information correctly. This is critical for Vercel's verification processes.

1. Create a custom origin request policy named `VercelCloudFrontProxy`.
2. Include the `Origin` and `CloudFront-Viewer-Address` headers.

You must include the `CloudFront-Viewer-Address` header in your origin request policy or cache policy headers configuration to forward the header to your origin.

## Create CloudFront distribution

1. Navigate to [CloudFront](https://aws.amazon.com/cloudfront) inside the AWS console.
2. Select **Create distribution**.

<Frame>
    <img src="https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/cloudfront/create-distribution.png?maxW=3024&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=57c896c8404744be47ef5a5ae05638a4" alt="CloudFront Distributions page with the &#x22;Create distribution&#x22; button emphasized." width="3024" height="922" data-path="images/cloudfront/create-distribution.png" srcset="https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/cloudfront/create-distribution.png?w=280&maxW=3024&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=eab6d88fcf8c77b8879fac807d292396 280w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/cloudfront/create-distribution.png?w=560&maxW=3024&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=ffeebe0455b3537b81ca3f93e259ecc6 560w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/cloudfront/create-distribution.png?w=840&maxW=3024&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=b2326983601084c8a67e435f6a88594d 840w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/cloudfront/create-distribution.png?w=1100&maxW=3024&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=ada9cbf4639f423ae928c71f2611459c 1100w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/cloudfront/create-distribution.png?w=1650&maxW=3024&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=590cae1cc9e6167254744c7fa795f4b4 1650w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/cloudfront/create-distribution.png?w=2500&maxW=3024&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=31f365f4bd3bd5c4c1429efe45b3d4da 2500w" data-optimize="true" data-opv="2" />
</Frame>

3. For the Origin domain, input `[SUBDOMAIN].mintlify.dev` where `[SUBDOMAIN]` is your project's unique subdomain.

<Frame>
    <img src="https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/cloudfront/origin-name.png?maxW=1495&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=d8dd7c532eacb19aeb34a92de7e2457a" alt="CloudFront &#x22;Create distribution&#x22; page showing &#x22;acme.mintlify.dev&#x22; as the origin domain." width="1495" height="1036" data-path="images/cloudfront/origin-name.png" srcset="https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/cloudfront/origin-name.png?w=280&maxW=1495&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=47918a1ab46f5d8ad0d8e26a68f200cd 280w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/cloudfront/origin-name.png?w=560&maxW=1495&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=fe78b4e99345d9ccb0bdda1889066fef 560w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/cloudfront/origin-name.png?w=840&maxW=1495&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=0ff89759090d6c55f93731b82199489b 840w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/cloudfront/origin-name.png?w=1100&maxW=1495&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=ab5a5196da594bb336e63c27f47c46f6 1100w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/cloudfront/origin-name.png?w=1650&maxW=1495&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=d81960ab50430c7d24c29f7e0f838f72 1650w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/cloudfront/origin-name.png?w=2500&maxW=1495&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=7094f8430af246b96ab0de552f383070 2500w" data-optimize="true" data-opv="2" />
</Frame>

4. For "Web Application Firewall (WAF)," enable security protections.

<Frame>
    <img src="https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/cloudfront/enable-security-protections.png?maxW=1482&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=c2c266fd6032bddb1bb56730eeb8cd90" alt="Web Application Firewall (WAF) options with &#x22;Enable security protections&#x22; selected." width="1482" height="877" data-path="images/cloudfront/enable-security-protections.png" srcset="https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/cloudfront/enable-security-protections.png?w=280&maxW=1482&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=59e8b3837c7dc00a39b16b0d67c0e97b 280w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/cloudfront/enable-security-protections.png?w=560&maxW=1482&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=edb7fc900b07ed3f5ad3f594fdb00733 560w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/cloudfront/enable-security-protections.png?w=840&maxW=1482&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=3936be00f01da130fcf67135b00cf3a6 840w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/cloudfront/enable-security-protections.png?w=1100&maxW=1482&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=76e50e21589a7b682f8895cce1b30e74 1100w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/cloudfront/enable-security-protections.png?w=1650&maxW=1482&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=a72cd7236da484fc2dce939943f2d423 1650w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/cloudfront/enable-security-protections.png?w=2500&maxW=1482&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=2179259f2078084cc25d9cec8e69a139 2500w" data-optimize="true" data-opv="2" />
</Frame>

5. The remaining settings should be default.
6. Select **Create distribution**.

## Add default origin

1. After creating the distribution, navigate to the "Origins" tab.

<Frame>
    <img src="https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/cloudfront/origins.png?maxW=3024&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=cffd5e3d721ef2d15993001bcb75bf78" alt="A CloudFront distribution with the &#x22;Origins&#x22; tab highlighted." width="3024" height="1466" data-path="images/cloudfront/origins.png" srcset="https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/cloudfront/origins.png?w=280&maxW=3024&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=0f8b79c5ba1cdc820aa09d067ed66486 280w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/cloudfront/origins.png?w=560&maxW=3024&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=0608dc297b2d9707e4c56b6a473cdd8e 560w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/cloudfront/origins.png?w=840&maxW=3024&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=5c7fe0d5a81d478cf31f12344fb69dcf 840w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/cloudfront/origins.png?w=1100&maxW=3024&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=8d01646eee1f803731077f0b178e5d9a 1100w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/cloudfront/origins.png?w=1650&maxW=3024&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=1cbfe114caff5d3678a522381db30d7d 1650w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/cloudfront/origins.png?w=2500&maxW=3024&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=12ab1461c1e0729067b34954635dca2f 2500w" data-optimize="true" data-opv="2" />
</Frame>

2. Find your staging URL that mirrors the main domain. This is highly variant depending on how your landing page is hosted. For example, the Mintlify staging URL is [mintlify-landing-page.vercel.app](https://mintlify-landing-page.vercel.app).

<Info>
  If your landing page is hosted on Webflow, use Webflow's staging URL. It would look like `.webflow.io`.

  If you use Vercel, use the `.vercel.app` domain available for every project.
</Info>

3. Create a new Origin and add your staging URL as the "Origin domain".

<Frame>
    <img src="https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/cloudfront/default-origin.png?maxW=3024&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=2f7a8791b57c83100cd115286bb0cda6" alt="CloudFront &#x22;Create origin&#x22; page with a &#x22;Origin domain&#x22; input field highlighted." width="3024" height="1332" data-path="images/cloudfront/default-origin.png" srcset="https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/cloudfront/default-origin.png?w=280&maxW=3024&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=c4364604755505cef74165f0f1627e3a 280w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/cloudfront/default-origin.png?w=560&maxW=3024&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=269ce2393bf8cb0b9b384d35eab32a95 560w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/cloudfront/default-origin.png?w=840&maxW=3024&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=b130587a48e19d8e28623ba68b8d3b43 840w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/cloudfront/default-origin.png?w=1100&maxW=3024&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=9534dabe3317fd2239deb0748223bfe0 1100w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/cloudfront/default-origin.png?w=1650&maxW=3024&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=5bdec28c52d9989b1381d9afa2a9bee7 1650w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/cloudfront/default-origin.png?w=2500&maxW=3024&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=1db8d66e03b8bedaee33bad41f7f7f9b 2500w" data-optimize="true" data-opv="2" />
</Frame>

By this point, you should have two Origins: one with `[SUBDOMAIN].mintlify.app` and another with your staging URL.

<Frame>
    <img src="https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/cloudfront/final-origins.png?maxW=1230&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=4b387b75ed9333f3a91c961ebdb7871b" alt="CloudFront &#x22;Origins&#x22; page with two origins: One for mintlify and another for mintlify-landing-page." width="1230" height="690" data-path="images/cloudfront/final-origins.png" srcset="https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/cloudfront/final-origins.png?w=280&maxW=1230&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=d1d923f4acc774c579c15974704a2441 280w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/cloudfront/final-origins.png?w=560&maxW=1230&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=6c84fe205e14e6aeb84e8dc331c2a8ea 560w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/cloudfront/final-origins.png?w=840&maxW=1230&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=bb62a5de994baa6e7f85333b6b050177 840w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/cloudfront/final-origins.png?w=1100&maxW=1230&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=5b7b9cf52d2add7635c5ccfb9e91cfe0 1100w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/cloudfront/final-origins.png?w=1650&maxW=1230&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=05a9d321d182f14148576ab43a72502a 1650w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/cloudfront/final-origins.png?w=2500&maxW=1230&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=8e8655d2ac87ccbeb2922b56f00491df 2500w" data-optimize="true" data-opv="2" />
</Frame>

## Set behaviors

Behaviors in CloudFront enable control over the subpath logic. At a high level, we're looking to create the following logic.

* **If a user lands on /docs**, go to `[SUBDOMAIN].mintlify.dev`.
* **If a user lands on any other page**, go the current landing page.

1. Navigate to the "Behaviors" tab of your CloudFront distribution.

<Frame>
    <img src="https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/cloudfront/behaviors.png?maxW=3024&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=6bd23d5e702336796f199cd3f7e7434a" alt="CloudFront &#x22;Behaviors&#x22; tab highlighted." width="3024" height="1384" data-path="images/cloudfront/behaviors.png" srcset="https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/cloudfront/behaviors.png?w=280&maxW=3024&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=1948d63f9786d21a9c493219f2ab196f 280w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/cloudfront/behaviors.png?w=560&maxW=3024&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=452c283c5348106e8a061e3028cb65cf 560w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/cloudfront/behaviors.png?w=840&maxW=3024&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=b8d853adca13011bed150e37a3505abb 840w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/cloudfront/behaviors.png?w=1100&maxW=3024&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=b2508a5fc753a2186bba820ffbb8a792 1100w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/cloudfront/behaviors.png?w=1650&maxW=3024&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=5587be44ced3e6294859c9490a231cff 1650w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/cloudfront/behaviors.png?w=2500&maxW=3024&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=d036d1afc95cd4363ac6aeb39f95dc02 2500w" data-optimize="true" data-opv="2" />
</Frame>

2. Select the **Create behavior** button and create the following behaviors.

### `/.well-known/*`

Create behaviors for Vercel domain verification paths with a **Path pattern** of `/.well-known/*` and set **Origin and origin groups** to your docs URL.

For "Cache policy", select **CachingDisabled** to ensure these verification requests pass through without caching.

<Frame>
    <img src="https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/cloudfront/well-known-policy.png?maxW=1413&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=5451c8da12b15adec905b49242e15482" alt="CloudFront &#x22;Create behavior&#x22; page with a &#x22;Path pattern&#x22; of &#x22;/.well-known/*&#x22; and &#x22;Origin and origin groups&#x22; pointing to the staging URL." width="1413" height="1098" data-path="images/cloudfront/well-known-policy.png" srcset="https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/cloudfront/well-known-policy.png?w=280&maxW=1413&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=5736276c01083c255870da2d4b59a93a 280w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/cloudfront/well-known-policy.png?w=560&maxW=1413&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=587e448f24622c56c2b0188ae33a074e 560w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/cloudfront/well-known-policy.png?w=840&maxW=1413&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=b990dc25194177272829bc143f03c57f 840w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/cloudfront/well-known-policy.png?w=1100&maxW=1413&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=ad478a6730be9d210213ffe19f18d2ed 1100w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/cloudfront/well-known-policy.png?w=1650&maxW=1413&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=d210eda0c243720984b5718453830cdc 1650w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/cloudfront/well-known-policy.png?w=2500&maxW=1413&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=f59178fb3fcdf234cf8eecbc605c5149 2500w" data-optimize="true" data-opv="2" />
</Frame>

<Info>
  If `.well-known/*` is too generic, it can be narrowed down to 2 behaviors at a minimum for Vercel:

  * `/.well-known/vercel/*` - Required for Vercel domain verification
  * `/.well-known/acme-challenge/*` - Required for Let's Encrypt certificate verification
</Info>

### `/docs`

Create a behavior with a **Path pattern** of `/docs` with **Origin and origin groups** pointing to the `.mintlify.dev` URL (in our case `acme.mintlify.dev`).

* Set "Cache policy" to **CachingOptimized**.
* In "Origin request policy", create an origin request policy named **VercelCloudFrontProxy**. That forwards the `Origin` and `CloudFront-Viewer-Address` headers.

<Frame>
    <img src="https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/cloudfront/origin-request-policy.png?maxW=1524&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=32998bdeac80173afe2a6a7a9ee3c99f" alt="CloudFront Create origin request policy page that forwards the Origin and CloudFront-Viewer-Address headers" width="1524" height="789" data-path="images/cloudfront/origin-request-policy.png" srcset="https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/cloudfront/origin-request-policy.png?w=280&maxW=1524&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=e0e3dda15ef048f91e21b31cb0199e7c 280w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/cloudfront/origin-request-policy.png?w=560&maxW=1524&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=faf0cf269b8b141bf6b577c8a8d984fc 560w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/cloudfront/origin-request-policy.png?w=840&maxW=1524&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=b7590d28dc7a6a8a81928dc63d9c5341 840w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/cloudfront/origin-request-policy.png?w=1100&maxW=1524&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=c37b66709232d406e096025a0d89936e 1100w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/cloudfront/origin-request-policy.png?w=1650&maxW=1524&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=ae88896a06d87302348f3d687df72fd8 1650w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/cloudfront/origin-request-policy.png?w=2500&maxW=1524&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=3a4cfe4ba87b46512c63cca3d24ca4ed 2500w" data-optimize="true" data-opv="2" />
</Frame>

* Set Viewer Protocol Policy to **Redirect HTTP to HTTPS**

<Frame>
    <img src="https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/cloudfront/behavior-1.png?maxW=1205&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=7667a48b7b8e1329e988dba3010618f7" alt="CloudFront &#x22;Create behavior&#x22; page with a &#x22;Path pattern&#x22; of &#x22;/docs/*&#x22; and &#x22;Origin and origin groups&#x22; pointing to the acme.mintlify.dev URL." width="1205" height="1068" data-path="images/cloudfront/behavior-1.png" srcset="https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/cloudfront/behavior-1.png?w=280&maxW=1205&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=ba28a59b4b48d74dece8ee5ffef060b5 280w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/cloudfront/behavior-1.png?w=560&maxW=1205&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=bf0bdbacfb777082393f5de6cf43bb1f 560w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/cloudfront/behavior-1.png?w=840&maxW=1205&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=5e85206776ddf00aae366bf82b7e807d 840w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/cloudfront/behavior-1.png?w=1100&maxW=1205&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=df9cfef98a8b2920619083d9f59d0490 1100w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/cloudfront/behavior-1.png?w=1650&maxW=1205&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=ec0e36f686ea5a0f21a44ce169de7190 1650w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/cloudfront/behavior-1.png?w=2500&maxW=1205&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=eabfdf938a9e718b55376a1a3029ccb3 2500w" data-optimize="true" data-opv="2" />
</Frame>

### `/docs/*`

Create a behavior with a **Path pattern** of `/docs/*` and **Origin and origin groups** pointing to the same `.mintlify.dev` URL.

These settings should exactly match `/docs`. With the exception of the **Path pattern**.

* Set "Cache policy" to **CachingOptimized**.
* Set "Origin request policy" to **VercelCloudFrontProxy**.
* Set "Viewer protocol policy" to **Redirect HTTP to HTTPS**

### `Default (*)`

Lastly, we're going to edit the `Default (*)` behavior.

<Frame>
    <img src="https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/cloudfront/default-behavior-1.png?maxW=3024&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=18cc3be6342b2ab06bdcb7a537e85a28" alt="A CloudFront distribution with the &#x22;Default (*)&#x22; behavior selected and the Edit button emphasized." width="3024" height="1406" data-path="images/cloudfront/default-behavior-1.png" srcset="https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/cloudfront/default-behavior-1.png?w=280&maxW=3024&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=c616ba6e43b1e11591bbeefb966906a5 280w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/cloudfront/default-behavior-1.png?w=560&maxW=3024&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=506d2cb6cf1c8d4dacfdd8d9a57fa142 560w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/cloudfront/default-behavior-1.png?w=840&maxW=3024&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=07d6fd4e73b19372997aab48bb4e958c 840w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/cloudfront/default-behavior-1.png?w=1100&maxW=3024&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=33aca721a295cab4b70d5ca3b79de45e 1100w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/cloudfront/default-behavior-1.png?w=1650&maxW=3024&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=7b75e02e56b0daab9fa1df664d5712a1 1650w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/cloudfront/default-behavior-1.png?w=2500&maxW=3024&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=c7db304168d02b9e163911b1614c41a5 2500w" data-optimize="true" data-opv="2" />
</Frame>

1. Change the default behavior's **Origin and origin groups** to the staging URL (in our case `mintlify-landing-page.vercel.app`).

<Frame>
    <img src="https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/cloudfront/default-behavior-2.png?maxW=3024&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=2eefcd481498d5fd13b9e3aae3a6d4bc" alt="CloudFront &#x22;Edit behavior&#x22; page with the &#x22;Origin and origin groups&#x22; input field highlighted." width="3024" height="1298" data-path="images/cloudfront/default-behavior-2.png" srcset="https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/cloudfront/default-behavior-2.png?w=280&maxW=3024&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=6b78919f03c489b0fd308b3dcc24a522 280w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/cloudfront/default-behavior-2.png?w=560&maxW=3024&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=d202fbc205f98b5cc3320e946888f86a 560w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/cloudfront/default-behavior-2.png?w=840&maxW=3024&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=f82e359357f2ef8f676d086bbf342efb 840w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/cloudfront/default-behavior-2.png?w=1100&maxW=3024&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=c55d495cbf008b6f03a88bd526b16691 1100w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/cloudfront/default-behavior-2.png?w=1650&maxW=3024&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=78c32c0e1a74d180015110959d2f35d4 1650w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/cloudfront/default-behavior-2.png?w=2500&maxW=3024&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=58db5b97694d57ba41fbc780e8514a97 2500w" data-optimize="true" data-opv="2" />
</Frame>

2. Select **Save changes**.

### Check behaviors are set up correctly

If you follow the above steps, your behaviors should look like this:

<Frame>
    <img src="https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/cloudfront/all-behaviors.png?maxW=1342&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=3d683b9581ccc5d76eba1d315206dcf5" alt="CloudFront &#x22;Behaviors&#x22; page with 4 behaviors: /docs/*, /docs, Default, and /.well-known/*." width="1342" height="326" data-path="images/cloudfront/all-behaviors.png" srcset="https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/cloudfront/all-behaviors.png?w=280&maxW=1342&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=e3d7b5bfd5a47a0395295d0e1577b0f9 280w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/cloudfront/all-behaviors.png?w=560&maxW=1342&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=515b68ef2255eee34f1d2cb4e869bc06 560w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/cloudfront/all-behaviors.png?w=840&maxW=1342&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=6fd61059aa90fa8cc4c940baaadb6f5a 840w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/cloudfront/all-behaviors.png?w=1100&maxW=1342&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=8368e7c2f2b63a44d8bcc0cdce0a4ec7 1100w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/cloudfront/all-behaviors.png?w=1650&maxW=1342&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=c24655ec0a0292d462e060cf8363e9bc 1650w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/cloudfront/all-behaviors.png?w=2500&maxW=1342&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=f544d91c460c0f281f858345bcfa3bcb 2500w" data-optimize="true" data-opv="2" />
</Frame>

## Preview distribution

You can now test if your distribution is set up properly by going to the "General" tab and visiting the **Distribution domain name** URL.

<Frame>
    <img src="https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/cloudfront/preview-distribution.png?maxW=3024&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=a6694db7a7e2da59115e5986d216512b" alt="CloudFront &#x22;General&#x22; tab with the &#x22;Distribution domain name&#x22; URL highlighted." width="3024" height="1394" data-path="images/cloudfront/preview-distribution.png" srcset="https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/cloudfront/preview-distribution.png?w=280&maxW=3024&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=34b8af5050e3d9281d7076cde18b5530 280w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/cloudfront/preview-distribution.png?w=560&maxW=3024&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=6ffe216e6a587990a327617ab320cd10 560w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/cloudfront/preview-distribution.png?w=840&maxW=3024&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=a0959689389c38468d9f08ec840e91b7 840w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/cloudfront/preview-distribution.png?w=1100&maxW=3024&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=fe1becfa9f5ad996fc2821302bf30d0a 1100w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/cloudfront/preview-distribution.png?w=1650&maxW=3024&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=f10a626844d6a2830dd37a02924b9f4e 1650w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/cloudfront/preview-distribution.png?w=2500&maxW=3024&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=cb35e9a2caaf27eeff8dc26a8f748f9c 2500w" data-optimize="true" data-opv="2" />
</Frame>

All pages should be directing to your main landing page, but if you append `/docs` to the URL, you should see it going to your Mintlify documentation instance.

## Connect with Route53

Now, we're going to bring the functionality of the CloudFront distribution into your primary domain.

<Note>
  For this section, you can also refer to AWS's official guide on [Configuring
  Amazon Route 53 to route traffic to a CloudFront
  distribution](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-to-cloudfront-distribution.html#routing-to-cloudfront-distribution-config)
</Note>

1. Navigate to [Route53](https://aws.amazon.com/route53) inside the AWS console.
2. Navigate to the "Hosted zone" for your primary domain.
3. Select **Create record**.

<Frame>
    <img src="https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/cloudfront/route53-create-record.png?maxW=1540&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=ccca8dd7bed89e2db89b06991f6a40e0" alt="Route 53 &#x22;Records&#x22; page with the &#x22;Create record&#x22; button emphasized." width="1540" height="1238" data-path="images/cloudfront/route53-create-record.png" srcset="https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/cloudfront/route53-create-record.png?w=280&maxW=1540&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=3fa2e5e7b62dc512388f689bc4e3a746 280w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/cloudfront/route53-create-record.png?w=560&maxW=1540&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=ee30f8989f9926dd390e18e49600c967 560w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/cloudfront/route53-create-record.png?w=840&maxW=1540&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=e10714462e6db2048539ce1fb18829ba 840w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/cloudfront/route53-create-record.png?w=1100&maxW=1540&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=e154f977208d51def869df8ea4d32454 1100w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/cloudfront/route53-create-record.png?w=1650&maxW=1540&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=919ea13f431b06e567795311516bb795 1650w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/cloudfront/route53-create-record.png?w=2500&maxW=1540&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=6932b8460b515861304114d2b631ba7c 2500w" data-optimize="true" data-opv="2" />
</Frame>

4. Toggle `Alias` and then **Route traffic to** the `Alias to CloudFront distribution` option.

<Frame>
    <img src="https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/cloudfront/create-record-alias.png?maxW=3024&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=6dd6513d2063d0f9d17286abb74a7c3e" alt="Route 53 &#x22;Create record&#x22; page with the &#x22;Alias&#x22; toggle and the &#x22;Route traffic to&#x22; menu highlighted." width="3024" height="1494" data-path="images/cloudfront/create-record-alias.png" srcset="https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/cloudfront/create-record-alias.png?w=280&maxW=3024&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=ed6e30434d4f7cfe3201f246369d4018 280w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/cloudfront/create-record-alias.png?w=560&maxW=3024&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=13a6c3ccd062fc31ba9322512c842fc9 560w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/cloudfront/create-record-alias.png?w=840&maxW=3024&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=7461367beada06d79c06153b673c4da9 840w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/cloudfront/create-record-alias.png?w=1100&maxW=3024&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=621490be509401c563265aa6bc77b8c9 1100w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/cloudfront/create-record-alias.png?w=1650&maxW=3024&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=c0c44675ac07ba938641a0d7c778995d 1650w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/cloudfront/create-record-alias.png?w=2500&maxW=3024&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=a19f68e9797a1d11d65720fd0ced85dd 2500w" data-optimize="true" data-opv="2" />
</Frame>

5. Select **Create records**.

<Note>
  You may need to remove the existing A record if one currently exists.
</Note>

Your documentation is now live at `/docs` for your primary domain.

<Note>
  After configuring your DNS, custom subdomains are usually available within a few minutes. DNS propagation can sometimes take 1-4 hours, and in rare cases up to 48 hours. If your subdomain is not immediately available, please wait before troubleshooting.
</Note>


# Vercel
Source: https://mintlify.com/docs/advanced/subpath/vercel

Host documentation at a /docs subpath using Vercel

## vercel.json file

The `vercel.json` file is Vercel's configuration file that allows you to customize how your project is built and deployed. It sits in your project's root directory and controls various aspects of your deployment, including routing, redirects, headers, and build settings.

We use the `rewrites` configuration to proxy requests from your main domain to your documentation.

Rewrites allow you to map incoming requests to different destinations without changing the URL in the browser. When someone visits `yoursite.com/docs`, Vercel will internally fetch content from `your-subdomain.mintlify.dev/docs` but the user will still see `yoursite.com/docs` in their browser. This is different from redirects, which would send users to a different URL entirely.

## Configuration

To host your documentation at a custom `/docs` subpath using Vercel, add the following configuration to your `vercel.json` file:

```json
{
  "rewrites": [
    {
      "source": "/docs",
      "destination": "https://[subdomain].mintlify.dev/docs"
    },
    {
      "source": "/docs/:match*",
      "destination": "https://[subdomain].mintlify.dev/docs/:match*"
    }
  ]
}
```

* **`source`**: The path pattern on your domain that triggers the rewrite.
* **`destination`**: Where the request should be proxied to.
* **`:match*`**: A wildcard that captures any path segments after `/docs/`.

For more information, see [Configuring projects with vercel.json: Rewrites](https://vercel.com/docs/projects/project-configuration#rewrites) in the Vercel documentation.

## Using external proxies with Vercel

If you're using an external proxy (like Cloudflare or AWS CloudFront) in front of your Vercel deployment, you must configure it properly to avoid conflicts with Vercel's domain verification and SSL certificate provisioning.

Improper proxy configuration can prevent Vercel from provisioning Let's Encrypt SSL certificates and cause domain verification failures.

See the [supported providers](https://vercel.com/guides/how-to-setup-verified-proxy#supported-providers-verified-proxy-lite) in the Vercel documentation.

### Required path allowlist

Your external proxy must allow traffic to these specific paths without blocking, redirecting, or heavily caching:

* `/.well-known/acme-challenge/*` - Required for Let's Encrypt certificate verification
* `/.well-known/vercel/*` - Required for Vercel domain verification

These paths should pass through directly to your Vercel deployment without modification.

### Header forwarding requirements

Ensure that your proxy correctly forwards the `HOST` header. Without proper header forwarding, verification requests will fail.

### Testing your proxy setup

To verify your proxy is correctly configured:

1. Test that `https://[yourdomain].com/.well-known/vercel/` returns a response.
2. Ensure SSL certificates are provisioning correctly in your Vercel dashboard.
3. Check that domain verification completes successfully.


# Contextual menu
Source: https://mintlify.com/docs/ai/contextual-menu

Add one-click AI integrations to your docs

export const PreviewButton = ({children, href}) => {
  return <a href={href} className="text-sm font-medium text-white dark:!text-zinc-950 bg-zinc-900 hover:bg-zinc-700 dark:bg-zinc-100 hover:dark:bg-zinc-300 rounded-full px-3.5 py-1.5 not-prose">
        {children}
      </a>;
};

The contextual menu provides quick access to AI-optimized content and direct integrations with popular AI tools. When users select the contextual menu on any page, they can copy content as context for AI tools or open conversations in ChatGPT, Claude, Perplexity, or a custom tool of your choice with your documentation already loaded as context.

## Menu options

The contextual menu includes several pre-built options that you can enable by adding their identifier to your configuration.

| Option                  | Identifier   | Description                                                              |
| :---------------------- | :----------- | :----------------------------------------------------------------------- |
| **Copy page**           | `copy`       | Copies the current page as Markdown for pasting as context into AI tools |
| **View as Markdown**    | `view`       | Opens the current page as Markdown                                       |
| **Open in ChatGPT**     | `chatgpt`    | Creates a ChatGPT conversation with the current page as context          |
| **Open in Claude**      | `claude`     | Creates a Claude conversation with the current page as context           |
| **Open in Perplexity**  | `perplexity` | Creates a Perplexity conversation with the current page as context       |
| **Copy MCP server URL** | `mcp`        | Copies your MCP server URL to the clipboard                              |
| **Connect to Cursor**   | `cursor`     | Installs your hosted MCP server in Cursor                                |
| **Connect to VS Code**  | `vscode`     | Installs your hosted MCP server in VS Code                               |

<Frame>
  <img src="https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/contextual-menu/contextual-menu.png?maxW=1396&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=7aa26b4071c92d21c904e6a5f0fc1ff7" alt="The expanded contextual menu showing the Copy page, View as Markdown, Open in ChatGPT, and Open in Claude menu items." width="1396" height="944" data-path="images/contextual-menu/contextual-menu.png" srcset="https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/contextual-menu/contextual-menu.png?w=280&maxW=1396&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=7ddc9d3828b7be14d96cd1cfe5f2b82a 280w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/contextual-menu/contextual-menu.png?w=560&maxW=1396&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=663b308ab2d9ca37945d8ecc4a69a2a6 560w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/contextual-menu/contextual-menu.png?w=840&maxW=1396&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=34ba183946183f7b9231800ea8e5c262 840w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/contextual-menu/contextual-menu.png?w=1100&maxW=1396&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=18587646bd53f6652abcd37a79cdc9db 1100w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/contextual-menu/contextual-menu.png?w=1650&maxW=1396&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=83f31c5c48629150fd796234b45860d2 1650w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/contextual-menu/contextual-menu.png?w=2500&maxW=1396&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=15bf237e00c2f17b3c46470b08829578 2500w" data-optimize="true" data-opv="2" />
</Frame>

## Enabling the contextual menu

Add the `contextual` field to your `docs.json` file and specify which options you want to include.

```json
{
 "contextual": {
   "options": [
     "copy",
     "view",
     "chatgpt",
     "claude",
     "perplexity",
     "mcp",
     "cursor",
     "vscode"
   ]
 }
}
```

## Adding custom options

Create custom options in the contextual menu by adding an object to the `options` array. Each custom option requires these properties:

<ResponseField name="title" type="string" required>
  The title of the option.
</ResponseField>

<ResponseField name="description" type="string" required>
  The description of the option. Displayed beneath the title when the contextual menu is expanded.
</ResponseField>

<ResponseField name="icon" type="string" required>
  The icon to display.

  Options:

  * [Font Awesome icon](https://fontawesome.com/icons) name
  * [Lucide icon](https://lucide.dev/icons) name
  * JSX-compatible SVG code wrapped in curly braces
  * URL to an externally hosted icon
  * Path to an icon file in your project

  For custom SVG icons:

  1. Convert your SVG using the [SVGR converter](https://react-svgr.com/playground/).
  2. Paste your SVG code into the SVG input field.
  3. Copy the complete `<svg>...</svg>` element from the JSX output field.
  4. Wrap the JSX-compatible SVG code in curly braces: `icon={<svg ...> ... </svg>}`.
  5. Adjust `height` and `width` as needed.
</ResponseField>

<ResponseField name="iconType" type="string">
  The [Font Awesome](https://fontawesome.com/icons) icon style. Only used with Font Awesome icons.

  Options: `regular`, `solid`, `light`, `thin`, `sharp-solid`, `duotone`, `brands`.
</ResponseField>

<ResponseField name="href" type="string | object" required>
  The href of the option. Use a string for simple links or an object for dynamic links with query parameters.

  <Expandable title="href object">
    <ResponseField name="base" type="string" required>
      The base URL for the option.
    </ResponseField>

    <ResponseField name="query" type="object" required>
      The query parameters for the option.

      <Expandable title="query object">
        <ResponseField name="key" type="string" required>
          The query parameter key.
        </ResponseField>

        <ResponseField name="value" type="string" required>
          The query parameter value. We will replace the following placeholders with the corresponding values:

          * Use `$page` to insert the current page content in Markdown.
          * Use `$path` to insert the current page path.
          * Use `$mcp` to insert the hosted MCP server URL.
        </ResponseField>
      </Expandable>
    </ResponseField>
  </Expandable>
</ResponseField>

Example custom option:

```json {9-14} wrap
{
    "contextual": {
        "options": [
            "copy",
            "view",
            "chatgpt",
            "claude",
            "perplexity",
            {
                "title": "Request a feature",
                "description": "Join the discussion on GitHub to request a new feature",
                "icon": "plus",
                "href": "https://github.com/orgs/mintlify/discussions/categories/feature-requests"
            }
        ]
    }
}
```

### Custom option examples

<AccordionGroup>
  <Accordion title="Simple link">
    ```json
    {
      "title": "Request a feature",
      "description": "Join the discussion on GitHub",
      "icon": "plus",
      "href": "https://github.com/orgs/mintlify/discussions/categories/feature-requests"
    }
    ```
  </Accordion>

  <Accordion title="Dynamic link with page content">
    ```json
    {
      "title": "Share on X",
      "description": "Share this page on X",
      "icon": "x",
      "href": {
        "base": "https://x.com/intent/tweet",
        "query": {
          "key": "text",
          "value": "Check out this documentation: $page"
        }
      }
    }
    ```
  </Accordion>
</AccordionGroup>


# llms.txt
Source: https://mintlify.com/docs/ai/llmstxt

Make your content easier for LLMs to read and index

export const PreviewButton = ({children, href}) => {
  return <a href={href} className="text-sm font-medium text-white dark:!text-zinc-950 bg-zinc-900 hover:bg-zinc-700 dark:bg-zinc-100 hover:dark:bg-zinc-300 rounded-full px-3.5 py-1.5 not-prose">
        {children}
      </a>;
};

The [llms.txt file](https://llmstxt.org) is an industry standard that helps LLMs index content more efficiently, similar to how a sitemap helps search engines. AI tools can use this file to understand your documentation structure and find content relevant to user queries.

Mintlify automatically hosts an `llms.txt` file at the root of your project that lists all available pages in your documentation. This file is always up to date and requires zero maintenance. You can optionally add a custom `llms.txt` file to the root of your project.

View your `llms.txt` by appending `/llms.txt` to your documentation site's URL.

<PreviewButton href="https://mintlify.com/docs/llms.txt">Open the llms.txt for this site.</PreviewButton>

## llms.txt structure

An `llms.txt` file is a plain Markdown file that contains:

* **Site title** as an H1 heading.
* **Structured content sections** with links and a description of each page in your documentation.

```mdx Example llms.txt
# Example product docs

## Guides
- [Getting started](https://example.com/docs/start): Intro guide
- [Install](https://example.com/docs/install): Setup steps

## Reference
- [API](https://example.com/docs/api): Endpoint list and usage
```

This structured approach allows LLMs to efficiently process your documentation at a high level and locate relevant content for user queries, improving the accuracy and speed of AI-assisted documentation searches.

## llms-full.txt

The `llms-full.txt` file combines your entire documentation site into a single file as context for AI tools and is indexed by LLM traffic.

Mintlify automatically hosts an `llms-full.txt` file at the root of your project. View your `llms-full.txt` by appending `/llms-full.txt` to your documentation site's URL.

<PreviewButton href="https://mintlify.com/docs/llms-full.txt">Open the llms-full.txt for this site.</PreviewButton>

## Custom files

To add a custom `llms.txt` or `llms-full.txt` file, create an `llms.txt` or `llms-full.txt` file at the root of your project. Adding a custom file will override the automatically generated file of the same name. If you delete a custom file, the default file will be used again.

Your custom `llms.txt` or `llms-full.txt` file must have a site title as an H1 heading. Other content is optional. See [Format](https://llmstxt.org/#format) in the `llms.txt` specification for more information on optional sections and best practices.


# Markdown export
Source: https://mintlify.com/docs/ai/markdown-export

Quickly get Markdown versions of pages

export const PreviewButton = ({children, href}) => {
  return <a href={href} className="text-sm font-medium text-white dark:!text-zinc-950 bg-zinc-900 hover:bg-zinc-700 dark:bg-zinc-100 hover:dark:bg-zinc-300 rounded-full px-3.5 py-1.5 not-prose">
        {children}
      </a>;
};

Markdown provides structured text that AI tools can process more efficiently than HTML, which results in better response accuracy, faster processing times, and lower token usage.

Mintlify automatically generates Markdown versions of pages that are optimized for AI tools and external integrations.

## .md URL extension

Add `.md` to any page's URL to view a Markdown version.

<PreviewButton href="https://mintlify.com/docs/ai/markdown-export.md">Open this page as Markdown</PreviewButton>

## Keyboard shortcut

Press <kbd>Command</kbd> + <kbd>C</kbd> (<kbd>Ctrl</kbd> + <kbd>C</kbd> on Windows) to copy a page as Markdown to your clipboard.


# Model Context Protocol
Source: https://mintlify.com/docs/ai/model-context-protocol

Let users access your docs and APIs through their favorite AI tools

export const PreviewButton = ({children, href}) => {
  return <a href={href} className="text-sm font-medium text-white dark:!text-zinc-950 bg-zinc-900 hover:bg-zinc-700 dark:bg-zinc-100 hover:dark:bg-zinc-300 rounded-full px-3.5 py-1.5 not-prose">
        {children}
      </a>;
};

## About MCP servers

The Model Context Protocol (MCP) is an open protocol that creates standardized connections between AI applications and external services, like documentation. Mintlify generates an MCP server from your documentation and OpenAPI specifications, preparing your content for the broader AI ecosystem where any MCP client (like Claude, Cursor, Goose, and others) can connect to your documentation and APIs.

Your MCP server exposes tools for AI applications to search your documentation and interact with your APIs.

## Accessing your MCP server

<Note>
  MCP servers can only be generated for public documentation. Documentation behind end-user authentication cannot be accessed for server generation.
</Note>

Your MCP server is automatically generated and hosted at your documentation URL with the `/mcp` path. For example, Mintlify's MCP server is available at `https://mintlify.com/docs/mcp`.

You can see and copy your MCP server URL in your [dashboard](https://dashboard.mintlify.com/products/mcp).

## Configuring your MCP server

All MCP servers include the `search` tool by default, allowing users to query information from your docs in other tools.

If you have a [Pro or Enterprise plan](https://mintlify.com/pricing?ref=mcp), you can expose endpoints from your OpenAPI specification as MCP tools.

To expose endpoints as MCP tools, use the `mcp` object within the `x-mint` extension at either the file or endpoint level. For example, the Mintlify MCP server includes tools to create assistant chats, get status updates, and trigger updates.

MCP servers follow a security-first approach where API endpoints are not exposed by default. You must explicitly enable endpoints to make them available as MCP tools. Only expose endpoints that are safe for public access through AI tools.

<ResponseField name="mcp" type="object">
  The MCP configuration for the endpoint.

  <Expandable title="MCP">
    <ResponseField name="enabled" type="boolean">
      Whether to expose the endpoint as an MCP tool. Takes precedence over the file-level configuration.
    </ResponseField>

    <ResponseField name="name" type="string">
      The name of the MCP tool.
    </ResponseField>

    <ResponseField name="description" type="string">
      The description of the MCP tool.
    </ResponseField>
  </Expandable>
</ResponseField>

### File-level configuration

Enable MCP for all endpoints by default in an OpenAPI specification file and selectively exclude endpoints:

```json
{
  "openapi": "3.1.0",
  "x-mint": {
    "mcp": {
      "enabled": true
    }
  },
  // ...
  "paths": {
    "/api/v1/users": {
      "get": {
        "x-mint": {
          "mcp": {
            "enabled": false // Disables MCP for this endpoint
          }
        },
        // ...
      }
    }
  }
}
```

### Endpoint-level configuration

Enable MCP for specific endpoints:

```json
{
  "paths": {
    "/api/v1/users": {
      "get": {
        "x-mint": {
          "mcp": {
            "enabled": true,
            "name": "get-users",
            "description": "Get a list of users"
          },
          // ...
        }
      }
    },
    "/api/v1/delete": {
      "delete": {
        // No `x-mint: mcp` so this endpoint is not exposed as an MCP tool
        // ...
      }
    }
  }
}
```

## Using your MCP server

Your users must connect your MCP server to their preferred AI tools.

1. Make your MCP server URL publicly available.
2. Users copy your MCP server URL and add it to their tools.
3. Users access your documentation and API endpoints through their tools.

These are some of the ways you can help your users connect to your MCP server:

<Tabs>
  <Tab title="Contextual menu">
    Add options in the [contextual menu](/ai/contextual-menu) for your users to connect to your MCP server from any page of your documentation.

    | Option                  | Identifier | Description                                         |
    | :---------------------- | :--------- | :-------------------------------------------------- |
    | **Copy MCP server URL** | `mcp`      | Copies your MCP server URL to the user's clipboard. |
    | **Connect to Cursor**   | `cursor`   | Installs your MCP server in Cursor.                 |
    | **Connect to VS Code**  | `vscode`   | Installs your MCP server in VS Code.                |
  </Tab>

  <Tab title="Claude">
    <Steps>
      <Step title="Get your MCP server URL.">
        Navigate to your [dashboard](https://dashboard.mintlify.com/products/mcp) and find your MCP server URL.
      </Step>

      <Step title="Publish your MCP server URL for your users.">
        Create a guide for your users that includes your MCP server URL and the steps to connect it to Claude.

        1. Navigate to the [Connectors](https://claude.ai/settings/connectors) page in the Claude settings.
        2. Select **Add custom connector**.
        3. Add your MCP server name and URL.
        4. Select **Add**.
        5. When using Claude, select the attachments button (the plus icon).
        6. Select your MCP server.
      </Step>
    </Steps>

    See the [Model Context Protocol documentation](https://modelcontextprotocol.io/docs/tutorials/use-remote-mcp-server#connecting-to-a-remote-mcp-server) for more details.
  </Tab>

  <Tab title="Claude Code">
    <Steps>
      <Step title="Get your MCP server URL.">
        Navigate to your [dashboard](https://dashboard.mintlify.com/products/mcp) and find your MCP server URL.
      </Step>

      <Step title="Publish your MCP server URL for your users.">
        Create a guide for your users that includes your MCP server URL and the command to connect it to Claude Code.

        ```bash
        claude mcp add --transport http <name> <url>
        ```
      </Step>
    </Steps>

    See the [Claude Code documentation](https://docs.anthropic.com/en/docs/claude-code/mcp#installing-mcp-servers) for more details.
  </Tab>

  <Tab title="Cursor">
    <Steps>
      <Step title="Get your MCP server URL.">
        Navigate to your [dashboard](https://dashboard.mintlify.com/products/mcp) and find your MCP server URL.
      </Step>

      <Step title="Publish your MCP server URL for your users.">
        Create a guide for your users that includes your MCP server URL and the steps to connect it to Cursor.

        1. Use <kbd>Command</kbd> + <kbd>Shift</kbd> + <kbd>P</kbd> (<kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>P</kbd> on Windows) to open the command palette.
        2. Search for "Open MCP settings".
        3. Select **Add custom MCP**. This will open the `mcp.json` file.
        4. In `mcp.json`, configure your server:

        ```json
        {
          "mcpServers": {
            "<your-mcp-server-name>": {
              "url": "<your-mcp-server-url>"
            }
          }
        }
        ```
      </Step>
    </Steps>

    See the [Cursor documentation](https://docs.cursor.com/en/context/mcp#installing-mcp-servers) for more details.
  </Tab>

  <Tab title="VS Code">
    <Steps>
      <Step title="Get your MCP server URL.">
        Navigate to your [dashboard](https://dashboard.mintlify.com/products/mcp) and find your MCP server URL.
      </Step>

      <Step title="Publish your MCP server URL for your users.">
        Create a guide for your users that includes your MCP server URL and the steps to connect it to VS Code.

        1. Create a `.vscode/mcp.json` file.
        2. In `mcp.json`, configure your server:

        ```json
        {
          "servers": {
            "<your-mcp-server-name>": {
              "type": "http",
              "url": "<your-mcp-server-url>"
            }
          }
        }
        ```
      </Step>
    </Steps>

    See the [VS Code documentation](https://code.visualstudio.com/docs/copilot/chat/mcp-servers) for more details.
  </Tab>
</Tabs>

### Example: Connecting to the Mintlify MCP server

Connect to the Mintlify MCP server to interact with the Mintlify API and search our documentation. This will give you more accurate answers about how to use Mintlify in your local environment and demonstrates how you can help your users connect to your MCP server.

<Tabs>
  <Tab title="Contextual menu">
    At the top of this page, select the contextual menu and choose **Connect to Cursor** or **Connect to VS Code** to connect the Mintlify MCP server to the IDE of your choice.
  </Tab>

  <Tab title="Claude">
    To use the Mintlify MCP server with Claude:

    <Steps>
      <Step title="Add the Mintlify MCP server to Claude">
        1. Navigate to the [Connectors](https://claude.ai/settings/connectors) page in the Claude settings.
        2. Select **Add custom connector**.
        3. Add the Mintlify MCP server:

        * Name: `Mintlify`
        * URL: `https://mintlify.com/docs/mcp`

        4. Select **Add**.
      </Step>

      <Step title="Access the MCP server in your chat">
        1. When using Claude, select the attachments button (the plus icon).
        2. Select the Mintlify MCP server.
        3. Ask Claude a question about Mintlify.
      </Step>
    </Steps>

    See the [Model Context Protocol documentation](https://modelcontextprotocol.io/docs/tutorials/use-remote-mcp-server#connecting-to-a-remote-mcp-server) for more details.
  </Tab>

  <Tab title="Claude Code">
    To use the Mintlify MCP server with Claude Code, run the following command:

    ```bash
    claude mcp add --transport http Mintlify https://mintlify.com/docs/mcp
    ```

    Test the connection by running:

    ```bash
    claude mcp list
    ```

    See the [Claude Code documentation](https://docs.anthropic.com/en/docs/claude-code/mcp#installing-mcp-servers) for more details.
  </Tab>

  <Tab title="Cursor">
    <PreviewButton href="cursor://anysphere.cursor-deeplink/mcp/install?name=mintlify&config=eyJ1cmwiOiJodHRwczovL21pbnRsaWZ5LmNvbS9kb2NzL21jcCJ9">Install in Cursor</PreviewButton>

    To connect the Mintlify MCP server to Cursor, click the **Install in Cursor** button. Or to manually connect the MCP server, follow these steps:

    <Steps>
      <Step title="Open MCP settings">
        1. Use <kbd>Command</kbd> + <kbd>Shift</kbd> + <kbd>P</kbd> (<kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>P</kbd> on Windows) to open the command palette.
        2. Search for "Open MCP settings".
        3. Select **Add custom MCP**. This will open the `mcp.json` file.
      </Step>

      <Step title="Configure the Mintlify MCP server">
        In `mcp.json`, add:

        ```json
        {
          "mcpServers": {
            "Mintlify": {
              "url": "https://mintlify.com/docs/mcp"
            }
          }
        }
        ```
      </Step>

      <Step title="Test the connection">
        In Cursor's chat, ask "What tools do you have available?" Cursor should show the Mintlify MCP server as an available tool.
      </Step>
    </Steps>

    See [Installing MCP servers](https://docs.cursor.com/en/context/mcp#installing-mcp-servers) in the Cursor documentation for more details.
  </Tab>

  <Tab title="VS Code">
    <PreviewButton href="https://vscode.dev/redirect/mcp/install?name=mintlify&config=%7B%22type%22%3A%22http%22%2C%22url%22%3A%22https%3A%2F%2Fmintlify.com%2Fdocs%2Fmcp%22%7D">Install in VS Code</PreviewButton>

    To connect the Mintlify MCP server to VS Code, click the **Install in VS Code** button. Or to manually connect the MCP server, create a `.vscode/mcp.json` file and add:

    ```json
    {
      "servers": {
        "Mintlify": {
          "type": "http",
          "url": "https://mintlify.com/docs/mcp"
        }
      }
    }
    ```

    See the [VS Code documentation](https://code.visualstudio.com/docs/copilot/chat/mcp-servers) for more details.
  </Tab>
</Tabs>

## Authentication

When you enable an API endpoint for MCP, the server includes the authentication requirements defined in your OpenAPI `securitySchemes` and `securityRequirement`. Any keys are handled directly by the tool and not stored or processed by Mintlify.

If a user asks their AI tool to call a protected endpoint, the tool will request the necessary authentication credentials from the user at that moment.

## Monitoring your MCP server

You can view all available MCP tools in the **Available tools** section of the [MCP Server page](https://dashboard.mintlify.com/products/mcp) in your dashboard.

<Frame>
  <img src="https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/mcp/mcp-server-page-light.png?maxW=3024&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=ee90d37ca220882f536a48c6258e8a59" alt="MCP dashboard with Available tools section emphasized" class="block dark:hidden" width="3024" height="1548" data-path="images/mcp/mcp-server-page-light.png" srcset="https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/mcp/mcp-server-page-light.png?w=280&maxW=3024&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=92e31f7bbb2b80e68c3634705a0bc509 280w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/mcp/mcp-server-page-light.png?w=560&maxW=3024&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=1a3a63bcd5ed069567a169c9f7eb9cdc 560w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/mcp/mcp-server-page-light.png?w=840&maxW=3024&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=b5699cdab530966833f5c297ebe4561d 840w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/mcp/mcp-server-page-light.png?w=1100&maxW=3024&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=7f4b61bac15c4deac975b1b281ee2b15 1100w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/mcp/mcp-server-page-light.png?w=1650&maxW=3024&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=eb7358ff925fae166d165e1218dadcbb 1650w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/mcp/mcp-server-page-light.png?w=2500&maxW=3024&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=ba15e8d20a05d85e9ed95a83500cdc68 2500w" data-optimize="true" data-opv="2" />

  <img src="https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/mcp/mcp-server-page-dark.png?maxW=3018&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=a914141a0e6d78d29ecb058f2f8d0df3" alt="MCP dashboard with Available tools section emphasized" class="hidden dark:block" width="3018" height="1540" data-path="images/mcp/mcp-server-page-dark.png" srcset="https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/mcp/mcp-server-page-dark.png?w=280&maxW=3018&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=13005374989e6c76cf0785ba5b0457fa 280w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/mcp/mcp-server-page-dark.png?w=560&maxW=3018&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=b5503c3c2918c037d71575cada410116 560w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/mcp/mcp-server-page-dark.png?w=840&maxW=3018&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=629b792c08b2b03f39489930b0f19f1b 840w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/mcp/mcp-server-page-dark.png?w=1100&maxW=3018&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=0d53277539519e5e22652e7af5103c9f 1100w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/mcp/mcp-server-page-dark.png?w=1650&maxW=3018&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=c7b7b1d19f1c39a58142e49b519b1d0d 1650w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/mcp/mcp-server-page-dark.png?w=2500&maxW=3018&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=558c43ac4744f8bcfedbc9cd45398b20 2500w" data-optimize="true" data-opv="2" />
</Frame>

## Troubleshooting

<AccordionGroup>
  <Accordion title="MCP server only shows search tool">
    If your MCP server only exposes the search tool despite having an OpenAPI specification:

    1. Verify your OpenAPI specification is valid and accessible.
    2. Ensure you've explicitly enabled MCP for specific endpoints using `x-mint.mcp.enabled: true`.
    3. Check your deployment logs for OpenAPI processing errors.

    If OpenAPI processing fails, the server continues with just the search tool to maintain functionality.
  </Accordion>

  <Accordion title="Authentication issues">
    If users report authentication problems:

    1. Check that your OpenAPI specification includes proper `securitySchemes` definitions.
    2. Confirm that enabled endpoints work with the specified authentication methods.
  </Accordion>

  <Accordion title="Tool descriptions missing or unclear">
    If AI tools aren't using your API endpoints effectively:

    1. Add detailed `summary` and `description` fields to your endpoints.
    2. Ensure parameter names and descriptions are self-explanatory.
    3. Use the MCP dashboard to verify how your endpoints appear as tools.
  </Accordion>
</AccordionGroup>


# Slack app
Source: https://mintlify.com/docs/ai/slack-app

Add a bot that searches your docs to answer questions in your Slack workspace

<Info>
  The Slack app is available for [Pro and Enterprise plans](https://mintlify.com/pricing?ref=slack-app).
</Info>

The Slack app adds a bot named `@mintlify` to your Slack workspace that can search your documentation and answer users' questions. The bot responds to direct messages, @mentions, and to any questions in a channel specifically named `#ask-ai`.

The Slack app can incur costs: either using your AI assistant credits or incurring overages.

## Setting up the Slack app

<Note>
  If your Slack Workspace Owner requires admin approval to install apps, ask them to approve the Mintlify Slack app before you add it.
</Note>

1. Navigate to the [Add-ons](https://dashboard.mintlify.com/products/addons) page of your dashboard.
2. Select **Connect** in the Slack Integration card.
3. Follow the Slack prompts to add the app to your workspace.
4. Test that the bot is working and responds when you:

* Send a direct message to the Mintlify app.
* Mention the bot with `@mintlify` in a channel.
* Create an `#ask-ai` channel, add the bot, and ask a question.


# Playground
Source: https://mintlify.com/docs/api-playground/asyncapi/playground

Enable users to interact with your websockets



# AsyncAPI setup
Source: https://mintlify.com/docs/api-playground/asyncapi/setup

Create websocket reference pages with AsyncAPI

## Add an AsyncAPI specification file

To begin to create pages for your websockets, make sure you have a valid AsyncAPI schema document in either JSON or YAML format that follows the [AsyncAPI specification](https://www.asyncapi.com/docs/reference/specification/v3.0.0). Your schema must follow the AsyncAPI specification 3.0+.

<Tip>
  To make sure your AsyncAPI schema is valid, you can paste it into the
  [AsyncAPI Studio](https://studio.asyncapi.com/)
</Tip>

## Auto-populate websockets pages

You can add an `asyncapi` field to any tab or group in the navigation of your `docs.json`. This field can contain either the path to an AsyncAPI schema document in your docs repo, the URL of a hosted AsyncAPI schema document, or an array of links to AsyncAPI schema documents. Mintlify will automatically generate a page for each AsyncAPI websocket channel.

**Examples with Tabs:**

<CodeGroup>
  ```json Local File {5}
  "navigation": {
    "tabs": [
      {
          "tab": "API Reference",
          "asyncapi": "/path/to/asyncapi.json"
      }
    ]
  }

  ```

  ```json Remote URL {5}
  "navigation": {
    "tabs": [
      {
          "tab": "API Reference",
          "asyncapi": "https://github.com/asyncapi/spec/blob/master/examples/simple-asyncapi.yml"
      }
    ]
  }
  ```
</CodeGroup>

**Examples with Groups:**

```json {8-11}
"navigation": {
  "tabs": [
    {
      "tab": "AsyncAPI",
      "groups": [
        {
          "group": "Websockets",
          "asyncapi": {
            "source": "/path/to/asyncapi.json",
            "directory": "api-reference"
          }
        }
      ]
    }
  ]
}
```

<Note>
  The directory field is optional. If not specified, the files will be placed in
  the **api-reference** folder of the docs repo.
</Note>

## Channel page

If you want more control over how you order your channels or if you want to just reference a single channel, you can create an MDX file with the `asyncapi` field in the frontmatter.

```mdx
---
title: "Websocket Channel"
asyncapi: "/path/to/asyncapi.json channelName"
---
```


# Adding SDK examples
Source: https://mintlify.com/docs/api-playground/customization/adding-sdk-examples

Display language-specific code samples alongside your API endpoints to show developers how to use your SDKs

If your users interact with your API using an SDK rather than directly through a network request, you can use the `x-codeSamples` extension to add code samples to your OpenAPI document and display them in your OpenAPI pages.

This property can be added to any request method and has the following schema.

<ParamField body="lang" type="string" required>
  The language of the code sample.
</ParamField>

<ParamField body="label" type="string">
  The label for the sample. This is useful when providing multiple examples for a single endpoint.
</ParamField>

<ParamField body="source" type="string" required>
  The source code of the sample.
</ParamField>

Here is an example of code samples for a plant tracking app, which has both a Bash CLI tool and a JavaScript SDK.

```yaml
paths:
  /plants:
    get:
      # ...
      x-codeSamples:
        - lang: bash
          label: List all unwatered plants
          source: |
            planter list -u
        - lang: javascript
          label: List all unwatered plants
          source: |
            const planter = require('planter');
            planter.list({ unwatered: true });
        - lang: bash
          label: List all potted plants
          source: |
            planter list -p
        - lang: javascript
          label: List all potted plants
          source: |
            const planter = require('planter');
            planter.list({ potted: true });
```


# Complex data types
Source: https://mintlify.com/docs/api-playground/customization/complex-data-types

Describe APIs with flexible schemas, optional properties, and multiple data formats using `oneOf`, `anyOf`, and `allOf` keywords

When your API accepts multiple data formats, has conditional fields, or uses inheritance patterns, OpenAPI's schema composition keywords help you document these flexible structures. Using `oneOf`, `anyOf`, and `allOf`, you can describe APIs that handle different input types or combine multiple schemas into comprehensive data models.

## `oneOf`, `anyOf`, `allOf` keywords

For complex data types, OpenAPI provides keywords for combining schemas:

* `allOf`: Combines multiple schemas (like merging objects or extending a base schema). Functions like an `and` operator.
* `anyOf`: Accepts data matching any of the provided schemas. Functions like an `or` operator.
* `oneOf`: Accepts data matching exactly one of the provided schemas. Functions like an `exclusive-or` operator.

<Warning>Mintlify treats `oneOf` and `anyOf` identically since the practical difference rarely affects using the API.</Warning>

For detailed specifications of these keywords see the [OpenAPI documentation](https://swagger.io/docs/specification/data-models/oneof-anyof-allof-not/).

<Info>The `not` keyword is currently unsupported.</Info>

### Combining schemas with `allOf`

When you use `allOf`, Mintlify performs some preprocessing on your OpenAPI document to display complex combinations in a readable way. For example, when you combine two object schemas with `allOf`, Mintlify combines the properties of both into a single object. This becomes especially useful when leveraging OpenAPI's reusable [components](https://swagger.io/docs/specification/components/).

```yaml
org_with_users:
  allOf:
    - $ref: '#/components/schemas/Org'
    - type: object
      properties:
        users:
          type: array
          description: An array containing all users in the organization
# ...
components:
  schemas:
    Org:
      type: object
      properties:
        id:
          type: string
          description: The ID of the organization
```

<ParamField body="org_with_users" type="object">
  <Expandable>
    <ParamField body="id" type="string">
      The ID of the organization
    </ParamField>

    <ParamField body="users" type="object[]">
      An array containing all users in the organization
    </ParamField>
  </Expandable>
</ParamField>

### Providing options with `oneOf` and `anyOf`

When you use `oneOf` or `anyOf`, the options are displayed in a tabbed container. Specify a `title` field in each subschema to give your options names. For example, here's how you might display two different types of delivery addresses:

```yaml
delivery_address:
  oneOf:
    - title: StreetAddress
      type: object
      properties:
        address_line_1:
          type: string
          description: The street address of the recipient
        # ...
    - title: POBox
      type: object
      properties:
        box_number:
          type: string
          description: The number of the PO Box
        # ...
```

<ParamField body="delivery_address" type="object">
  <div className="mt-4 rounded-xl border border-gray-100 px-4 pb-4 pt-2 dark:border-white/10">
    <Tabs>
      <Tab title="StreetAddress">
        <ParamField body="address_line_1" type="string">
          The street address of the residence
        </ParamField>
      </Tab>

      <Tab title="POBox">
        <ParamField body="box_number" type="string">
          The number of the PO Box
        </ParamField>
      </Tab>
    </Tabs>
  </div>
</ParamField>


# Managing page visibility
Source: https://mintlify.com/docs/api-playground/customization/managing-page-visibility

Control which endpoints from your OpenAPI specification appear in your documentation navigation

You can control which OpenAPI operations get published as documentation pages and their visibility in navigation. This is useful for internal-only endpoints, deprecated operations, beta features, or endpoints that should be accessible via direct URL but not discoverable through site navigation.

If your pages are autogenerated from an OpenAPI document, you can manage page visibility with the `x-hidden` and `x-excluded` extensions.

## `x-hidden`

The `x-hidden` extension creates a page for an endpoint, but hides it from navigation. The page is only accessible by navigating directly to its URL.

Common use cases for `x-hidden` are:

* Endpoints you want to document, but not promote.
* Pages that you will link to from other content.
* Endpoints for specific users.

## `x-excluded`

The `x-excluded` extension completely excludes an endpoint from your documentation.

Common use cases for `x-excluded` are:

* Internal-only endpoints.
* Deprecated endpoints that you don't want to document.
* Beta features that are not ready for public documentation.

## Implementation

Add the `x-hidden` or `x-excluded` extension under the HTTP method in your OpenAPI specification.

Here are examples of how to use each property in an OpenAPI schema document for an endpoint and a webhook path.

```json {11, 19}
"paths": {
  "/plants": {
    "get": {
      "description": "Returns all plants from the store",
      "parameters": { /*...*/ },
      "responses": { /*...*/ }
    }
  },
  "/hidden_plants": {
    "get": {
      "x-hidden": true,
      "description": "Returns all somewhat secret plants from the store",
      "parameters": { /*...*/ },
      "responses": { /*...*/ }
    }
  },
  "/secret_plants": {
    "get": {
      "x-excluded": true,
      "description": "Returns all top secret plants from the store (do not publish this endpoint!)",
      "parameters": { /*...*/ },
      "responses": { /*...*/ }
    }
  }
},
```

```json {9, 15}
"webhooks": {
  "/plants_hook": {
    "post": {
      "description": "Webhook for information about a new plant added to the store",
    }
  },
  "/hidden_plants_hook": {
    "post": {
      "x-hidden": true,
      "description": "Webhook for somewhat secret information about a new plant added to the store"
    }
  },
  "/secret_plants_hook": {
    "post": {
      "x-excluded": true,
      "description": "Webhook for top secret information about a new plant added to the store (do not publish this endpoint!)"
    }
  }
}
```


# Multiple responses
Source: https://mintlify.com/docs/api-playground/customization/multiple-responses

Show response variations for the same endpoint

If your API returns different responses based on input parameters, user context, or other conditions of the request, you can document multiple response examples with the `examples` property.

This property can be added to any response and has the following schema.

```yaml
responses:
  "200":
    description: Successful response
    content:
      application/json:
        schema:
          $ref: "#/components/schemas/YourResponseSchema"
        examples:
          us:
            summary: Response for United States
            value:
              countryCode: "US"
              currencyCode: "USD"
              taxRate: 0.0825
          gb:
            summary: Response for United Kingdom
            value:
              countryCode: "GB"
              currencyCode: "GBP"
              taxRate: 0.20
```


# Authentication
Source: https://mintlify.com/docs/api-playground/mdx/authentication

You can set authentication parameters to let users use their real API keys.

## Enabling authentication

You can add an authentication method to your `docs.json` to enable it globally on every page or you can set it on a per-page basis.

A page's authentication method will override a global method if both are set.

### Bearer token

<CodeGroup>
  ```json docs.json
  "api": {
      "mdx": {
        "auth": {
          "method": "bearer"
        }
      }
  }
  ```

  ```mdx Page Metadata
  ---
  title: "Your page title"
  authMethod: "bearer"
  ---
  ```
</CodeGroup>

### Basic authentication

<CodeGroup>
  ```json docs.json
  "api": {
      "mdx": {
        "auth": {
          "method": "basic"
        }
      }
  }
  ```

  ```mdx Page Metadata
  ---
  title: "Your page title"
  authMethod: "basic"
  ---
  ```
</CodeGroup>

### API key

<CodeGroup>
  ```json docs.json
  "api": {
      "mdx": {
        "auth": {
          "method": "key",
          "name": "x-api-key"
        }
      }
  }
  ```

  ```mdx Page Metadata
  ---
  title: "Your page title"
  authMethod: "key"
  ---
  ```
</CodeGroup>

### None

The "none" authentication method is useful to disable authentication on a specific endpoint after setting a default in docs.json.

<CodeGroup>
  ```mdx Page Metadata
  ---
  title: "Your page title"
  authMethod: "none"
  ---
  ```
</CodeGroup>


# MDX setup
Source: https://mintlify.com/docs/api-playground/mdx/configuration

Generate docs pages for your API endpoints using `MDX`

You can manually define API endpoints in individual `MDX` files rather than using an OpenAPI specification. This method provides flexibility for custom content, but we recommend generating API documentation from an OpenAPI specification file for most projects because it is more maintainable and feature-rich. However, creating `MDX` pages for an API can be useful to document small APIs or for prototyping.

To generate pages for API endpoints using `MDX`, configure your API settings in `docs.json`, create individual `MDX` files for each endpoint, and use components like `<ParamFields />` to define parameters. From these definitions, Mintlify generates interactive API playgrounds, request examples, and response examples.

<Steps>
  <Step title="Configure your API">
    In your `docs.json` file, define your base URL and auth method:

    ```json
     "api": {
      "mdx": {
        "server": "https://mintlify.com/api", // string array for multiple base URLs
        "auth": {
          "method": "key",
          "name": "x-api-key" // options: bearer, basic, key.
        }
      }
    }
    ```

    If you want to hide the API playground, use the `display` field. You do not need to include an auth method if you hide the playground.

    ```json
    "api": {
      "playground": {
        "display": "none"
      }
    }
    ```

    Find a full list of API configurations in [Settings](/settings#api-configurations).
  </Step>

  <Step title="Create your endpoint pages">
    Each API endpoint page should have a corresponding `MDX` file. At the top of each file, define `title` and `api`:

    ```mdx
    ---
    title: 'Create new user'
    api: 'POST https://api.mintlify.com/user'
    ---
    ```

    You can specify path parameters by adding the parameter name to the path, wrapped with `{}`:

    ```bash
    https://api.example.com/v1/endpoint/{userId}
    ```

    <Note>
      If you have a `server` field configured in `docs.json`, you can use relative paths like `/v1/endpoint`.
    </Note>

    You can override the globally-defined display mode for the API playground for a page by adding `playground` to the frontmatter:

    ```mdx
    ---
    title: 'Create new user'
    api: 'POST https://api.mintlify.com/user'
    playground: 'none'
    ---
    ```

    * `playground: 'interactive'` - Display the interactive playground.
    * `playground: 'simple'` - Display a copyable endpoint with no playground.
    * `playground: 'none'` - Hide the playground.
  </Step>

  <Step title="Add your endpoints to your docs">
    Add your endpoint pages to the sidebar by adding the paths to the `navigation` field in your `docs.json`. Learn more about structuring your docs in [Navigation](/navigation).
  </Step>
</Steps>

## Enabling authentication

You can add an authentication method to your `docs.json` to enable it globally on every page or you can set it on a per-page basis.

A page's authentication method will override a global method if both are set.

### Bearer token

<CodeGroup>
  ```json docs.json
  "api": {
      "mdx": {
        "auth": {
          "method": "bearer"
        }
      }
  }
  ```

  ```mdx Page Metadata
  ---
  title: "Your page title"
  authMethod: "bearer"
  ---
  ```
</CodeGroup>

### Basic authentication

<CodeGroup>
  ```json docs.json
  "api": {
      "mdx": {
        "auth": {
          "method": "basic"
        }
      }
  }
  ```

  ```mdx Page Metadata
  ---
  title: "Your page title"
  authMethod: "basic"
  ---
  ```
</CodeGroup>

### API key

<CodeGroup>
  ```json docs.json
  "api": {
      "mdx": {
        "auth": {
          "method": "key",
          "name": "x-api-key"
        }
      }
  }
  ```

  ```mdx Page Metadata
  ---
  title: "Your page title"
  authMethod: "key"
  ---
  ```
</CodeGroup>

### None

The `none` authentication method is useful to disable authentication on a specific endpoint after setting a default in docs.json.

<CodeGroup>
  ```mdx Page Metadata
  ---
  title: "Your page title"
  authMethod: "none"
  ---
  ```
</CodeGroup>


# Migrating MDX API pages to OpenAPI navigation
Source: https://mintlify.com/docs/api-playground/migrating-from-mdx

Update from individual MDX endpoint pages to automated OpenAPI generation with flexible navigation

If you are currently using individual `MDX` pages for your API endpoints, you can migrate to autogenerating pages from your OpenAPI specification while retaining the customizability of individual pages. This can help you reduce the number of files you need to maintain and improve the consistency of your API documentation.

You can define metadata and content for each endpoint in your OpenAPI specification and organize endpoints where you want them in your navigation.

## CLI migration

The `mint migrate-mdx` command is the recommended way to migrate from MDX endpoint pages to autogenerated pages.

This command:

* Parses your `docs.json` navigation structure.
* Identifies MDX pages that generate OpenAPI endpoint pages.
* Extracts content from MDX files and moves it to the `x-mint` extension in your OpenAPI specification.
* Updates your `docs.json` to reference the OpenAPI endpoints directly instead of MDX files.
* Deletes the original MDX endpoint files.

<Info>
  If you already have `x-mint` defined for an endpoint and also have an MDX page with content for that endpoint, the MDX content will overwrite existing `x-mint` settings.

  If you have multiple MDX pages for the same endpoint with different content, the script will use the content from the page that appears last in your `docs.json`.

  The migration tool does not support previewing changes before applying them.
</Info>

<Steps>
  <Step title="Prepare your OpenAPI specification.">
    Ensure your OpenAPI specification is valid and includes all endpoints you want to document.

    Any MDX pages you want to migrate must have the `openapi:` frontmatter referencing an endpoint.

    <Tip>
      Validate your OpenAPI file using the [Swagger Editor](https://editor.swagger.io/) or [Mint CLI](https://www.npmjs.com/package/mint).
    </Tip>
  </Step>

  <Step title="Install the Mint CLI">
    If needed, install or update the [Mint CLI](/installation).
  </Step>

  <Step title="Run the migration command.">
    ```bash
    mint migrate-mdx
    ```
  </Step>
</Steps>

## Manual migration steps

<Steps>
  <Step title="Prepare your OpenAPI specification.">
    Ensure your OpenAPI specification is valid and includes all endpoints you want to document.

    For any endpoints that you want to customize the metadata or content, add the `x-mint` extension to the endpoint. See [x-mint extension](/api-playground/openapi-setup#x-mint-extension) for more details.

    For any endpoints that you want to exclude from your documentation, add the `x-hidden` extension to the endpoint.

    <Info>
      Validate your OpenAPI file using the [Swagger Editor](https://editor.swagger.io/) or [Mint CLI](https://www.npmjs.com/package/mint).
    </Info>
  </Step>

  <Step title="Update your navigation structure.">
    Replace `MDX` page references with OpenAPI endpoints in your `docs.json`.

    ```json
    "navigation": {
      "groups": [
        {
          "group": "API Reference",
          "openapi": "/path/to/openapi.json",
          "pages": [
            "overview",
            "authentication",
            "introduction",
            "GET /health",
            "quickstart", 
            "POST /users",
            "GET /users/{id}",
            "advanced-features"
          ]
        }
      ]
    }
    ```
  </Step>

  <Step title="Remove old MDX files.">
    After verifying your new navigation works correctly, remove the `MDX` endpoint files that you no longer need.
  </Step>
</Steps>

## Navigation patterns

You can customize how your API documentation appears in your navigation.

### Mixed content navigation

Combine automatically generated API pages with other pages:

```json
"navigation": {
  "groups": [
    {
      "group": "API Reference",
      "openapi": "openapi.json",
      "pages": [
        "api/overview",
        "GET /users",
        "POST /users", 
        "api/authentication"
      ]
    }
  ]
}
```

### Multiple API versions

Organize different API versions using tabs or groups:

```json
"navigation": {
  "tabs": [
    {
      "tab": "API v1",
      "openapi": "specs/v1.json"
    },
    {
      "tab": "API v2", 
      "openapi": "specs/v2.json"
    }
  ]
}
```

## When to use individual `MDX` pages

Consider keeping individual `MDX` pages when you need:

* Extensive custom content per endpoint like React components or lengthy examples.
* Unique page layouts.
* Experimental documentation approaches for specific endpoints.

For most use cases, OpenAPI navigation provides better maintainability and consistency.


# OpenAPI setup
Source: https://mintlify.com/docs/api-playground/openapi-setup

Reference OpenAPI endpoints in your docs pages

OpenAPI is a specification for describing APIs. Mintlify supports OpenAPI 3.0+ documents to generate interactive API documentation and keep it up to date.

## Add an OpenAPI specification file

To document your endpoints with OpenAPI, you need a valid OpenAPI document in either JSON or YAML format that follows the [OpenAPI specification 3.0+](https://swagger.io/specification/).

You can create API pages from a single or multiple OpenAPI documents.

### Describing your API

We recommend the following resources to learn about and construct your OpenAPI documents.

* [Swagger's OpenAPI Guide](https://swagger.io/docs/specification/v3_0/basic-structure/) to learn the OpenAPI syntax.
* [The OpenAPI specification Markdown sources](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/) to reference details of the latest OpenAPI specification.
* [Swagger Editor](https://editor.swagger.io/) to edit, validate, and debug your OpenAPI document.
* [The Mint CLI](https://www.npmjs.com/package/mint) to validate your OpenAPI document with the command: `mint openapi-check <openapiFilenameOrUrl>`.

<Note>
  Swagger's OpenAPI Guide is for OpenAPI v3.0, but nearly all of the information
  is applicable to v3.1. For more information on the differences between v3.0
  and v3.1, see [Migrating from OpenAPI 3.0 to
  3.1.0](https://www.openapis.org/blog/2021/02/16/migrating-from-openapi-3-0-to-3-1-0)
  in the OpenAPI blog.
</Note>

### Specifying the URL for your API

To enable Mintlify features like the API playground, add a `servers` field to your OpenAPI document with your API's base URL.

```json
{
  "servers": [
    {
      "url": "https://api.example.com/v1"
    }
  ]
}
```

In an OpenAPI document, different API endpoints are specified by their paths, like `/users/{id}` or simply `/`. The base URL defines where these paths should be appended. For more information on how to configure the `servers` field, see [API Server and Base Path](https://swagger.io/docs/specification/api-host-and-base-path/) in the OpenAPI documentation.

The API playground uses these server URLs to determine where to send requests. If you specify multiple servers, a dropdown will allow users to toggle between servers. If you do not specify a server, the API playground will use simple mode since it cannot send requests without a base URL.

If your API has endpoints that exist at different URLs, you can [override the server field](https://swagger.io/docs/specification/v3_0/api-host-and-base-path/#overriding-servers) for a given path or operation.

### Specifying authentication

To enable authentication in your API documentation and playground, configure the `securitySchemes` and `security` fields in your OpenAPI document. The API descriptions and API Playground will add authentication fields based on the security configurations in your OpenAPI document.

<Steps>
  <Step title="Define your authentication method.">
    Add a `securitySchemes` field to define how users authenticate.

    This example shows a configuration for bearer authentication.

    ```json
    {
      "components": {
        "securitySchemes": {
          "bearerAuth": {
            "type": "http",
            "scheme": "bearer"
          }
        }
      }
    }
    ```
  </Step>

  <Step title="Apply authentication to your endpoints.">
    Add a `security` field to require authentication.

    ```json
    {
      "security": [
        {
          "bearerAuth": []
        }
      ]
    }
    ```
  </Step>
</Steps>

Common authentication types include:

* [API Keys](https://swagger.io/docs/specification/authentication/api-keys/): For header, query, or cookie-based keys.
* [Bearer](https://swagger.io/docs/specification/authentication/bearer-authentication/): For JWT or OAuth tokens.
* [Basic](https://swagger.io/docs/specification/authentication/basic-authentication/): For username and password.

If different endpoints within your API require different methods of authentication, you can [override the security field](https://swagger.io/docs/specification/authentication/#:~:text=you%20can%20apply%20them%20to%20the%20whole%20API%20or%20individual%20operations%20by%20adding%20the%20security%20section%20on%20the%20root%20level%20or%20operation%20level%2C%20respectively.) for a given operation.

For more information on defining and applying authentication, see [Authentication](https://swagger.io/docs/specification/authentication/) in the OpenAPI documentation.

## `x-mint` extension

The `x-mint` extension is a custom OpenAPI extension that provides additional control over how your API documentation is generated and displayed.

### Metadata

Override the default metadata for generated API pages by adding `x-mint: metadata` to any operation. You can use any metadata field that would be valid in `MDX` frontmatter except for `openapi`:

```json {7-13}
{
  "paths": {
    "/users": {
      "get": {
        "summary": "Get users",
        "description": "Retrieve a list of users",
        "x-mint": {
          "metadata": {
            "title": "List all users",
            "description": "Fetch paginated user data with filtering options",
            "og:title": "Display a list of users"
          }
        },
        "parameters": [
          {
            // Parameter configuration
          }
        ]
      }
    }
  }
}
```

### Content

Add content before the auto-generated API documentation using `x-mint: content`:

```json {6-8}
{
  "paths": {
    "/users": {
      "post": {
        "summary": "Create user",
        "x-mint": {
          "content": "## Prerequisites\n\nThis endpoint requires admin privileges and has rate limiting.\n\n<Note>User emails must be unique across the system.</Note>"
        },
        "parameters": [
          {
            // Parameter configuration
          }
        ]
      }
    }
  }
}
```

The `content` extension supports all Mintlify MDX components and formatting.

### Href

Change the URL of the endpoint page in your docs using `x-mint: href`:

```json {6-8, 14-16}
{
  "paths": {
    "/legacy-endpoint": {
      "get": {
        "summary": "Legacy endpoint",
        "x-mint": {
          "href": "/deprecated-endpoints/legacy-endpoint"
        }
      }
    },
    "/documented-elsewhere": {
      "post": {
        "summary": "Special endpoint",
        "x-mint": {
          "href": "/guides/special-endpoint-guide"
        }
      }
    }
  }
}
```

When `x-mint: href` is present, the navigation entry will link directly to the specified URL instead of generating an API page.

### MCP

Selectively expose endpoints as Model Context Protocol (MCP) tools by using `x-mint: mcp`. Only enable endpoints that are safe for public access through AI tools.

<ResponseField name="mcp" type="object">
  The MCP configuration for the endpoint.

  <Expandable title="MCP">
    <ResponseField name="enabled" type="boolean">
      Whether to expose the endpoint as an MCP tool. Takes precedence over the file-level configuration.
    </ResponseField>

    <ResponseField name="name" type="string">
      The name of the MCP tool.
    </ResponseField>

    <ResponseField name="description" type="string">
      The description of the MCP tool.
    </ResponseField>
  </Expandable>
</ResponseField>

<CodeGroup>
  ```json Selective enablement {6-9} wrap
  {
    "paths": {
      "/users": {
        "post": {
          "summary": "Create user",
          "x-mint": {
            "mcp": {
              "enabled": true
            },
            // ...
          }
        }
      },
      "/users": {
        "delete": {
          "summary": "Delete user (admin only)",
          // No `x-mint: mcp` so this endpoint is not exposed as an MCP tool
          // ...
        }
      }
    }
  }
  ```

  ```json Global enablement {3-5, 9-13} wrap
  {
    "openapi": "3.1.0",
    "x-mcp": {
        "enabled": true // All endpoints are exposed as MCP tools by default
      },
    "paths": {
      "/api/admin/delete": {
        "delete": {
          "x-mint": {
            "mcp": {
              "enabled": false // Disable MCP for this endpoint
            }
          },
          "summary": "Delete resources"
        }
      }
    }
  }
  ```
</CodeGroup>

For more information, see [Model Context Protocol](/ai/model-context-protocol).

## Auto-populate API pages

Add an `openapi` field to any navigation element in your `docs.json` to automatically generate pages for OpenAPI endpoints. You can control where these pages appear in your navigation structure, as dedicated API sections or with other pages.

The `openapi` field accepts either a file path in your docs repo or a URL to a hosted OpenAPI document.

Generated endpoint pages have these default metadata values:

* `title`: The operation's `summary` field, if present. If there is no `summary`, the title is generated from the HTTP method and endpoint.
* `description`: The operation's `description` field, if present.
* `version`: The `version` value from the parent anchor or tab, if present.
* `deprecated`: The operation's `deprecated` field. If `true`, a deprecated label will appear next to the endpoint title in the side navigation and on the endpoint page.

<Tip>
  To exclude specific endpoints from your auto-generated API pages, add the
  [x-hidden](/api-playground/customization/managing-page-visibility#x-hidden)
  property to the operation in your OpenAPI spec.
</Tip>

There are two approaches for adding endpoint pages into your documentation:

1. **Dedicated API sections**: Reference OpenAPI specs in navigation elements for dedicated API sections.
2. **Selective endpoints**: Reference specific endpoints in your navigation alongside other pages.

### Dedicated API sections

Generate dedicated API sections by adding an `openapi` field to a navigation element and no other pages. All endpoints in the specification will be included:

```json {5}
"navigation": {
  "tabs": [
    {
        "tab": "API Reference",
        "openapi": "https://petstore3.swagger.io/api/v3/openapi.json"
    }
  ]
}
```

You can use multiple OpenAPI specifications in different navigation sections:

```json {8-11, 15-18}
"navigation": {
  "tabs": [
    {
      "tab": "API Reference",
      "groups": [
        {
          "group": "Users",
          "openapi": {
            "source": "/path/to/openapi-1.json",
            "directory": "api-reference"
          }
        },
        {
          "group": "Admin",
          "openapi": {
            "source": "/path/to/openapi-2.json",
            "directory": "api-reference"
          }
        }
      ]
    }
  ]
}
```

<Note>
  The `directory` field is optional and specifies where generated API pages are
  stored in your docs repo. If not specified, defaults to the `api-reference`
  directory of your repo.
</Note>

### Selective endpoints

When you want more control over where endpoints appear in your documentation, you can reference specific endpoints in your navigation. This approach allows you to generate pages for API endpoints alongside other content.

#### Set a default OpenAPI spec

Configure a default OpenAPI specification for a navigation element. Then reference specific endpoints in the `pages` field:

```json {12, 15-16}
"navigation": {
  "tabs": [
    {
      "tab": "Getting started",
      "pages": [
        "quickstart",
        "installation"
      ]
    },
    {
      "tab": "API reference",
      "openapi": "/path/to/openapi.json",
      "pages": [
        "api-overview",
        "GET /users",
        "POST /users",
        "guides/authentication"
      ]
    }
  ]
}
```

Any page entry matching the format `METHOD /path` will generate an API page for that endpoint using the default OpenAPI spec.

#### OpenAPI spec inheritance

OpenAPI specifications are inherited down the navigation hierarchy. Child navigation elements inherit their parent's OpenAPI specification unless they define their own:

```json {3, 7-8, 11, 13-14}
{
  "group": "API reference",
  "openapi": "/path/to/openapi-v1.json",
  "pages": [
    "overview",
    "authentication",
    "GET /users",
    "POST /users",
    {
      "group": "Orders",
      "openapi": "/path/to/openapi-v2.json",
      "pages": [
        "GET /orders",
        "POST /orders"
      ]
    }
  ]
}
```

#### Individual endpoints

Reference specific endpoints without setting a default OpenAPI specification by including the file path:

```json {5-6}
"navigation": {
  "pages": [
    "introduction",
    "user-guides",
    "/path/to/openapi-v1.json POST /users",
    "/path/to/openapi-v2.json GET /orders"
  ]
}
```

This approach is useful when you need individual endpoints from different specs or only want to include select endpoints.

## Create `MDX` files for API pages

For control over individual endpoint pages, create `MDX` pages for each operation. This lets you customize page metadata, add content, omit certain operations, or reorder pages in your navigation at the page level.

See an [example MDX OpenAPI page from MindsDB](https://github.com/mindsdb/mindsdb/blob/main/docs/rest/databases/create-databases.mdx?plain=1) and how it appears in their [live documentation](https://docs.mindsdb.com/rest/databases/create-databases).

### Manually specify files

Create an `MDX` page for each endpoint and specify which OpenAPI operation to display using the `openapi` field in the frontmatter.

When you reference an OpenAPI operation this way, the name, description, parameters, responses, and API playground are automatically generated from your OpenAPI document.

If you have multiple OpenAPI files, include the file path in your reference to ensure Mintlify finds the correct OpenAPI document. If you have only one OpenAPI file, Mintlify will detect it automatically.

<Note>
  This approach works regardless of whether you have set a default OpenAPI spec
  in your navigation. You can reference any endpoint from any OpenAPI spec by
  including the file path in the frontmatter.
</Note>

If you want to reference an external OpenAPI file, add the file's URL to your `docs.json`.

<CodeGroup>
  ```mdx Example
  ---
  title: "Get users"
  description: "Returns all plants from the system that the user has access to"
  openapi: "/path/to/openapi-1.json GET /users"
  deprecated: true
  version: "1.0"
  ---
  ```

  ```mdx Format
  ---
  title: "title of the page"
  description: "description of the page"
  openapi: openapi-file-path method path
  deprecated: boolean (not required)
  version: "version-string" (not required)
  ---
  ```
</CodeGroup>

<Note>
  The method and path must exactly match the definition in your OpenAPI
  specification. If the endpoint doesn't exist in the OpenAPI file, the page
  will be empty.
</Note>

### Autogenerate `MDX` files

Use our Mintlify [scraper](https://www.npmjs.com/package/@mintlify/scraping) to autogenerate `MDX` pages for large OpenAPI documents.

<Note>
  Your OpenAPI document must be valid or the files will not autogenerate.
</Note>

The scraper generates:

* An `MDX` page for each operation in the `paths` field of your OpenAPI document.
* If your OpenAPI document is version 3.1+, an `MDX` page for each operation in the `webhooks` field of your OpenAPI document.
* An array of navigation entries that you can add to your `docs.json`.

<Steps>
  <Step title="Generate `MDX` files.">
    ```bash
    npx @mintlify/scraping@latest openapi-file <path-to-openapi-file>
    ```
  </Step>

  <Step title="Specify an output folder.">
    ```bash
    npx @mintlify/scraping@latest openapi-file <path-to-openapi-file> -o api-reference
    ```

    Add the `-o` flag to specify a folder to populate the files into. If a folder is not specified, the files will populate in the working directory.
  </Step>
</Steps>

### Create `MDX` files for OpenAPI schemas

You can create individual pages for any OpenAPI schema defined in an OpenAPI document's `components.schema` field:

<CodeGroup>
  ```mdx Example
  ---
  openapi-schema: OrderItem
  ---
  ```

  ```mdx Format
  ---
  openapi-schema: "schema-key"
  ---
  ```
</CodeGroup>

## Webhooks

Webhooks are HTTP callbacks that your API sends to notify external systems when events occur. Webhooks are supported in OpenAPI 3.1+ documents.

### Define webhooks in your OpenAPI specification

Add a `webhooks` field to your OpenAPI document alongside the `paths` field.

For more information on defining webhooks, see [Webhooks](https://spec.openapis.org/oas/v3.1.0#oasWebhooks) in the OpenAPI documentation.

### Reference webhooks in MDX files

When creating MDX pages for webhooks, use `webhook` instead of HTTP methods like `GET` or `POST`:

```mdx
---
title: "Example webhook"
description: "Triggered when an event occurs"
openapi: "path/to/openapi-file webhook example-webhook-name"
---
```

<Note>
  The webhook name must exactly match the key defined in your OpenAPI
  specification's `webhooks` field.
</Note>


# Playground
Source: https://mintlify.com/docs/api-playground/overview

Enable users to interact with your API

## Overview

The API playground is an interactive environment that lets users test and explore your API endpoints. Developers can craft API requests, submit them, and view responses without leaving your documentation.

<Frame>
  <img src="https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/playground/API-playground-light.png?maxW=2534&auto=format&n=mvenohBb7F5T71_N&q=85&s=c77d42e57a2e529d5f6a9694ca10d0db" alt="API playground for the trigger an update endpoint." className="block dark:hidden" width="2534" height="1022" data-path="images/playground/API-playground-light.png" srcset="https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/playground/API-playground-light.png?w=280&maxW=2534&auto=format&n=mvenohBb7F5T71_N&q=85&s=e1ae5a97269273b48b90a14137f952a7 280w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/playground/API-playground-light.png?w=560&maxW=2534&auto=format&n=mvenohBb7F5T71_N&q=85&s=dd4bbc895cd838cffb1c70cb55630168 560w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/playground/API-playground-light.png?w=840&maxW=2534&auto=format&n=mvenohBb7F5T71_N&q=85&s=dcaadad9baee0dc2fe34e46243de308c 840w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/playground/API-playground-light.png?w=1100&maxW=2534&auto=format&n=mvenohBb7F5T71_N&q=85&s=6e4526afc8835e65eb4e8418e7f65a4e 1100w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/playground/API-playground-light.png?w=1650&maxW=2534&auto=format&n=mvenohBb7F5T71_N&q=85&s=acc4b3b2eba9092c3d2023f87a123b95 1650w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/playground/API-playground-light.png?w=2500&maxW=2534&auto=format&n=mvenohBb7F5T71_N&q=85&s=ccd151ddbb348f87c5ced0d3ad45fe68 2500w" data-optimize="true" data-opv="2" />

  <img src="https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/playground/API-playground-dark.png?maxW=2534&auto=format&n=mvenohBb7F5T71_N&q=85&s=4910180d05fe772219362288d78fa630" alt="API playground for the trigger an update endpoint." className="hidden dark:block" width="2534" height="1022" data-path="images/playground/API-playground-dark.png" srcset="https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/playground/API-playground-dark.png?w=280&maxW=2534&auto=format&n=mvenohBb7F5T71_N&q=85&s=6344a7d598c533cf6eb5cb559ba1004d 280w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/playground/API-playground-dark.png?w=560&maxW=2534&auto=format&n=mvenohBb7F5T71_N&q=85&s=f79811247f3a1b5c6b0005c6770f2ab4 560w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/playground/API-playground-dark.png?w=840&maxW=2534&auto=format&n=mvenohBb7F5T71_N&q=85&s=8c53af6dfdda0b0d5a450131b97acca8 840w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/playground/API-playground-dark.png?w=1100&maxW=2534&auto=format&n=mvenohBb7F5T71_N&q=85&s=428e15f8a34da8114bc9c2c86447c3fd 1100w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/playground/API-playground-dark.png?w=1650&maxW=2534&auto=format&n=mvenohBb7F5T71_N&q=85&s=fc4ebe6a6aa46e70736a5aef13c213ad 1650w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/playground/API-playground-dark.png?w=2500&maxW=2534&auto=format&n=mvenohBb7F5T71_N&q=85&s=9f4653b19c7ef73435453936028e716b 2500w" data-optimize="true" data-opv="2" />
</Frame>

The playground is automatically generated from your OpenAPI specification or AsyncAPI schema so any updates to your API are automatically reflected in the playground. You can also manually create API reference pages after defining a base URL and authentication method in your `docs.json`.

We recommend generating your API playground from an OpenAPI specification. See [OpenAPI Setup](/api-playground/openapi-setup) for more information on creating your OpenAPI document.

## Getting started

<Steps>
  <Step title="Add your OpenAPI specification file.">
    <Info>
      Make sure that your OpenAPI specification file is valid using the [Swagger Editor](https://editor.swagger.io/) or [Mint CLI](https://www.npmjs.com/package/mint).
    </Info>

    ```bash {2}
    /your-project
      |- docs.json
      |- openapi.json
    ```
  </Step>

  <Step title="Configure `docs.json`.">
    Update your `docs.json` to reference your OpenAPI specification. Add an `openapi` property to any navigation element to auto-populate your docs with pages for each endpoint specified in your OpenAPI document.

    This example generates a page for each endpoint specified in `openapi.json` and organize them under the "API reference" group in your navigation.

    ```json
    "navigation": {
      "groups": [
        {
          "group": "API reference",
          "openapi": "openapi.json"
        }
      ]
    }
    ```

    To generate pages for only specific endpoints, list the endpoints in the `pages` property of the navigation element.

    This example generates pages for only the `GET /users` and `POST /users` endpoints. To genereate other endpoint pages, add additional endpoints to the `pages` array.

    ```json
    "navigation": {
      "groups": [
          {
            "group": "API reference",
            "openapi": "openapi.json",
            "pages": [
              "GET /users",
              "POST /users"
            ]
          }
      ]
    }
    ```
  </Step>
</Steps>

## Customizing your playground

You can customize your API playground by defining the following properties in your `docs.json`.

<ResponseField name="playground" type="object">
  Configurations for the API playground.

  <Expandable title="playground" defaultOpen="True">
    <ResponseField name="display" type="&#x22;interactive&#x22; | &#x22;simple&#x22; | &#x22;none&#x22;">
      The display mode of the API playground.

      * `"interactive"`: Display the interactive playground.
      * `"simple"`: Display a copyable endpoint with no playground.
      * `"none"`: Display nothing.

      Defaults to `interactive`.
    </ResponseField>

    <ResponseField name="proxy" type="boolean" defaultOpen="True">
      Whether to pass API requests through a proxy server. Defaults to `true`.
    </ResponseField>
  </Expandable>
</ResponseField>

<ResponseField name="examples" type="object">
  Configurations for the autogenerated API examples.

  <Expandable title="examples" defaultOpen="True">
    <ResponseField name="languages" type="array of string">
      Example languages for the autogenerated API snippets.

      Languages display in the order specified.
    </ResponseField>

    <ResponseField name="defaults" type="&#x22;required&#x22; | &#x22;all&#x22;">
      Whether to show optional parameters in API examples. Defaults to `all`.
    </ResponseField>
  </Expandable>
</ResponseField>

### Example configuration

```json
{
 "api": {
   "playground": {
     "display": "interactive"
   },
   "examples": {
     "languages": ["curl", "python", "javascript"],
     "defaults": "required"
   }
 }
}
```

This example configures the API playground to be interactive with example code snippets for cURL, Python, and JavaScript. Only required parameters are shown in the code snippets.

### Custom endpoint pages

When you need more control over your API documentation, use the `x-mint` extension in your OpenAPI specification or create individual `MDX` pages for your endpoints.

Both options allow you to:

* Customize page metadata
* Add additional content like examples
* Control playground behavior per page

The `x-mint` extension is recommended so that all of your API documentation is automatically generated from your OpenAPI specification and maintained in one file.

Individual `MDX` pages are recommended for small APIs or when you want to experiment with changes on a per-page basis.

For more information, see [x-mint extension](/api-playground/openapi-setup#x-mint-extension) and [MDX Setup](/api-playground/mdx/configuration).

## Further reading

* [AsyncAPI Setup](/api-playground/asyncapi/setup) for more information on creating your AsyncAPI schema to generate WebSocket reference pages.


# Troubleshooting
Source: https://mintlify.com/docs/api-playground/troubleshooting

Common issues with API References

If your API pages aren't displaying correctly, check these common configuration issues:

<AccordionGroup>
  <Accordion title="All of my OpenAPI pages are completely blank">
    In this scenario, it's likely that either Mintlify cannot find your OpenAPI document,
    or your OpenAPI document is invalid.

    Running `mint dev` locally should reveal some of these issues.

    To verify your OpenAPI document will pass validation:

    1. Visit [this validator](https://editor.swagger.io/)
    2. Switch to the "Validate text" tab
    3. Paste in your OpenAPI document
    4. Click "Validate it!"

    If the text box that appears below has a green border, your document has passed validation.
    This is the exact validation package Mintlify uses to validate OpenAPI documents, so if your document
    passes validation here, there's a great chance the problem is elsewhere.

    Additionally, Mintlify does not support OpenAPI 2.0. If your document uses this version of the specification,
    you could encounter this issue. You can convert your document at [editor.swagger.io](https://editor.swagger.io/) (under Edit > Convert to OpenAPI 3):

    <Frame>
            <img src="https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/convert-oas-3.png?maxW=1454&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=1d74a6d43529ebcaf31fca85391a3cd2" alt="" width="1454" height="592" data-path="images/convert-oas-3.png" srcset="https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/convert-oas-3.png?w=280&maxW=1454&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=6770b96080cc4d34e8bde9b30c44b572 280w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/convert-oas-3.png?w=560&maxW=1454&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=2f3c9829b16319b109e8a7049e668546 560w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/convert-oas-3.png?w=840&maxW=1454&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=e3e8bf2d3061abd1ff5b28a78bc97c67 840w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/convert-oas-3.png?w=1100&maxW=1454&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=34cf912b010ef5a750cce0d4f30f6709 1100w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/convert-oas-3.png?w=1650&maxW=1454&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=7c224b98c11a81336d8d28eb4353697e 1650w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/convert-oas-3.png?w=2500&maxW=1454&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=6dcd264503806d8cf99a766116732446 2500w" data-optimize="true" data-opv="2" />
    </Frame>
  </Accordion>

  <Accordion title="One of my OpenAPI pages is completely blank">
    This is usually caused by a misspelled `openapi` field in the page metadata. Make sure
    the HTTP method and path match the HTTP method and path in the OpenAPI document exactly.

    Here's an example of how things might go wrong:

    ```mdx get-user.mdx
    ---
    openapi: "GET /users/{id}/"
    ---
    ```

    ```yaml openapi.yaml
    paths:
      "/users/{id}":
        get: ...
    ```

    Notice that the path in the `openapi` field has a trailing slash, whereas the path in the OpenAPI
    document does not.

    Another common issue is a misspelled filename. If you are specifying a particular OpenAPI document
    in the `openapi` field, ensure the filename is correct. For example, if you have two OpenAPI
    documents `openapi/v1.json` and `openapi/v2.json`, your metadata might look like this:

    ```mdx api-reference/v1/users/get-user.mdx
    ---
    openapi: "v1 GET /users/{id}"
    ---
    ```
  </Accordion>

  <Accordion title="Requests from the API Playground don't work">
    If you have a custom domain configured, this could be an issue with your reverse proxy. By
    default, requests made via the API Playground start with a `POST` request to the
    `/api/request` path on the docs site. If your reverse proxy is configured to only allow `GET`
    requests, then all of these requests will fail. To fix this, configure your reverse proxy to
    allow `POST` requests to the `/api/request` path.

    Alternatively, if your reverse proxy prevents you from accepting `POST` requests, you can configure Mintlify to send requests directly to your backend with the `api.playground.proxy` setting in the `docs.json`, as described in the [settings documentation](/settings#param-proxy). When using this configuration, you will need to configure CORS on your server since requests will come directly from users' browsers rather than through your proxy.
  </Accordion>

  <Accordion title="OpenAPI navigation entries are not generating pages">
    If you are using an OpenAPI navigation configuration, but the pages aren't generating, check these common issues:

    1. **Missing default OpenAPI spec**: Ensure you have an `openapi` field set for the navigation element:

    ```json {5}
    "navigation": {
      "groups": [
        {
          "group": "API reference",
          "openapi": "/path/to/openapi.json",
          "pages": [
            "GET /users",
            "POST /users"
          ]
        }
      ]
    }
    ```

    2. **OpenAPI spec inheritance**: If using nested navigation, ensure child groups inherit the correct OpenAPI spec or specify their own.

    3. **Validation issues**: Use `mint openapi-check <path-to-openapi-file>` to verify your OpenAPI document is valid.
  </Accordion>

  <Accordion title="Some OpenAPI operations appear in navigation but others don't">
    1. **Hidden operations**: Operations marked with `x-hidden: true` in your OpenAPI spec won't appear in auto-generated navigation.
    2. **Invalid operations**: Operations with validation errors in the OpenAPI spec may be skipped. Check your OpenAPI document for syntax errors.
    3. **Manual vs automatic inclusion**: If you reference any endpoints from an OpenAPI spec, only the explicitly referenced operations will appear in navigation. No other pages will be automatically added. This includes operations that are referenced in child navigation elements.
  </Accordion>

  <Accordion title="Mixed navigation (OpenAPI and MDX pages) not working correctly">
    When combining OpenAPI operations with regular documentation pages in navigation:

    1. **File conflicts**: You cannot have both an `MDX` file and a navigation entry for the same operation. For example, if you have `get-users.mdx`, do not also include `"GET /users"` in your navigation.  If you need to have a file that shares a name with an operation, use the `x-mint` extension for the endpoint to have the href point to a different location.
    2. **Path resolution**: Navigation entries that don't match OpenAPI operations will be treated as file paths. Ensure your `MDX` files exist at the expected locations.
    3. **Case sensitivity**: OpenAPI operation matching is case-sensitive. Ensure HTTP methods are uppercase in navigation entries.
  </Accordion>
</AccordionGroup>


# Assistant message
Source: https://mintlify.com/docs/api-reference/assistant/create-assistant-message

POST /assistant/{domain}/message
Generates a response message from the assistant for the specified domain.

## Rate limits

The assistant API has the following limits:

* 10,000 uses per key per month
* 10,000 requests per Mintlify organization per hour
* 10,000 requests per IP per day

## Suggested usage

For best results, use the [useChat hook from ai-sdk](https://ai-sdk.dev/docs/reference/ai-sdk-ui/use-chat#usechat) to send requests and handle responses.

You can set `fp`, `threadId`, and `filter` in the `body` field of the options parameter passed to the hook.


# Search documentation
Source: https://mintlify.com/docs/api-reference/assistant/search

POST /search/{domain}
Perform semantic and keyword searches across your documentation with configurable filtering and pagination.



# Introduction
Source: https://mintlify.com/docs/api-reference/introduction

Trigger updates, embed AI assistant, and more

The Mintlify REST API enables you to programmatically interact with your documentation, trigger updates, and embed AI-powered chat experiences.

## Endpoints

* [Trigger update](/api-reference/update/trigger): Trigger an update of your site when desired.
* [Get update status](/api-reference/update/status): Get the status of an update and other details about your docs.
* [Generate assistant message](/api-reference/assistant/create-assistant-message): Embed the assistant, trained on your docs, into any application of your choosing.
* [Search documentation](/api-reference/assistant/search): Search through your documentation.

## Authentication

You can generate an API key through [the dashboard](https://dashboard.mintlify.com/settings/organization/api-keys). API keys are associated with an entire organization and can be used across multiple deployments.

### Admin API key

The admin API key is used for the [Trigger update](/api-reference/update/trigger) and [Get update status](/api-reference/update/status) endpoints.

Admin API keys begin with the `mint_` prefix. Keep your admin API keys secret.

### Assistant API key

The assistant API key is used for the [Generate assistant message](/api-reference/assistant/create-assistant-message) and [Search documentation](/api-reference/assistant/search) endpoints.

Assistant API keys begin with the `mint_dsc_` prefix.

The assistant API **key** is a server-side token that should be kept secret.

The assistant API **token** is a public token that can be referenced in your frontend code.

<Note>
  Calls using the assistant API token can incur costs: either using your AI assistant credits or incurring overages.
</Note>


# Get update status
Source: https://mintlify.com/docs/api-reference/update/status

GET /project/update-status/{statusId}
Get the status of an update from the status ID



# Trigger update
Source: https://mintlify.com/docs/api-reference/update/trigger

POST /project/update/{projectId}
Trigger an update after updating your OpenAPI document by calling this endpoint in a CI check



# Authentication setup
Source: https://mintlify.com/docs/authentication-personalization/authentication-setup

Control the privacy of your docs by authenticating users

<Info>
  [Pro plans](https://mintlify.com/pricing?ref=authentication) include password authentication.

  [Enterprise plans](https://mintlify.com/pricing?ref=authentication) include all authentication methods.
</Info>

Authentication requires users to log in before accessing your documentation.

## Authentication modes

Choose between full and partial authentication modes based on your access control needs.

**Full authentication**: All pages are protected. Users must log in before accessing any content.

**Partial authentication**: Some pages are publicly viewable while others require authentication. Users can browse public content freely and authenticate only when accessing protected pages.

When configuring any handshake method below, you'll select either **Full authentication** or **Partial authentication** in your dashboard settings.

## Configuring authentication

Select the handshake method that you want to configure.

<Tabs>
  <Tab title="Password">
    <Info>
      Password authentication provides access control only and does **not** support content personalization.
    </Info>

    ### Prerequisites

    * Your security requirements allow sharing passwords among users.

    ### Implementation

    <Steps>
      <Step title="Create a password.">
        1. In your dashboard, go to [Authentication](https://dashboard.mintlify.com/settings/deployment/authentication).
        2. Select **Full Authentication** or **Partial Authentication**.
        3. Select **Password**.
        4. Enter a secure password.
        5. Select **Save changes**.
      </Step>

      <Step title="Distribute access.">
        Securely share the password and documentation URL with authorized users.
      </Step>
    </Steps>

    ## Example

    Your documentation is hosted at `docs.foo.com` and you need basic access control without tracking individual users. You want to prevent public access while keeping setup simple.

    **Create a strong password** in your dashboard. **Share credentials** with authorized users. That's it!
  </Tab>

  <Tab title="Mintlify Dashboard">
    ### Prerequisites

    * Your documentation users are also your documentation editors.

    ### Implementation

    <Steps>
      <Step title="Enable Mintlify dashboard authentication.">
        1. In your dashboard, go to [Authentication](https://dashboard.mintlify.com/settings/deployment/authentication).
        2. Select **Full Authentication** or **Partial Authentication**.
        3. Select **Mintlify Auth**.
        4. Select **Enable Mintlify Auth**.
      </Step>

      <Step title="Add authorized users.">
        1. In your dashboard, go to [Members](https://dashboard.mintlify.com/settings/organization/members).
        2. Add each person who should have access to your documentation.
        3. Assign appropriate roles based on their editing permissions.
      </Step>
    </Steps>

    ### Example

    Your documentation is hosted at `docs.foo.com` and your team uses the dashboard to edit your docs. You want to restrict access to team members only.

    **Enable Mintlify authentication** in your dashboard settings.

    **Verify team access** by checking that all team members are added to your organization.
  </Tab>

  <Tab title="OAuth 2.0">
    ### Prerequisites

    * An OAuth or OIDC server that supports the Authorization Code Flow.
    * Ability to create an API endpoint accessible by OAuth access tokens (optional, to enable personalization features).

    ### Implementation

    <Steps>
      <Step title="Configure your OAuth settings.">
        1. In your dashboard, go to [Authentication](https://dashboard.mintlify.com/settings/deployment/authentication).
        2. Select **Full Authentication** or **Partial Authentication**.
        3. Select **OAuth** and configure these fields:

        * **Authorization URL**: Your OAuth endpoint.
        * **Client ID**: Your OAuth 2.0 client identifier.
        * **Client Secret**: Your OAuth 2.0 client secret.
        * **Scopes**: Permissions to request. Copy the **entire** scope string (for example, for a scope like `provider.users.docs`, copy the complete `provider.users.docs`). Use multiple scopes if you need different access levels.
        * **Token URL**: Your OAuth token exchange endpoint.
        * **Info API URL** (optional): Endpoint to retrieve user info for personalization. If omitted, the OAuth flow will only be used to verify identity and the user info will be empty.
        * **Logout URL**: The native logout URL for your OAuth provider. If your provider has a `returnTo` or similar parameter, point it back to your docs URL.

        4. Select **Save changes**.
      </Step>

      <Step title="Configure your OAuth server.">
        1. Copy the **Redirect URL** from your [authentication settings](https://dashboard.mintlify.com/settings/deployment/authentication).
        2. Add the redirect URL as an authorized redirect URL for your OAuth server.
      </Step>

      <Step title="Create your user info endpoint (optional).">
        To enable personalization features, create an API endpoint that:

        * Accepts OAuth access tokens for authentication.
        * Returns user data in the `User` format. See [User data format](/authentication-personalization/personalization-setup#user-data-format) for more information.

        Add this endpoint URL to the **Info API URL** field in your [authentication settings](https://dashboard.mintlify.com/settings/deployment/authentication).
      </Step>
    </Steps>

    ### Example

    Your documentation is hosted at `foo.com/docs` and you have an existing OAuth server at `auth.foo.com` that supports the Authorization Code Flow.

    **Configure your OAuth server details** in your dashboard:

    * **Authorization URL**: `https://auth.foo.com/authorization`
    * **Client ID**: `ydybo4SD8PR73vzWWd6S0ObH`
    * **Scopes**: `['provider.users.docs']`
    * **Token URL**: `https://auth.foo.com/exchange`
    * **Info API URL**: `https://api.foo.com/docs/user-info`
    * **Logout URL**: `https://auth.foo.com/logout?returnTo=https%3A%2F%2Ffoo.com%2Fdocs`

    **Create a user info endpoint** at `api.foo.com/docs/user-info`, which requires an OAuth access token with the `provider.users.docs` scope, and returns:

    ```json
    {
      "content": {
        "firstName": "Jane",
        "lastName": "Doe"
      },
      "groups": ["engineering", "admin"]
    }
    ```

    **Configure your OAuth server to allow redirects** to your callback URL.
  </Tab>

  <Tab title="JWT">
    ### Prerequisites

    * An authentication system that can generate and sign JWTs.
    * A backend service that can create redirect URLs.

    ### Implementation

    <Steps>
      <Step title="Generate a private key.">
        1. In your dashboard, go to [Authentication](https://dashboard.mintlify.com/settings/deployment/authentication).
        2. Select **Full Authentication** or **Partial Authentication**.
        3. Select **JWT**.
        4. Enter the URL of your existing login flow and select **Save changes**.
        5. Select **Generate new key**.
        6. Store your key securely where it can be accessed by your backend.
      </Step>

      <Step title="Integrate Mintlify authentication into your login flow.">
        Modify your existing login flow to include these steps after user authentication:

        * Create a JWT containing the authenticated user's info in the `User` format. See [User data format](/authentication-personalization/personalization-setup#user-data-format) for more information.
        * Sign the JWT with your secret key, using the EdDSA algorithm.
        * Create a redirect URL back to the `/login/jwt-callback` path of your docs, including the JWT as the hash.
      </Step>
    </Steps>

    ### Example

    Your documentation is hosted at `docs.foo.com` with an existing authentication system at `foo.com`. You want to extend your login flow to grant access to the docs while keeping your docs separate from your dashboard (or you don't have a dashboard).

    Create a login endpoint at `https://foo.com/docs-login` that extends your existing authentication.

    After verifying user credentials:

    * Generate a JWT with user data in Mintlify's format.
    * Sign the JWT and redirect to `https://docs.foo.com/login/jwt-callback#{SIGNED_JWT}`.

    <CodeGroup>
      ```ts TypeScript
      import * as jose from 'jose';
      import { Request, Response } from 'express';

      const TWO_WEEKS_IN_MS = 1000 * 60 * 60 * 24 * 7 * 2;

      const signingKey = await jose.importPKCS8(process.env.MINTLIFY_PRIVATE_KEY, 'EdDSA');

      export async function handleRequest(req: Request, res: Response) {
        const user = {
          expiresAt: Math.floor((Date.now() + TWO_WEEKS_IN_MS) / 1000), // 2 week session expiration
          groups: res.locals.user.groups,
          content: {
            firstName: res.locals.user.firstName,
            lastName: res.locals.user.lastName,
          },
        };

        const jwt = await new jose.SignJWT(user)
          .setProtectedHeader({ alg: 'EdDSA' })
          .setExpirationTime('10 s') // 10 second JWT expiration
          .sign(signingKey);

        return res.redirect(`https://docs.foo.com/login/jwt-callback#${jwt}`);
      }
      ```

      ```python Python
      import jwt # pyjwt
      import os

      from datetime import datetime, timedelta
      from fastapi.responses import RedirectResponse

      private_key = os.getenv(MINTLIFY_JWT_PEM_SECRET_NAME, '')

      @router.get('/auth')
      async def return_mintlify_auth_status(current_user):
        jwt_token = jwt.encode(
          payload={
            'exp': int((datetime.now() + timedelta(seconds=10)).timestamp()),    # 10 second JWT expiration
            'expiresAt': int((datetime.now() + timedelta(weeks=2)).timestamp()), # 1 week session expiration
            'groups': ['admin'] if current_user.is_admin else [],
            'content': {
              'firstName': current_user.first_name,
              'lastName': current_user.last_name,
            },
          },
          key=private_key,
          algorithm='EdDSA'
        )

        return RedirectResponse(url=f'https://docs.foo.com/login/jwt-callback#{jwt_token}', status_code=302)
      ```
    </CodeGroup>

    ### Redirecting unauthenticated users

    When an unauthenticated user tries to access a protected page, their intended destination is preserved in the redirect to your login URL:

    1. User attempts to visit a protected page: `https://docs.foo.com/quickstart`.
    2. Redirect to your login URL with a redirect query parameter: `https://foo.com/docs-login?redirect=%2Fquickstart`.
    3. After authentication, redirect to `https://docs.foo.com/login/jwt-callback?redirect=%2Fquickstart#{SIGNED_JWT}`.
    4. User lands in their original destination.
  </Tab>
</Tabs>

## Making pages public

When using partial authentication, all pages are protected by default. You can make specific pages viewable without authentication at the page or group level with the `public` property.

### Page level

To make a page public, add `public: true` to the page's frontmatter.

```mdx Public page example
---
title: "Public page"
public: true
---
```

### Group level

To make all pages in a group public, add `"public": true` beneath the group's name in the `navigation` object of your `docs.json`.

```json Public group example
{
  "navigation": {
    "groups": [
      {
        "group": "Public group",
        "public": true,
        "icon": "play",
        "pages": [
          "quickstart",
          "installation",
          "settings"
        ]
      },
      {
        "group": "Private group",
        "icon": "pause",
        "pages": [
          "private-information",
          "secret-settings"
        ]
      }
    ]
  }
}
```


# Personalization setup
Source: https://mintlify.com/docs/authentication-personalization/personalization-setup

Let users log in for customized documentation experiences

Personalization customizes your documentation for each user when they are logged in. For example, you can prefill their API keys, show content specific to their plan or role, or hide sections they don't need access to.

## Personalization features

Customize content with these personalization capabilities.

### API key prefilling

Automatically populate API playground fields with user-specific values by returning matching field names in your user data. The field names in your user data must exactly match the names in the API playground for automatic prefilling to work.

### Dynamic MDX content

Display dynamic content based on user information like name, plan, or organization using the `user` variable.

```jsx
Welcome back, {user.firstName}! Your {user.org?.plan} plan includes...
```

See the [User data format](#user-data-format) section below for detailed examples and implementation guidance.

### Page visibility

Restrict which pages are visible to your users by adding `groups` fields to your pages' frontmatter. By default, every page is visible to every user.

Users will only see pages for `groups` that they are in.

```mdx
---
title: "Managing your users"
description: "Adding and removing users from your organization"
groups: ["admin"]
---
```

## User data format

When implementing personalization, your system returns user data in a specific format that enables content customization. This data can be sent as either a raw JSON object or within a signed JWT, depending on your handshake method. The shape of the data is the same for both.

```tsx
type User = {
  expiresAt?: number;
  groups?: string[];
  content?: Record<string, any>;
  apiPlaygroundInputs?: {
    header?: Record<string, any>;
    query?: Record<string, any>;
    cookie?: Record<string, any>;
    server?: Record<string, string>;
  };
};
```

<ParamField path="expiresAt" type="number">
  Session expiration time in **seconds since epoch**. If the user loads a page after this time, their stored data is automatically deleted and they must reauthenticate.
  <Warning><b>For JWT handshakes:</b> This differs from the JWT's `exp` claim, which determines when a JWT is considered invalid. Set the JWT `exp` claim to a short duration (10 seconds or less) for security. Use `expiresAt` for the actual session length (hours to weeks).</Warning>
</ParamField>

<ParamField path="groups" type="string[]">
  List of groups the user belongs to. Pages with matching `groups` in their frontmatter are visible to this user.

  **Example**: User with `groups: ["admin", "engineering"]` can access pages tagged with either the `admin` or `engineering` groups.
</ParamField>

<ParamField path="content" type="object">
  Custom data accessible in your `MDX` content via the `user` variable. Use this for dynamic personalization throughout your documentation.

  **Basic example**:

  ```json
  { "firstName": "Ronan", "company": "Acme Corp", "plan": "Enterprise" }
  ```

  **Usage in `MDX`**:

  ```mdx
  Welcome back, {user.firstName}! Your {user.plan} plan includes...
  ```

  With the example `user` data, this would render as: Welcome back, Ronan! Your Enterprise plan includes...

  **Advanced conditional rendering**:

  ```jsx
  Authentication is an enterprise feature. {
    user.org === undefined
      ? <>To access this feature, first create an account at the <a href="https://dashboard.mintlify.com/login">Mintlify dashboard</a>.</>
      : user.org.plan !== 'enterprise'
        ? <>You are currently on the ${user.org.plan ?? 'free'} plan. See <a href="https://mintlify.com/pricing">our pricing page</a> for information about upgrading.</>
        : <>To request this feature for your enterprise org, contact your admin.</>
  }
  ```

  <Note>
    The information in `user` is only available for logged-in users. For logged-out users, the value of `user` will be `{}`. To prevent the page from crashing for logged-out users, always use optional chaining on your `user` fields. For example, `{user.org?.plan}`.
  </Note>
</ParamField>

<ParamField path="apiPlaygroundInputs" type="object">
  User-specific values that prefill API playground fields. Saves users time by auto-populating their data when testing APIs.

  **Example**:

  ```json
  {
    "header": { "X-API-Key": "user_api_key_123" },
    "server": { "subdomain": "foo" },
    "query": { "org_id": "12345" }
  }
  ```

  If a user makes requests at a specific subdomain, you can send `{ server: { subdomain: 'foo' } }` as an `apiPlaygroundInputs` field. This value will be prefilled on any API page with the `subdomain` value.

  <Note>The `header`, `query`, and `cookie` fields will only prefill if they are part of your [OpenAPI security scheme](https://swagger.io/docs/specification/authentication/). If a field is in either the `Authorization` or `Server` sections, it will prefill. Creating a standard header parameter named `Authorization` will not enable this feature.</Note>
</ParamField>

### Example user data

```json
{
  "expiresAt": 1735689600,
  "groups": ["admin", "beta-users"],
  "content": {
    "firstName": "Jane",
    "lastName": "Smith",
    "company": "TechCorp",
    "plan": "Enterprise",
    "region": "us-west"
  },
  "apiPlaygroundInputs": {
    "header": {
      "Authorization": "Bearer abc123",
      "X-Org-ID": "techcorp"
    },
    "server": {
      "environment": "production",
      "region": "us-west"
    }
  }
}
```

## Configuring personalization

Select the handshake method that you want to configure.

<Tabs>
  <Tab title="JWT">
    ### Prerequisites

    * A login system that can generate and sign JWTs
    * A backend service that can create redirect URLs

    ### Implementation

    <Steps>
      <Step title="Generate a private key.">
        1. In your dashboard, go to [Authentication](https://dashboard.mintlify.com/settings/deployment/authentication).
        2. Select **Personalization**.
        3. Select **JWT**.
        4. Enter the URL of your existing login flow and select **Save changes**.
        5. Select **Generate new key**.
        6. Store your key securely where it can be accessed by your backend.
      </Step>

      <Step title="Integrate Mintlify personalization into your login flow.">
        Modify your existing login flow to include these steps after user login:

        * Create a JWT containing the logged-in user's info in the `User` format. See the [User data format](#user-data-format) section above for more information.
        * Sign the JWT with the secret key, using the ES256 algorithm.
        * Create a redirect URL back to your docs, including the JWT as the hash.
      </Step>
    </Steps>

    ### Example

    Your documentation is hosted at `docs.foo.com`. You want your docs to be separate from your dashboard (or you don't have a dashboard) and enable personalization.

    Generate a JWT secret. Then create a login endpoint at `https://foo.com/docs-login` that initiates a login flow to your documentation.

    After verifying user credentials:

    * Generate a JWT with user data in Mintlify's format.
    * Sign the JWT and redirect to `https://docs.foo.com#{SIGNED_JWT}`.

    ```ts
    import * as jose from 'jose';
    import { Request, Response } from 'express';

    const TWO_WEEKS_IN_MS = 1000 * 60 * 60 * 24 * 7 * 2;

    const signingKey = await jose.importPKCS8(process.env.MINTLIFY_PRIVATE_KEY, 'ES256');

    export async function handleRequest(req: Request, res: Response) {
      const user = {
        expiresAt: Math.floor((Date.now() + TWO_WEEKS_IN_MS) / 1000),
        groups: res.locals.user.groups,
        content: {
          firstName: res.locals.user.firstName,
          lastName: res.locals.user.lastName,
        },
      };

      const jwt = await new jose.SignJWT(user)
        .setProtectedHeader({ alg: 'ES256' })
        .setExpirationTime('10 s')
        .sign(signingKey);

      return res.redirect(`https://docs.foo.com#${jwt}`);
    }
    ```

    ### Preserving page anchors

    To redirect users to specific sections after login, use this URL format: `https://docs.foo.com/page#jwt={SIGNED_JWT}&anchor={ANCHOR}`.

    **Example**:

    * Original URL: `https://docs.foo.com/quickstart#step-one`
    * Redirect URL: `https://docs.foo.com/quickstart#jwt={SIGNED_JWT}&anchor=step-one`
  </Tab>

  <Tab title="OAuth 2.0">
    ### Prerequisites

    * An OAuth server that supports the Auth Code with PKCE Flow
    * Ability to create an API endpoint accessible by OAuth access tokens

    ### Implementation

    <Steps>
      <Step title="Create user info API endpoint.">
        Create an API endpoint that:

        * Accepts OAuth access tokens for authentication.
        * Returns user data in the `User` format. See the [User data format](#user-data-format) section above for more information.
        * Defines the scopes for access.
      </Step>

      <Step title="Configure your OAuth personalization settings.">
        1. In your dashboard, go to [Authentication](https://dashboard.mintlify.com/settings/deployment/authentication).
        2. Select **Personalization**.
        3. Select **OAuth** and configure these fields:

        * **Authorization URL**: Your OAuth authorization endpoint.
        * **Client ID**: Your OAuth 2.0 client identifier.
        * **Scopes**: Permissions to request. Copy the **entire** scope string (for example, for a scope like `provider.users.docs`, copy the complete `provider.users.docs`). Must match the scopes of the endpoint that you configured in the first step.
        * **Token URL**: Your OAuth token exchange endpoint.
        * **Info API URL**: Endpoint to retrieve user data for personalization. Created in the first step.

        4. Select **Save changes**
      </Step>

      <Step title="Configure your OAuth server.">
        1. Copy the **Redirect URL** from your [authentication settings](https://dashboard.mintlify.com/settings/deployment/authentication).
        2. Add this URL as an authorized redirect URL in your OAuth server configuration.
      </Step>
    </Steps>

    ### Example

    Your documentation is hosted at `foo.com/docs` and you have an existing OAuth server that supports the PKCE flow. You want to personalize your docs based on user data.

    **Create a user info endpoint** at `api.foo.com/docs/user-info`, which requires an OAuth access token with the `provider.users.docs` scope and responds with the user's custom data:

    ```json
    {
      "content": {
        "firstName": "Jane",
        "lastName": "Doe"
      },
      "groups": ["engineering", "admin"]
    }
    ```

    **Configure your OAuth server details** in your dashboard:

    * **Authorization URL**: `https://auth.foo.com/authorization`
    * **Client ID**: `ydybo4SD8PR73vzWWd6S0ObH`
    * **Scopes**: `['docs-user-info']`
    * **Token URL**: `https://auth.foo.com/exchange`
    * **Info API URL**: `https://api.foo.com/docs/user-info`

    **Configure your OAuth server** to allow redirects to your callback URL.
  </Tab>

  <Tab title="Shared session">
    ### Prerequisites

    * A dashboard or user portal with cookie-based session authentication.
    * Ability to create an API endpoint at the same origin or subdomain as your dashboard.
      * If your dashboard is at `foo.com`, the **API URL** must start with `foo.com` or `*.foo.com`.
      * If your dashboard is at `dash.foo.com`, the **API URL** must start with `dash.foo.com` or `*.dash.foo.com`.
    * Your docs are hosted at the same domain or subdomain as your dashboard.
      * If your dashboard is at `foo.com`, your **docs** must be hosted at `foo.com` or `*.foo.com`.
      * If your dashboard is at `*.foo.com`, your **docs** must be hosted at `foo.com` or `*.foo.com`.

    ### Implementation

    <Steps>
      <Step title="Create user info API endpoint.">
        Create an API endpoint that:

        * Uses your existing session authentication to identify users
        * Returns user data in the `User` format (see the [User data format](#user-data-format) section above)
        * If the API domain and the docs domain **do not exactly match**:
          * Add the docs domain to your API's `Access-Control-Allow-Origin` header (must not be `*`).
          * Set your API's `Access-Control-Allow-Credentials` header to `true`.
          <Warning>
            Only enable CORS headers on this specific endpoint, not your entire dashboard API.
          </Warning>
      </Step>

      <Step title="Configure your personalization settings">
        1. In your dashboard, go to [Authentication](https://dashboard.mintlify.com/settings/deployment/authentication).
        2. Select **Personalization**.
        3. Select **Shared Session**.
        4. Enter your **Info API URL**, which is the endpoint from the first step.
        5. Enter your **Login URL**, where users log into your dashboard.
        6. Select **Save changes**.
      </Step>
    </Steps>

    ### Examples

    #### Dashboard at subdomain, docs at subdomain

    You have a dashboard at `dash.foo.com`, which uses cookie-based session authentication. Your dashboard API routes are hosted at `dash.foo.com/api`. You want to set up personalization for your docs hosted at `docs.foo.com`.

    **Setup process**:

    1. **Create endpoint** `dash.foo.com/api/docs/user-info` that identifies users via session authentication and responds with their user data.
    2. **Add CORS headers** for this route only:
       * `Access-Control-Allow-Origin`: `https://docs.foo.com`
       * `Access-Control-Allow-Credentials`: `true`
    3. **Configure API URL** in authentication settings: `https://dash.foo.com/api/docs/user-info`.

    #### Dashboard at subdomain, docs at root

    You have a dashboard at `dash.foo.com`, which uses cookie-based session authentication. Your dashboard API routes are hosted at `dash.foo.com/api`. You want to set up personalization for your docs hosted at `foo.com/docs`.

    **Setup process**:

    1. **Create endpoint** `dash.foo.com/api/docs/user-info` that identifies users via session authentication and responds with their user data.
    2. **Add CORS headers** for this route only:
       * `Access-Control-Allow-Origin`: `https://foo.com`
       * `Access-Control-Allow-Credentials`: `true`
    3. **Configure API URL** in authentication settings: `https://dash.foo.com/api/docs/user-info`.

    #### Dashboard at root, docs at root

    You have a dashboard at `foo.com/dashboard`, which uses cookie-based session authentication. Your dashboard API routes are hosted at `foo.com/api`. You want to set up personalization for your docs hosted at `foo.com/docs`.

    **Setup process**:

    1. **Create endpoint** `foo.com/api/docs/user-info` that identifies users via session authentication and responds with their user data.
    2. **Configure API URL** in authentication settings: `https://foo.com/api/docs/user-info`

    <Note>
      No CORS configuration is needed since the dashboard and docs share the same domain.
    </Note>
  </Tab>
</Tabs>


# Code
Source: https://mintlify.com/docs/code

Display inline code and code blocks

## Adding code samples

You can add inline code snippets or code blocks. Code blocks support meta options for syntax highlighting, titles, line highlighting, icons, and more.

### Inline code

To denote a `word` or `phrase` as code, enclose it in backticks (\`).

```mdx
To denote a `word` or `phrase` as code, enclose it in backticks (`).
```

### Code blocks

Use [fenced code blocks](https://www.markdownguide.org/extended-syntax/#fenced-code-blocks) by enclosing code in three backticks. Code blocks are copyable, and if you have the assistant enabled, users can ask AI to explain the code.

Specify the programming language for syntax highlighting and to enable meta options. Add any meta options, like a title or icon, after the language.

```java HelloWorld.java lines icon="java"
class HelloWorld {
    public static void main(String[] args) {
        System.out.println("Hello, World!");
    }
}
```

````mdx
```java HelloWorld.java lines icon="java"
class HelloWorld {
    public static void main(String[] args) {
        System.out.println("Hello, World!");
    }
}
```
````

## Code block options

You can add meta options to your code blocks to customize their appearance.

<Note>
  You must specify a programming language for a code block before adding any other meta options.
</Note>

### Option syntax

* **String and boolean options**: Wrap with `""`, `''`, or no quotes.
* **Expression options**: Wrap with `{}`, `""`, or `''`.

### Syntax highlighting

Enable syntax highlighting by specifying the programming language after the opening backticks of a code block.

We use [Shiki](https://shiki.style/) for syntax highlighting and support all available languages. See the full list of [languages](https://shiki.style/languages) in Shiki's documentation.

```java
class HelloWorld {
    public static void main(String[] args) {
        System.out.println("Hello, World!");
    }
}
```

````mdx
```java
class HelloWorld {
    public static void main(String[] args) {
        System.out.println("Hello, World!");
    }
}
```
````

### Title

Add a title to label your code example. Use `title="Your title"` or a string on a single line.

```javascript Code Block Example
const hello = "world";
```

````mdx
```javascript Code Block Example
const hello = "world";
```
````

### Icon

Add an icon to your code block using the `icon` property. See [Icons](/components/icons) for all available options.

```javascript icon="square-js"
const hello = "world";
```

````mdx
```javascript icon="square-js"
const hello = "world";
```
````

### Line Highlighting

Highlight specific lines in your code blocks using `highlight` with the line numbers or ranges you want to highlight.

```javascript Line Highlighting Example highlight= {1-2,5}
const greeting = "Hello, World!";
function sayHello() {
  console.log(greeting);
}
sayHello();
```

````mdx
```javascript Line Highlighting Example highlight={1-2,5}
const greeting = "Hello, World!";
function sayHello() {
  console.log(greeting);
}
sayHello();
```
````

### Line focusing

Focus on specific lines in your code blocks using `focus` with line numbers or ranges.

```javascript Line Focus Example focus= {2,4-5}
const greeting = "Hello, World!";
function sayHello() {
  console.log(greeting);
}
sayHello();
```

````mdx
```javascript Line Focus Example focus={2,4-5}
const greeting = "Hello, World!";
function sayHello() {
  console.log(greeting);
}
sayHello();
```
````

### Show line numbers

Display line numbers on the left side of your code block using `lines`.

```javascript Show Line Numbers Example lines
const greeting = "Hello, World!";
function sayHello() {
  console.log(greeting);
}
sayHello();
```

````mdx
```javascript Show Line Numbers Example lines
const greeting = "Hello, World!";
function sayHello() {
  console.log(greeting);
}
sayHello();
```
````

### Expandable

Allow users to expand and collapse long code blocks using `expandable`.

```python Expandable Example expandable
from datetime import datetime, timedelta
from typing import Dict, List, Optional
from dataclasses import dataclass

@dataclass
class Book:
    title: str
    author: str
    isbn: str
    checked_out: bool = False
    due_date: Optional[datetime] = None

class Library:
    def __init__(self):
        self.books: Dict[str, Book] = {}
        self.checkouts: Dict[str, List[str]] = {}  # patron -> list of ISBNs

    def add_book(self, book: Book) -> None:
        if book.isbn in self.books:
            raise ValueError(f"Book with ISBN {book.isbn} already exists")
        self.books[book.isbn] = book

    def checkout_book(self, isbn: str, patron: str, days: int = 14) -> None:
        if patron not in self.checkouts:
            self.checkouts[patron] = []

        book = self.books.get(isbn)
        if not book:
            raise ValueError("Book not found")

        if book.checked_out:
            raise ValueError("Book is already checked out")

        if len(self.checkouts[patron]) >= 3:
            raise ValueError("Patron has reached checkout limit")

        book.checked_out = True
        book.due_date = datetime.now() + timedelta(days=days)
        self.checkouts[patron].append(isbn)

    def return_book(self, isbn: str) -> float:
        book = self.books.get(isbn)
        if not book or not book.checked_out:
            raise ValueError("Book not found or not checked out")

        late_fee = 0.0
        if datetime.now() > book.due_date:
            days_late = (datetime.now() - book.due_date).days
            late_fee = days_late * 0.50

        book.checked_out = False
        book.due_date = None

        # Remove from patron's checkouts
        for patron, books in self.checkouts.items():
            if isbn in books:
                books.remove(isbn)
                break

        return late_fee

    def search(self, query: str) -> List[Book]:
        query = query.lower()
        return [
            book for book in self.books.values()
            if query in book.title.lower() or query in book.author.lower()
        ]

def main():
    library = Library()

    # Add some books
    books = [
        Book("The Hobbit", "J.R.R. Tolkien", "978-0-261-10295-4"),
        Book("1984", "George Orwell", "978-0-452-28423-4"),
    ]

    for book in books:
        library.add_book(book)

    # Checkout and return example
    library.checkout_book("978-0-261-10295-4", "patron123")
    late_fee = library.return_book("978-0-261-10295-4")
    print(f"Late fee: ${late_fee:.2f}")

if __name__ == "__main__":
    main()
```

````mdx
```python Expandable Example expandable
from datetime import datetime, timedelta
from typing import Dict, List, Optional
from dataclasses import dataclass

# ...

if __name__ == "__main__":
    main()
```
````

### Wrap

Enable text wrapping for long lines using `wrap`. This prevents horizontal scrolling and makes long lines easier to read.

```javascript Wrap Example wrap
const greeting = "Hello, World! I am a long line of text that will wrap to the next line.";
function sayHello() {
  console.log(greeting);
}
sayHello();
```

````mdx
```javascript Wrap Example wrap
const greeting = "Hello, World! I am a long line of text that will wrap to the next line.";
function sayHello() {
  console.log(greeting);
}
sayHello();
```
````

### Diff

Show a visual diff of added or removed lines in your code blocks. Added lines are highlighted in green and removed lines are highlighted in red.

To create diffs, add these special comments at the end of lines in your code block:

* `// [!code ++]`: Mark a line as added (green highlight).
* `// [!code --]`: Mark a line as removed (red highlight).

For multiple consecutive lines, specify the number of lines after a colon:

* `// [!code ++:3]`: Mark the current line plus the next two lines as added.
* `// [!code --:5]`: Mark the current line plus the next four lines as removed.

The comment syntax must match your programming language (for example, `//` for JavaScript or `#` for Python).

```js Diff Example icon="code" lines
const greeting = "Hello, World!"; // [!code ++]
function sayHello() {
  console.log("Hello, World!"); // [!code --]
  console.log(greeting); // [!code ++]
}
sayHello();
```

````text
```js Diff Example icon="code" lines
const greeting = "Hello, World!"; // [!code ++]
function sayHello() {
  console.log("Hello, World!"); // [!code --]
  console.log(greeting); // [!code ++]
}
sayHello();
```
````


# Accordions
Source: https://mintlify.com/docs/components/accordions

Collapsible components to show and hide content

Accordions allow users to expand and collapse content sections. Use accordions for progressive disclosure and to organize information.

## Single accordion

<Accordion title="I am an Accordion.">
  You can put any content in here, including other components, like code:

  ```java HelloWorld.java
   class HelloWorld {
       public static void main(String[] args) {
           System.out.println("Hello, World!");
       }
   }
  ```
</Accordion>

````mdx Accordion example
<Accordion title="I am an Accordion.">
  You can put any content in here, including other components, like code:

   ```java HelloWorld.java
    class HelloWorld {
        public static void main(String[] args) {
            System.out.println("Hello, World!");
        }
    }
  ```
</Accordion>
````

## Accordion Groups

Group related accordions together using `<AccordionGroup>`. This creates a cohesive section of accordions that can be individually expanded or collapsed.

<AccordionGroup>
  <Accordion title="Getting started">
    You can put other components inside Accordions.

    ```java HelloWorld.java
    class HelloWorld {
        public static void main(String[] args) {
            System.out.println("Hello, World!");
        }
    }
    ```
  </Accordion>

  <Accordion title="Advanced features" icon="bot">
    Add icons to make accordions more visually distinct and scannable.
  </Accordion>

  <Accordion title="Troubleshooting">
    Keep related content organized into groups.
  </Accordion>
</AccordionGroup>

````mdx Accordion Group Example
<AccordionGroup>
  <Accordion title="Getting started">
    You can put other components inside Accordions.

    ```java HelloWorld.java
    class HelloWorld {
        public static void main(String[] args) {
            System.out.println("Hello, World!");
        }
    }
    ```
  </Accordion>

  <Accordion title="Advanced features" icon="alien-8bit">
    Add icons to make accordions more visually distinct and scannable.
  </Accordion>

  <Accordion title="Troubleshooting">
    Keep related content organized into groups.
  </Accordion>
</AccordionGroup>
````

## Properties

<ResponseField name="title" type="string" required>
  Title in the Accordion preview.
</ResponseField>

<ResponseField name="description" type="string">
  Detail below the title in the Accordion preview.
</ResponseField>

<ResponseField name="defaultOpen" type="boolean" default="false">
  Whether the Accordion is open by default.
</ResponseField>

<ResponseField name="icon" type="string">
  The icon to display.

  Options:

  * [Font Awesome icon](https://fontawesome.com/icons) name
  * [Lucide icon](https://lucide.dev/icons) name
  * JSX-compatible SVG code wrapped in curly braces
  * URL to an externally hosted icon
  * Path to an icon file in your project

  For custom SVG icons:

  1. Convert your SVG using the [SVGR converter](https://react-svgr.com/playground/).
  2. Paste your SVG code into the SVG input field.
  3. Copy the complete `<svg>...</svg>` element from the JSX output field.
  4. Wrap the JSX-compatible SVG code in curly braces: `icon={<svg ...> ... </svg>}`.
  5. Adjust `height` and `width` as needed.
</ResponseField>

<ResponseField name="iconType" type="string">
  The [Font Awesome](https://fontawesome.com/icons) icon style. Only used with Font Awesome icons.

  Options: `regular`, `solid`, `light`, `thin`, `sharp-solid`, `duotone`, `brands`.
</ResponseField>


# Callouts
Source: https://mintlify.com/docs/components/callouts

Use callouts to add eye-catching context to your content

Callouts can be styled as a Note, Warning, Info, Tip, or Check:

<Note>This adds a note in the content</Note>

```mdx
<Note>This adds a note in the content</Note>
```

<Warning>This raises a warning to watch out for</Warning>

```mdx
<Warning>This raises a warning to watch out for</Warning>
```

<Info>This draws attention to important information</Info>

```mdx
<Info>This draws attention to important information</Info>
```

<Tip>This suggests a helpful tip</Tip>

```mdx
<Tip>This suggests a helpful tip</Tip>
```

<Check>This brings us a checked status</Check>

```mdx
<Check>This brings us a checked status</Check>
```

<Danger>This is a danger callout</Danger>

```jsx
<Danger>This is a danger callout</Danger>
```

<RequestExample>
  ```mdx Callout Example
  <Note>This adds a note in the content</Note>
  ```
</RequestExample>


# Cards
Source: https://mintlify.com/docs/components/cards

Highlight main points or links with customizable layouts and icons

Use cards to create visual containers for content. Cards are flexible containers that can include text, icons, images, and links.

## Basic card

<Card title="Card title" icon="text" href="/components/columns">
  This is how you use a card with an icon and a link. Clicking on this card
  brings you to the Columns page.
</Card>

```mdx Card example
<Card title="Card title" icon="text" href="/components/columns">
  This is how you use a card with an icon and a link. Clicking on this card
  brings you to the Columns page.
</Card>
```

## Card variations

Cards support several layout and styling options to fit different content needs.

### Horizontal layout

Add the `horizontal` property to display cards in a more compact, horizontal layout.

<Card title="Horizontal card" icon="text" horizontal>
  This is an example of a horizontal card.
</Card>

```mdx Horizontal card example
<Card title="Horizontal card" icon="text" horizontal>
  This is an example of a horizontal card.
</Card>
```

### Image cards

Add an `img` property to display an image at the top of the card.

<Card title="Image card" img="https://mintlify-assets.b-cdn.net/yosemite.jpg">
  This is an example of a card with an image.
</Card>

```mdx Image card example
<Card title="Image card" img="/images/card-with-image.png">
  This is an example of a card with an image.
</Card>
```

### Link cards with custom CTAs

You can customize the call-to-action text and control whether an arrow appears. By default, arrows only show for external links.

<Card title="Link card" icon="link" href="/components/columns" arrow="true" cta="Click here">
  This is an example of a card with an icon and a link. Clicking on this card brings you to the Columns page.
</Card>

```mdx Link card example
<Card
  title="Link card"
  icon="link"
  href="/components/columns"
  arrow="true"
  cta="Click here"
>
  This is an example of a card with an icon and a link. Clicking on this card brings you to the Columns page.
</Card>
```

## Grouping cards

Use the [Columns component](/components/columns) to organize multiple cards side by side.

<Columns cols={2}>
  <Card title="First card" icon="panel-left-close">
    This is the first card.
  </Card>

  <Card title="Second card" icon="panel-right-close">
    This is the second card.
  </Card>
</Columns>

```mdx Columns example
<Columns cols={2}>
  <Card title="First card" icon="panel-left-close">
    This is the first card.
  </Card>
  <Card title="Second card" icon="panel-right-close">
    This is the second card.
  </Card>
</Columns>
```

## Properties

<ResponseField name="title" type="string" required>
  The title displayed on the card
</ResponseField>

<ResponseField name="icon" type="string">
  The icon to display.

  Options:

  * [Font Awesome icon](https://fontawesome.com/icons) name
  * [Lucide icon](https://lucide.dev/icons) name
  * JSX-compatible SVG code wrapped in curly braces
  * URL to an externally hosted icon
  * Path to an icon file in your project

  For custom SVG icons:

  1. Convert your SVG using the [SVGR converter](https://react-svgr.com/playground/).
  2. Paste your SVG code into the SVG input field.
  3. Copy the complete `<svg>...</svg>` element from the JSX output field.
  4. Wrap the JSX-compatible SVG code in curly braces: `icon={<svg ...> ... </svg>}`.
  5. Adjust `height` and `width` as needed.
</ResponseField>

<ResponseField name="iconType" type="string">
  The [Font Awesome](https://fontawesome.com/icons) icon style. Only used with Font Awesome icons.

  Options: `regular`, `solid`, `light`, `thin`, `sharp-solid`, `duotone`, `brands`.
</ResponseField>

<ResponseField name="color" type="string">
  Icon color as a hex code (e.g., `#FF6B6B`).
</ResponseField>

<ResponseField name="href" type="string">
  URL to navigate to when the card is clicked.
</ResponseField>

<ResponseField name="horizontal" type="boolean">
  Display the card in a compact horizontal layout.
</ResponseField>

<ResponseField name="img" type="string">
  URL or local path to an image displayed at the top of the card.
</ResponseField>

<ResponseField name="cta" type="string">
  Custom text for the action button.
</ResponseField>

<ResponseField name="arrow" type="boolean">
  Show or hide the link arrow icon.
</ResponseField>


# Code groups
Source: https://mintlify.com/docs/components/code-groups

Display multiple code examples in one component

Use the `CodeGroup` component to display multiple code blocks in a tabbed interface, allowing users to compare implementations across different programming languages or see alternative approaches for the same task.

<CodeGroup>
  ```javascript helloWorld.js
  console.log("Hello World");
  ```

  ```python hello_world.py
  print('Hello World!')
  ```

  ```java HelloWorld.java
  class HelloWorld {
      public static void main(String[] args) {
          System.out.println("Hello, World!");
      }
  }
  ```
</CodeGroup>

## Creating code groups

To create a code group, wrap multiple code blocks with `<CodeGroup>` tags. Each code block must include a title, which becomes the tab label.

````mdx
<CodeGroup>

```javascript helloWorld.js
console.log("Hello World");
```

```python hello_world.py
print('Hello World!')
```

```java HelloWorld.java
class HelloWorld {
    public static void main(String[] args) {
        System.out.println("Hello, World!");
    }
}
```

</CodeGroup>
````

## Language dropdown

You can replace the tabs in a code group with a dropdown menu to toggle between languages using the `dropdown` prop.

<CodeGroup dropdown>
  ```javascript helloWorld.js
  console.log("Hello World");
  ```

  ```python hello_world.py
  print('Hello World!')
  ```

  ```java HelloWorld.java
  class HelloWorld {
      public static void main(String[] args) {
          System.out.println("Hello, World!");
      }
  }
  ```
</CodeGroup>

````mdx highlight=1
<CodeGroup dropdown>

```javascript helloWorld.js
console.log("Hello World");
```

```python hello_world.py
print('Hello World!')
```

```java HelloWorld.java
class HelloWorld {
    public static void main(String[] args) {
        System.out.println("Hello, World!");
    }
}
```
</CodeGroup>
````


# Columns
Source: https://mintlify.com/docs/components/columns

Show cards side by side in a grid format

The `Columns` component lets you group multiple `Card` components together. It's most often used to put multiple cards in a grid, by specifying the number of grid columns.

<Columns cols={2}>
  <Card title="First Card" icon="panel-left-close">
    Neque porro quisquam est qui dolorem ipsum quia dolor sit amet
  </Card>

  <Card title="Second Card" icon="panel-right-close">
    Lorem ipsum dolor sit amet, consectetur adipiscing elit
  </Card>
</Columns>

<RequestExample>
  ```mdx Card Group Example
  <Columns cols={2}>
    <Card title="First Card">
      Neque porro quisquam est qui dolorem ipsum quia dolor sit amet
    </Card>
    <Card title="Second Card">
      Lorem ipsum dolor sit amet, consectetur adipiscing elit
    </Card>
  </Columns>
  ```
</RequestExample>

### Props

<ResponseField name="cols" default={2}>
  The number of columns per row
</ResponseField>


# Examples
Source: https://mintlify.com/docs/components/examples

Display code blocks in the right sidebar on desktop devices

The `<RequestExample>` and `<ResponseExample>` components display code blocks in the right sidebar to create a two-column layout that keeps examples visible while users scroll through your content. These components are designed for API documentation, but they work on all pages.

Common use cases:

* API endpoint documentation with request and response examples
* Configuration examples alongside explanatory text
* Code samples that users reference while following instructions
* Before and after examples in tutorials

On mobile devices, `<RequestExample>` and `<ResponseExample>` components display as regular code blocks and can be scrolled past.

## RequestExample

Use `<RequestExample>` to pins code examples in the right sidebar. This component works similarly to the [CodeGroup](/components/code-groups) component, but displays the code in the sidebar instead of inline.

You can include multiple code blocks inside a single `<RequestExample>`. Each code block must have a title attribute.

````mdx RequestExample
<RequestExample>

```bash Request
  curl --request POST \
    --url https://dog-api.kinduff.com/api/facts
```

</RequestExample>
````

## ResponseExample

The `<ResponseExample>` component pins code examples in the right sidebar beneath any `<RequestExample>` content on the same page.

````mdx ResponseExample
<ResponseExample>

```json Response
{ "status": "success" }
```

</ResponseExample>
````


# Expandables
Source: https://mintlify.com/docs/components/expandables

Toggle to display nested properties

Use expandables to show and hide nested content within response fields. Expandables are particularly useful for displaying complex object properties in API documentation.

<ResponseField name="user" type="User Object">
  <Expandable title="properties">
    <ResponseField name="full_name" type="string">
      The full name of the user
    </ResponseField>

    <ResponseField name="is_over_21" type="boolean">
      Whether the user is over 21 years old
    </ResponseField>
  </Expandable>
</ResponseField>

```mdx Expandable example
<ResponseField name="user" type="User Object">
  <Expandable title="properties">
    <ResponseField name="full_name" type="string">
      The full name of the user
    </ResponseField>

    <ResponseField name="is_over_21" type="boolean">
      Whether the user is over 21 years old
    </ResponseField>
  </Expandable>
</ResponseField>
```

## Properties

<ResponseField name="title" type="string">
  The name of the object you are showing.
</ResponseField>

<ResponseField name="defaultOpen" type="boolean" default="false">
  Set to `true` for the expandable to open when the page loads
</ResponseField>


# Fields
Source: https://mintlify.com/docs/components/fields

Set parameters for your API or SDK references

Use fields to document API parameters and responses. There are two types of fields: parameter fields and response fields.

## Parameter field

The `<ParamField>` component is used to define parameters for your APIs or SDKs. Adding a `ParamField` automatically adds an [API Playground](/api-playground/overview).

<ParamField path="param" type="string" required>
  An example of a parameter field
</ParamField>

```mdx
<ParamField path="param" type="string" required>
  An example of a parameter field
</ParamField>
```

### Properties

<ParamField body="query, path, body, or header" type="string">
  Whether the parameter is a query, path, body, or header. Followed by the
  parameter name.
</ParamField>

<ParamField body="type" type="string">
  Expected type of the parameter's value.

  Supports `number`, `string`, `boolean`, `object`.

  Arrays can be defined using the `[]` suffix. For example `string[]`.
</ParamField>

<ParamField body="required" type="boolean">
  Indicate whether the parameter is required.
</ParamField>

<ParamField body="deprecated" type="boolean">
  Indicate whether the parameter is deprecated.
</ParamField>

<ParamField body="default" type="any">
  Default value populated when the request value is empty
</ParamField>

<ParamField body="placeholder" type="string">
  Placeholder text for the input in the playground.
</ParamField>

<ParamField body="children" type="string">
  Description of the parameter (Markdown-enabled).
</ParamField>

## Response field

The `<ResponseField>` component defines the return values of an API.

<ResponseField name="response" type="string" required>
  An example of a response field
</ResponseField>

```mdx
<ResponseField name="response" type="string" required>
  A response field example
</ResponseField>
```

### Properties

<ResponseField name="name" type="string" required>
  The name of the response value.
</ResponseField>

<ResponseField name="type" type="string" required>
  Expected type of the response value. This can be any arbitrary string.
</ResponseField>

<ResponseField name="default" type="string">
  The default value.
</ResponseField>

<ResponseField name="required" type="boolean">
  Indicate whether the response is required.
</ResponseField>

<ResponseField name="deprecated" type="boolean">
  Whether a field is deprecated.
</ResponseField>

<ResponseField name="pre" type="string[]">
  Labels that are shown before the name of the field.
</ResponseField>

<ResponseField name="post" type="string[]">
  Labels that are shown after the name of the field.
</ResponseField>


# Frames
Source: https://mintlify.com/docs/components/frames

Use the Frame component to wrap images or other components in a container.

Frames are very helpful if you want to center an image.

<Frame>
  <img src="https://mintlify-assets.b-cdn.net/yellowstone.jpeg" />
</Frame>

## Captions

You can add additional context to an image using the optional `caption` prop.

<Frame caption="Yosemite National Park is visited by over 3.5 million people every year">
  <img src="https://mintlify-assets.b-cdn.net/yosemite.jpg" />
</Frame>

## Props

<ResponseField name="caption" type="string">
  Optional caption text to show centered under your component.
</ResponseField>

<RequestExample>
  ```mdx Frame
  <Frame>
    <img src="/path/image.jpg" />
  </Frame>
  ```

  ```mdx Frame with Captions
  <Frame caption="Caption Text">
    <img src="/path/image.jpg" />
  </Frame>
  ```
</RequestExample>


# Icons
Source: https://mintlify.com/docs/components/icons

Use icons from popular icon libraries

Use icons from Font Awesome, Lucide, SVGs, external URLs, or files in your project to enhance your documentation.

<Icon icon="flag" size={32} />

```mdx Icon example
<Icon icon="flag" size={32} />
```

## Inline icons

Icons are placed inline when used within a paragraph.

<Icon icon="flag" iconType="solid" /> The documentation you want, effortlessly.

```markdown Inline icon example
<Icon icon="flag" iconType="solid" /> The documentation you want, effortlessly.
```

## Properties

<ResponseField name="icon" type="string" required>
  The icon to display.

  Options:

  * [Font Awesome icon](https://fontawesome.com/icons) name
  * [Lucide icon](https://lucide.dev/icons) name
  * JSX-compatible SVG code wrapped in curly braces
  * URL to an externally hosted icon
  * Path to an icon file in your project

  For custom SVG icons:

  1. Convert your SVG using the [SVGR converter](https://react-svgr.com/playground/).
  2. Paste your SVG code into the SVG input field.
  3. Copy the complete `<svg>...</svg>` element from the JSX output field.
  4. Wrap the JSX-compatible SVG code in curly braces: `icon={<svg ...> ... </svg>}`.
  5. Adjust `height` and `width` as needed.
</ResponseField>

<ResponseField name="iconType" type="string">
  The [Font Awesome](https://fontawesome.com/icons) icon style. Only used with Font Awesome icons.

  Options: `regular`, `solid`, `light`, `thin`, `sharp-solid`, `duotone`, `brands`.
</ResponseField>

<ResponseField name="color" type="string">
  The color of the icon as a hex code (for example, `#FF5733`).
</ResponseField>

<ResponseField name="size" type="number">
  The size of the icon in pixels.
</ResponseField>


# Mermaid
Source: https://mintlify.com/docs/components/mermaid-diagrams

Display diagrams using Mermaid

[Mermaid](https://mermaid.js.org/) lets you build flowcharts, sequence diagrams, Gantt charts, and other diagrams using text and code.

For a complete list of supported diagram types and syntax, see the [Mermaid documentation](https://mermaid.js.org/intro/).

<RequestExample>
  ````mdx Mermaid flowchart example
  ```mermaid
    flowchart LR
      subgraph subgraph1
          direction TB
          top1[top] --> bottom1[bottom]
      end
      subgraph subgraph2
          direction TB
          top2[top] --> bottom2[bottom]
      end
      %% ^ These subgraphs are identical, except for the links to them:

      %% Link *to* subgraph1: subgraph1 direction is maintained
      outside --> subgraph1
      %% Link *within* subgraph2:
      %% subgraph2 inherits the direction of the top-level graph (LR)
      outside ---> top2
  ```
  ````
</RequestExample>

```mermaid
  flowchart LR
    subgraph subgraph1
        direction TB
        top1[top] --> bottom1[bottom]
    end
    subgraph subgraph2
        direction TB
        top2[top] --> bottom2[bottom]
    end
    %% ^ These subgraphs are identical, except for the links to them:

    %% Link *to* subgraph1: subgraph1 direction is maintained
    outside --> subgraph1
    %% Link *within* subgraph2:
    %% subgraph2 inherits the direction of the top-level graph (LR)
    outside ---> top2
```

## Syntax

To create a Mermaid diagram, write your diagram definition inside a Mermaid code block.

````mdx
```mermaid
// Your mermaid diagram code here
```
````


# Panel
Source: https://mintlify.com/docs/components/panel

Specify the content of the right side panel

You can use the `<Panel>` component to customize the right side panel of a page with any components that you want.

If a page has a `<Panel>` component, any [RequestExample](/components/examples#request-example) and [ResponseExample](/components/examples#response-example) components must be inside `<Panel>`.

The components in a `<Panel>` will replace a page's table of contents.

```mdx
<Panel>
  <Info>Pin info to the side panel. Or add any other component.</Info>
</Panel>
```

<Panel>
  <Info>Pin info to the side panel. Or add any other component.</Info>
</Panel>


# Steps
Source: https://mintlify.com/docs/components/steps

Sequence content using the Steps component

Use steps to display a series of sequential actions or events. You can add as many steps as needed.

<Steps>
  <Step title="First Step">
    These are instructions or content that only pertain to the first step.
  </Step>

  <Step title="Second Step">
    These are instructions or content that only pertain to the second step.
  </Step>

  <Step title="Third Step">
    These are instructions or content that only pertain to the third step.
  </Step>
</Steps>

```mdx Steps example
<Steps>
  <Step title="First Step">
    These are instructions or content that only pertain to the first step.
  </Step>
  <Step title="Second Step">
    These are instructions or content that only pertain to the second step.
  </Step>
  <Step title="Third Step">
    These are instructions or content that only pertain to the third step.
  </Step>
</Steps>
```

## Steps properties

<ResponseField name="children" type="ReactElement<StepProps>[]" required>
  A list of `Step` components.
</ResponseField>

<ResponseField name="titleSize" type="string" default="p">
  The size of the step titles. One of `p`, `h2`, and `h3`.
</ResponseField>

## Individual step properties

<ResponseField name="children" type="string | ReactNode" required>
  The content of a step either as plain text or components.
</ResponseField>

<ResponseField name="icon" type="string">
  The icon to display.

  Options:

  * [Font Awesome icon](https://fontawesome.com/icons) name
  * [Lucide icon](https://lucide.dev/icons) name
  * JSX-compatible SVG code wrapped in curly braces
  * URL to an externally hosted icon
  * Path to an icon file in your project

  For custom SVG icons:

  1. Convert your SVG using the [SVGR converter](https://react-svgr.com/playground/).
  2. Paste your SVG code into the SVG input field.
  3. Copy the complete `<svg>...</svg>` element from the JSX output field.
  4. Wrap the JSX-compatible SVG code in curly braces: `icon={<svg ...> ... </svg>}`.
  5. Adjust `height` and `width` as needed.
</ResponseField>

<ResponseField name="iconType" type="string">
  The [Font Awesome](https://fontawesome.com/icons) icon style. Only used with Font Awesome icons.

  Options: `regular`, `solid`, `light`, `thin`, `sharp-solid`, `duotone`, `brands`.
</ResponseField>

<ResponseField name="title" type="string">
  The title is the primary text for the step and shows up next to the indicator.
</ResponseField>

<ResponseField name="stepNumber" type="number">
  The number of the step.
</ResponseField>

<ResponseField name="titleSize" type="string" default="p">
  The size of the step titles. One of `p`, `h2`, and `h3`.
</ResponseField>


# Tabs
Source: https://mintlify.com/docs/components/tabs

Toggle content using the Tabs component

Use tabs to organize content into multiple panels that users can switch between. You can add any number of tabs and include other components inside each tab.

<Tabs>
  <Tab title="First tab">
    ☝️ Welcome to the content that you can only see inside the first tab.

    You can add any number of components inside of tabs. For example, a code block:

    ```java HelloWorld.java
      class HelloWorld {
          public static void main(String[] args) {
              System.out.println("Hello, World!");
          }
      }
    ```
  </Tab>

  <Tab title="Second tab" icon="leaf">
    ✌️ Here's content that's only inside the second tab.

    This one has a <Icon icon="leaf" /> icon!
  </Tab>

  <Tab title="Third tab">
    💪 Here's content that's only inside the third tab.
  </Tab>
</Tabs>

````mdx Tabs example
<Tabs>
  <Tab title="First tab">
    ☝️ Welcome to the content that you can only see inside the first tab.

    You can add any number of components inside of tabs. For example, a code block:
    ```java HelloWorld.java
      class HelloWorld {
          public static void main(String[] args) {
              System.out.println("Hello, World!");
          }
      }
    ```
  </Tab>
  <Tab title="Second tab" icon="leaf">
    ✌️ Here's content that's only inside the second tab.

    This one has a <Icon icon="leaf" /> icon!
  </Tab>
  <Tab title="Third tab">
    💪 Here's content that's only inside the third tab.
  </Tab>
</Tabs>
````

## Properties

<ResponseField name="title" type="string" required>
  The title of the tab. Short titles are easier to navigate.
</ResponseField>

<ResponseField name="icon" type="string">
  A [Font Awesome](https://fontawesome.com/icons) icon, [Lucide](https://lucide.dev/icons) icon, URL to an icon, or relative path to an icon.
</ResponseField>

<ResponseField name="iconType" type="string">
  For Font Awesome icons only: One of `regular`, `solid`, `light`, `thin`, `sharp-solid`, `duotone`, `brands`.
</ResponseField>


# Tooltips
Source: https://mintlify.com/docs/components/tooltips

Show a definition when you hover over text

Tooltips are a way to show a definition when you hover over text.

<Tooltip tip="This is a tooltip!">Hover over me</Tooltip> and see a tooltip in action

<RequestExample>
  ```mdx Tooltip Example
  <Tooltip tip="This is a tooltip!">Hover over me</Tooltip>
  ```
</RequestExample>


# Update
Source: https://mintlify.com/docs/components/update

Keep track of changes and updates

Use the `Update` component to display changelog entries, version updates, and release notes with consistent formatting.

<Update label="Example" description="v0.1.1">
  ## Example update

  You can add anything here, like a screenshot, a code snippet, or a list of changes.

  <Frame>
    <img className="block" src="https://mintlify-assets.b-cdn.net/hero-light.png" alt="" />
  </Frame>

  ### Features

  * Responsive design
  * Anchor for each update
  * Generated RSS feed entry for each update
</Update>

## How to use

```mdx Update example
<Update label="2024-10-11" description="v0.1.0" tags={["Mintlify"]}>
  This is an update with a label, description, and tag.
</Update>
```

Use multiple `Update` components to create [changelogs](/guides/changelogs).

## Props

<ResponseField name="label" type="string" required>
  Label for the update. Appears to the left of the update and creates an anchor link. Labels should be unique.
</ResponseField>

<ResponseField name="tags" type="string[]">
  Tags for the update. Shown as filters in the right side panel.
</ResponseField>

<ResponseField name="description" type="string">
  Description of the update. Appears below the label and tag.
</ResponseField>


# Contact support
Source: https://mintlify.com/docs/contact-support

We're here to help you get the most out of Mintlify

## Ask our docs

Select <kbd>Command</kbd> + <kbd>I</kbd> to start a chat with our AI assistant trained on our documentation.

## Watch video tutorials

Visit our [YouTube](https://www.youtube.com/@GetMintlify/videos) channel for tutorials and guides on using Mintlify.

## Message support

Send us a message from your [dashboard](https://dashboard.mintlify.com/) by selecting **Support** in the sidebar.

<Info>
  We aim to respond to all requests within 24 hours, but delays may occur during busy times.
</Info>

## Email support

If you can't access your dashboard, please email us at <a href="mailto:support@mintlify.com">[support@mintlify.com](mailto:support@mintlify.com)</a>.


# Web editor
Source: https://mintlify.com/docs/editor

Build your documentation using the Mintlify web editor

<img className="block dark:hidden my-0 pointer-events-none" src="https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/editor-light.png?maxW=1184&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=15cc84a64f2fd887fe4ee520af3d0673" alt="Mintlify web editor interface in light mode" width="1184" height="320" data-path="images/editor/editor-light.png" srcset="https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/editor-light.png?w=280&maxW=1184&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=14de57e5f8ebac2f7d4d165f076e9d24 280w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/editor-light.png?w=560&maxW=1184&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=d5c923176939a3639b7558f4d4089deb 560w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/editor-light.png?w=840&maxW=1184&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=9f4207724c3e5c72c946a1b2df57b1e2 840w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/editor-light.png?w=1100&maxW=1184&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=978bff617c6f79c5c517156010bda771 1100w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/editor-light.png?w=1650&maxW=1184&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=5c367cccfb99089e0f886fbabf875ccb 1650w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/editor-light.png?w=2500&maxW=1184&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=e5a0302a37301fed7a5c78fc585ec1bf 2500w" data-optimize="true" data-opv="2" />

<img className="hidden dark:block my-0 pointer-events-none" src="https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/editor-dark.png?maxW=1184&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=e94338f732f982fee7677ed6ba67d1c0" alt="Mintlify web editor interface in dark mode" width="1184" height="320" data-path="images/editor/editor-dark.png" srcset="https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/editor-dark.png?w=280&maxW=1184&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=f19b0a2a8e3ace51820637d55a9308c0 280w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/editor-dark.png?w=560&maxW=1184&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=1f3013279e92ad2f4c72500b86375c94 560w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/editor-dark.png?w=840&maxW=1184&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=809e084ac50beca5b0c423f11ace7dc3 840w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/editor-dark.png?w=1100&maxW=1184&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=0cfcbb28dceafe3732f1f361dd858d70 1100w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/editor-dark.png?w=1650&maxW=1184&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=2190030dd293bb4a3193d8d1512af692 1650w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/editor-dark.png?w=2500&maxW=1184&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=e5e0de0ec7f29cc517aaa7a450bd615f 2500w" data-optimize="true" data-opv="2" />

## Introduction

The web editor is a visual interface for creating, editing, and reviewing documentation directly in your browser.

* **Visual editing**: Make changes to your documentation using a what-you-see-is-what-you-get (WYSIWYG) editor that shows how your content will look when published.
* **Git synchronization**: All changes automatically sync with your Git repository to maintain version control.
* **Real-time collaboration**: Multiple team members can work on documentation simultaneously, with changes visible to everyone.
* **No setup required**: Start writing immediately from your dashboard.

### Web editor flow

Here is how you'll typically work in the web editor:

<Steps>
  <Step title="Choose your branch">
    Create a branch or make changes directly to your deployment branch.
  </Step>

  <Step title="Open your file">
    Navigate to an existing file or create a new one.
  </Step>

  <Step title="Edit your content">
    Make changes in the web editor using either visual mode or Markdown mode.
  </Step>

  <Step title="Preview your changes">
    See how your changes will appear in visual mode.
  </Step>

  <Step title="Publish your changes">
    If you're working on your deployment branch, publish your changes directly from the web editor. On other branches, publish your changes through a pull request.
  </Step>
</Steps>

## Editor modes

The web editor has two modes to accommodate different editing preferences and needs.

You can switch between modes at any time using the toggle in the top right corner of the editor toolbar.

<Frame>
  <img src="https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/mode-toggle-light.png?maxW=3024&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=dfc4a89cc99b57860b8f7109ce64fbd6" alt="Mode toggle icons highlighted in the Mintlify web editor" className="block dark:hidden" width="3024" height="1216" data-path="images/editor/mode-toggle-light.png" srcset="https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/mode-toggle-light.png?w=280&maxW=3024&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=df327c2be72acf734d5baaec3ee35c37 280w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/mode-toggle-light.png?w=560&maxW=3024&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=92e648d0897c1b757b5fc44145af4637 560w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/mode-toggle-light.png?w=840&maxW=3024&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=2de13efe10cf9f58623a9ebbf6c92756 840w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/mode-toggle-light.png?w=1100&maxW=3024&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=6a4299396ebd0f18abb66db8fb605f8d 1100w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/mode-toggle-light.png?w=1650&maxW=3024&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=d8d5c8ea7103584b1c226ccad222e070 1650w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/mode-toggle-light.png?w=2500&maxW=3024&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=cfa1667c603d86243488e308cef73177 2500w" data-optimize="true" data-opv="2" />

  <img src="https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/mode-toggle-dark.png?maxW=3016&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=a603b7a558ff532ceb993c6de108099f" alt="Mode toggle icons highlighted in the Mintlify web editor" className="hidden dark:block" width="3016" height="1212" data-path="images/editor/mode-toggle-dark.png" srcset="https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/mode-toggle-dark.png?w=280&maxW=3016&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=794d07eef4710b98a7679d3fb321d7e9 280w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/mode-toggle-dark.png?w=560&maxW=3016&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=ff9459ce085fe9645a26283f2b49abf0 560w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/mode-toggle-dark.png?w=840&maxW=3016&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=70db82dacd4e88e42aa1c9e3ca30d755 840w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/mode-toggle-dark.png?w=1100&maxW=3016&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=4f2dec0244e6a60aeedf199be52ed559 1100w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/mode-toggle-dark.png?w=1650&maxW=3016&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=ba7840d5e2fbc0d1560a43e72c9d1d59 1650w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/mode-toggle-dark.png?w=2500&maxW=3016&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=8574cb6d1e6d357b04a9b4df822640d6 2500w" data-optimize="true" data-opv="2" />
</Frame>

### Visual mode

Visual mode provides a WYSIWYG experience where the changes that you make in the editor are the changes that will be published to your documentation site. This mode is ideal for when you want to see how your changes will look in real-time.

<Frame>
  <img src="https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/visual-mode-light.png?maxW=3024&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=bd223e6c909d66c8a7a9468dfa0de29d" alt="Visual editing mode in the Mintlify web editor" className="block dark:hidden" width="3024" height="1232" data-path="images/editor/visual-mode-light.png" srcset="https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/visual-mode-light.png?w=280&maxW=3024&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=2c8b3ff46b482797b7b3854e4a565867 280w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/visual-mode-light.png?w=560&maxW=3024&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=34e121fb65e04c21ce99dcd58e516607 560w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/visual-mode-light.png?w=840&maxW=3024&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=77e9554c7a42d1d32b668536a24fe435 840w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/visual-mode-light.png?w=1100&maxW=3024&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=d2335482ed9adf789a2a6d596fc1856e 1100w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/visual-mode-light.png?w=1650&maxW=3024&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=9a2495939c1bf02c997f02346eedad00 1650w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/visual-mode-light.png?w=2500&maxW=3024&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=0d8987f9fb53cc780e7c150454ee1802 2500w" data-optimize="true" data-opv="2" />

  <img src="https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/visual-mode-dark.png?maxW=3018&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=5e7641593cb4d491ba98f11b734f7e77" alt="Visual editing mode in the Mintlify web editor" className="hidden dark:block" width="3018" height="1226" data-path="images/editor/visual-mode-dark.png" srcset="https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/visual-mode-dark.png?w=280&maxW=3018&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=5ac8a3d7028178e4938e000ec38ea64b 280w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/visual-mode-dark.png?w=560&maxW=3018&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=9dd619666b7454d5d543f3454fd9a2dd 560w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/visual-mode-dark.png?w=840&maxW=3018&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=31413d118c250ca4d639eba1f2838a5f 840w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/visual-mode-dark.png?w=1100&maxW=3018&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=d8bfbb53b5c9fccfec4d5436bbadfb01 1100w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/visual-mode-dark.png?w=1650&maxW=3018&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=42765571210836b42f680583e9336e5e 1650w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/visual-mode-dark.png?w=2500&maxW=3018&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=6b5a661d8965fc5c8eb53a8aba8ce00c 2500w" data-optimize="true" data-opv="2" />
</Frame>

### Markdown mode

Markdown mode provides direct access to the underlying `MDX` code of your documentation. `MDX` combines Markdown syntax with React components, giving you full control over your content structure. This mode is ideal for when you need precise control over component properties or when you prefer to write in Markdown syntax.

<Frame>
  <img src="https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/markdown-mode-light.png?maxW=3024&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=f03a87e2255b0a7e6d87a0ddf044953c" alt="Markdown mode in the Mintlify web editor" className="block dark:hidden" width="3024" height="1248" data-path="images/editor/markdown-mode-light.png" srcset="https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/markdown-mode-light.png?w=280&maxW=3024&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=0967adf96faa220250f0bb5b05ceb806 280w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/markdown-mode-light.png?w=560&maxW=3024&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=939b249037299cfd6d4bb431a41b3572 560w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/markdown-mode-light.png?w=840&maxW=3024&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=4010b9d06d7770f6d8d1a416ebbe72a4 840w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/markdown-mode-light.png?w=1100&maxW=3024&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=709181da9c2ea9deeddd5496caaa1ede 1100w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/markdown-mode-light.png?w=1650&maxW=3024&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=2684a321e230538510ed1af44eec4ab3 1650w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/markdown-mode-light.png?w=2500&maxW=3024&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=1cac458075f41c880113e1229fb69eee 2500w" data-optimize="true" data-opv="2" />

  <img src="https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/markdown-mode-dark.png?maxW=3016&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=b9281dc5cf9fe0af59bf489eac0d8c2b" alt="Markdown mode in the Mintlify Web Editor" className="hidden dark:block" width="3016" height="1246" data-path="images/editor/markdown-mode-dark.png" srcset="https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/markdown-mode-dark.png?w=280&maxW=3016&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=84100f59a00994d243b9b1828170c774 280w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/markdown-mode-dark.png?w=560&maxW=3016&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=a7bd19debd513e37d42f6e327ac1fe4f 560w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/markdown-mode-dark.png?w=840&maxW=3016&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=28e31eda5d3fc04478ccff1282b4edee 840w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/markdown-mode-dark.png?w=1100&maxW=3016&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=6ce7fb4d01c1da73a7ba04cce1f72163 1100w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/markdown-mode-dark.png?w=1650&maxW=3016&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=b80cf4979029d0f5ce575ce807532b1d 1650w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/markdown-mode-dark.png?w=2500&maxW=3016&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=7d85c4953af426a8a3e6f34ae84bac83 2500w" data-optimize="true" data-opv="2" />
</Frame>

## Git fundamentals

The web editor performs Git operations behind the scenes. Understanding these concepts will help you work more effectively with the web editor and collaborate with team members who are working in their local environments.

<AccordionGroup>
  <Accordion title="Repository">
    Your documentation's source where all files and their history are stored. The web editor connects to your repository to access and modify content.
  </Accordion>

  <Accordion title="Commit">
    A saved snapshot of your changes at a specific point in time.
  </Accordion>

  <Accordion title="Branch">
    A separate workspace for making changes without affecting your live documentation. Think of it as a safe sandbox for experiments and larger updates.
  </Accordion>

  <Accordion title="Deployment branch">
    The main branch that contains your live documentation content. Changes to this branch are automatically published to your documentation site. Often called `main`.
  </Accordion>

  <Accordion title="Pull request">
    A way to propose merging your branch changes into your live documentation. Allows for review and discussion before changes go live. Commonly called a PR.
  </Accordion>

  <Accordion title="Diff">
    A diff (or difference) shows the specific changes between two versions of a file. When reviewing pull requests, diffs highlight what has been added, removed, or modified.
  </Accordion>
</AccordionGroup>

### What the web editor automates

The web editor connects to your Git repository through our [GitHub App](/settings/github) or [GitLab integration](/settings/gitlab) and handles Git automatically. When you:

* **Open a file**: Fetches the latest version from your repository.
* **Make changes in a file**: Tracks your changes as a draft that can become a commit.
* **Save changes**: Creates a commit with your changes.
* **Create a branch**: Creates a new branch in your repository.
* **Publish on your deployment branch**: Creates a commit and pushes directly to your deployment branch.
* **Publish on other branches**: Creates a commit and opens a pull request.

### When to use branches

Branches let you work on changes without affecting the content on your live site. When your changes are ready, you can merge them into your deployment branch with a pull request.

**Best practice: Always work from branches.** This ensures your live documentation stays stable and enables proper review workflows.

## Creating a branch

1. Select the branch name in the editor toolbar (usually `main` by default).
2. Select **New Branch**.
3. Enter a descriptive name for your branch like `update-getting-started` or `fix-installation-steps`.
4. Select **Create Branch**.

<Note>
  You may need to select your new branch from the dropdown menu if the editor does not automatically switch to it.
</Note>

### Saving changes on a branch

To save your changes on a branch, select the **Save Changes** button in the top-right corner of the editor. This creates a commit with your changes and pushes it to your branch.

### Switching branches

1. Select the current branch name in the editor toolbar.
2. Select the branch you want to switch to from the dropdown menu.

<Tip>
  Any unsaved changes will be lost when switching branches. Make sure to save or publish your work before switching.
</Tip>

## Making changes

Edit existing content, create new pages, and organize your site structure in the web editor.

### Navigating files

Use the sidebar file explorer to browse your documentation, or press <kbd>Command</kbd> + <kbd>P</kbd> (<kbd>Ctrl</kbd> + <kbd>P</kbd> on Windows) to search for files.

### Editing content

Make changes to your pages using visual mode or Markdown mode.

In visual mode, press <kbd>/</kbd> to open the dropdown component menu. Add content blocks, callouts, code blocks and other components to customize your documentation.

<Frame>
  <img src="https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/component-menu-light.png?maxW=3024&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=f3494404e5d3921d700d05f3ca23ae9e" alt="The unfurled component menu emphasized in the Mintlify web editor" className="block dark:hidden" width="3024" height="1592" data-path="images/editor/component-menu-light.png" srcset="https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/component-menu-light.png?w=280&maxW=3024&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=04180d88511e6436656a6c05cea7c6ac 280w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/component-menu-light.png?w=560&maxW=3024&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=bff5ba8f38e803f10821c230089a49f2 560w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/component-menu-light.png?w=840&maxW=3024&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=01fc2901b5aae0383146895e4876954a 840w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/component-menu-light.png?w=1100&maxW=3024&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=dc814aa2c25138db981f84e056e86159 1100w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/component-menu-light.png?w=1650&maxW=3024&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=8cb0b2a1110a57b6b45bbcfde0666b70 1650w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/component-menu-light.png?w=2500&maxW=3024&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=a6963a4093a99d288627ecd361e1d2e8 2500w" data-optimize="true" data-opv="2" />

  <img src="https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/component-menu-dark.png?maxW=3018&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=ea374673fc9df28abf75e6100431be5b" alt="The unfurled component menu emphasized in the Mintlify web editor" className="hidden dark:block" width="3018" height="1592" data-path="images/editor/component-menu-dark.png" srcset="https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/component-menu-dark.png?w=280&maxW=3018&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=d318f3ffac7b2a2fdfaae9821f4235c4 280w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/component-menu-dark.png?w=560&maxW=3018&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=fa0f66a153e67d6f02c819746cfb43d5 560w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/component-menu-dark.png?w=840&maxW=3018&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=5e4fec8a9d170b344fbe04da0867f469 840w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/component-menu-dark.png?w=1100&maxW=3018&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=437d4e1ca6252f8d49f0ac486004e903 1100w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/component-menu-dark.png?w=1650&maxW=3018&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=41bea709f575fe60b5f48a9226a27fc7 1650w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/component-menu-dark.png?w=2500&maxW=3018&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=174ad1c2cb6d84a8f7a609fcbf13b0bb 2500w" data-optimize="true" data-opv="2" />
</Frame>

### Creating new pages

1. Select the **Create a new file** icon in the file explorer.
   <img
     src="https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/files-menu-light.png?maxW=688&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=f1e5f95cbf61e53e9bbf8029b3089f20"
     className="block dark:hidden rounded-2xl border border-gray-100 shadow-lg"
     style={{
    width: '268px',
    height: 'auto',
   }}
     alt="Files menu in the web editor."
     width="688"
     height="130"
     data-path="images/editor/files-menu-light.png"
     srcset="https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/files-menu-light.png?w=280&maxW=688&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=34d085811af1d74b7d73f28a4e85df9b 280w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/files-menu-light.png?w=560&maxW=688&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=017001f5f04fe4024067a05f2459a169 560w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/files-menu-light.png?w=840&maxW=688&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=d4cbe637539ece42ab6bfe919a3cad27 840w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/files-menu-light.png?w=1100&maxW=688&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=441d203706e01972125d435a70bb277f 1100w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/files-menu-light.png?w=1650&maxW=688&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=4b9438e90f55f95ed03ca18ea89c274d 1650w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/files-menu-light.png?w=2500&maxW=688&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=7be7e160a32055f08759ceb8ec2e2846 2500w"
     data-optimize="true"
     data-opv="2"
   />

<img
  src="https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/files-menu-dark.png?maxW=690&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=94f32b9543a6c34153a33143048a4dee"
  className="hidden dark:block rounded-2xl border border-white/10 shadow-lg"
  style={{
    width: '268px',
    height: 'auto',
  }}
  alt="Files menu in the web editor in dark mode."
  width="690"
  height="132"
  data-path="images/editor/files-menu-dark.png"
  srcset="https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/files-menu-dark.png?w=280&maxW=690&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=eb4170587156aee867632d571e562862 280w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/files-menu-dark.png?w=560&maxW=690&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=b6b874b389aab2b9172c553a712a3b1a 560w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/files-menu-dark.png?w=840&maxW=690&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=bc5b29e695a4e21be958644070141c07 840w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/files-menu-dark.png?w=1100&maxW=690&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=47216664b31c2445a5208365b4610276 1100w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/files-menu-dark.png?w=1650&maxW=690&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=2c00482e3795a4b2259042c9bcdf74e9 1650w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/files-menu-dark.png?w=2500&maxW=690&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=c7f01d4e854278af512cf929afef9010 2500w"
  data-optimize="true"
  data-opv="2"
/>

1. Enter a filename.
2. Press <kbd>Enter</kbd> to create the file.

Your new page will open in the editor, ready for content to be added.

### Updating navigation

Add, remove, and reorder pages in your navigation by editing your `docs.json` file:

1. Navigate to your `docs.json` in the file explorer.
2. Update the `navigation` property to get the navigation structure that you want. See [Navigation](/navigation) for more information.

This example shows how to add a Themes page to the Profile group.

```json title="Adding a Themes page" highlight="18"
{
    "navigation": {
        "groups": [
            {
                "group": "Getting started",
                "pages": [
                    "index",
                    "quickstart",
                    "installation"
                ]
            },
            {
                "group": "Profile",
                "pages": [
                    "settings",
                    "account-types",
                    "dashboard",
                    "themes"
                ]
            }
        ]
    }
}
```

## Publishing changes

Select the **Publish** button to save your changes and make them available.

How your changes are published depends on which branch you are working on:

* **Deployment branch**: Updates your live site immediately.
* **Other branches**: Creates a pull request so you can review changes before they go live.

<Frame>
  <img src="https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/publish-flow-light.png?maxW=3024&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=fbce4998e51da259580556ae2c73ddb7" alt="The publish button emphasized in the Mintlify web editor" className="block dark:hidden" width="3024" height="1046" data-path="images/editor/publish-flow-light.png" srcset="https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/publish-flow-light.png?w=280&maxW=3024&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=b33ba6a5cf3704f507681f397cfbb63c 280w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/publish-flow-light.png?w=560&maxW=3024&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=a4c0c6b45cecbbc9493d4e3b641ffd46 560w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/publish-flow-light.png?w=840&maxW=3024&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=6fe266a4f801bee73fe1353085ae8a7d 840w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/publish-flow-light.png?w=1100&maxW=3024&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=bfc3c2028dee3f2ae3b54659645b5491 1100w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/publish-flow-light.png?w=1650&maxW=3024&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=a2056b6f03775abc369698f3ba0bd723 1650w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/publish-flow-light.png?w=2500&maxW=3024&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=1834e16004c89224749003890c0334d0 2500w" data-optimize="true" data-opv="2" />

  <img src="https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/publish-flow-dark.png?maxW=3020&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=8e301408e9c4c2188105a267004e4449" alt="The publish button emphasized in the Mintlify web editor" className="hidden dark:block" width="3020" height="1044" data-path="images/editor/publish-flow-dark.png" srcset="https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/publish-flow-dark.png?w=280&maxW=3020&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=697da0115a6c3afca6a2abbb9ea922ea 280w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/publish-flow-dark.png?w=560&maxW=3020&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=0902db52b6506ea6f79a4aefde666bb7 560w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/publish-flow-dark.png?w=840&maxW=3020&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=90ce43cf20910153110d3758c960c8e1 840w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/publish-flow-dark.png?w=1100&maxW=3020&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=63efe27d881f6183487bd77b07da7569 1100w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/publish-flow-dark.png?w=1650&maxW=3020&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=db48145e016c3e60ee784854d1ae9999 1650w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/publish-flow-dark.png?w=2500&maxW=3020&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=a4b7d293ccfa2b1c9213437becd77f31 2500w" data-optimize="true" data-opv="2" />
</Frame>

## Pull requests and reviewing changes

Pull requests let you propose changes from your branch so that other people can review them before merging into your live documentation. This helps ensure that your changes are correct and gives your team a chance to collaborate on content.

<Tip>
  Even if you're working solo, pull requests are valuable for previewing changes before they go live and maintaining a clear history of updates.
</Tip>

### Creating a pull request on a branch

When you're ready to publish changes from your branch:

1. Make sure all your changes are saved on your branch.
2. Select **Publish Pull Request** in the top-right corner of the editor.
3. Add a title and description for your pull request. A good title and description help reviewers understand the changes you've made.
4. Select **Publish Pull Request**.

<Frame>
  <img src="https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/pull-request-light.png?maxW=3024&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=55ffe2ff3ac898d4aa26102b146552cc" alt="Publish pull request button emphasized in the Mintlify web editor" className="block dark:hidden" width="3024" height="1146" data-path="images/editor/pull-request-light.png" srcset="https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/pull-request-light.png?w=280&maxW=3024&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=973449a9ca3a5bbc073cba9559ed65e8 280w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/pull-request-light.png?w=560&maxW=3024&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=b038f3bd7b6b74d8333773257d2b84cf 560w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/pull-request-light.png?w=840&maxW=3024&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=af6bfb4680d7fb21302acd458ba340be 840w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/pull-request-light.png?w=1100&maxW=3024&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=bb3f7486420b364eb3a6b63bb7bf87db 1100w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/pull-request-light.png?w=1650&maxW=3024&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=2948b0c42c76d9e06f0f6e70b797f232 1650w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/pull-request-light.png?w=2500&maxW=3024&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=c15b180227177746bdcc6d07d8e8bec6 2500w" data-optimize="true" data-opv="2" />

  <img src="https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/pull-request-dark.png?maxW=3020&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=3877016c7806cea2d1d519dd9a20b2c8" alt="Publish pull request button emphasized in the Mintlify web editor" className="hidden dark:block" width="3020" height="1144" data-path="images/editor/pull-request-dark.png" srcset="https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/pull-request-dark.png?w=280&maxW=3020&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=c459c58e061411c38fba315aca8104eb 280w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/pull-request-dark.png?w=560&maxW=3020&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=69fabe9850c0ddf69d61b3f48b714b3c 560w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/pull-request-dark.png?w=840&maxW=3020&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=2e0009b5d78a1a5e378f02d023abb98b 840w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/pull-request-dark.png?w=1100&maxW=3020&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=03da5029b521296e2c406ddbf71012b6 1100w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/pull-request-dark.png?w=1650&maxW=3020&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=f29d2c7b914722f0674a3cdfd090a8e3 1650w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/editor/pull-request-dark.png?w=2500&maxW=3020&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=ab171b341d74252d3b135a6bcebf6098 2500w" data-optimize="true" data-opv="2" />
</Frame>

The web editor will create a pull request in your Git repository and provide a link to view it.

### Reviewing pull requests

Once your pull request is created:

1. **Review your changes**: You and your team members can review your pull request in your Git provider like GitHub or GitLab.
2. **Make additional changes**: After reviewing, make any changes in your web editor. Saving your changes will update your pull request.
3. **Merge when ready**: When your pull request is ready, merge it to deploy changes to your live documentation site.

## Keyboard shortcuts

The web editor supports all common keyboard shortcuts such as copy, paste, undo, and select all, and the following shortcuts:

| Command                          | macOS                                            | Windows                                              |
| :------------------------------- | :----------------------------------------------- | :--------------------------------------------------- |
| **Search files**                 | <kbd>Cmd</kbd> + <kbd>P</kbd>                    | <kbd>Control</kbd> + <kbd>P</kbd>                    |
| **Add link to highlighted text** | <kbd>Cmd</kbd> + <kbd>K</kbd>                    | <kbd>Control</kbd> + <kbd>K</kbd>                    |
| **Add line break**               | <kbd>Cmd</kbd> + <kbd>Enter</kbd>                | <kbd>Control</kbd> + <kbd>Enter</kbd>                |
| **Bold**                         | <kbd>Cmd</kbd> + <kbd>B</kbd>                    | <kbd>Control</kbd> + <kbd>B</kbd>                    |
| **Italic**                       | <kbd>Cmd</kbd> + <kbd>I</kbd>                    | <kbd>Control</kbd> + <kbd>I</kbd>                    |
| **Underline**                    | <kbd>Cmd</kbd> + <kbd>U</kbd>                    | <kbd>Control</kbd> + <kbd>U</kbd>                    |
| **Strikethrough**                | <kbd>Cmd</kbd> + <kbd>Shift</kbd> + <kbd>S</kbd> | <kbd>Control</kbd> + <kbd>Shift</kbd> + <kbd>S</kbd> |
| **Code**                         | <kbd>Cmd</kbd> + <kbd>E</kbd>                    | <kbd>Control</kbd> + <kbd>E</kbd>                    |
| **Normal text**                  | <kbd>Cmd</kbd> + <kbd>Alt</kbd> + <kbd>0</kbd>   | <kbd>Control</kbd> + <kbd>Alt</kbd> + <kbd>0</kbd>   |
| **Heading 1**                    | <kbd>Cmd</kbd> + <kbd>Alt</kbd> + <kbd>1</kbd>   | <kbd>Control</kbd> + <kbd>Alt</kbd> + <kbd>1</kbd>   |
| **Heading 2**                    | <kbd>Cmd</kbd> + <kbd>Alt</kbd> + <kbd>2</kbd>   | <kbd>Control</kbd> + <kbd>Alt</kbd> + <kbd>2</kbd>   |
| **Heading 3**                    | <kbd>Cmd</kbd> + <kbd>Alt</kbd> + <kbd>3</kbd>   | <kbd>Control</kbd> + <kbd>Alt</kbd> + <kbd>3</kbd>   |
| **Heading 4**                    | <kbd>Cmd</kbd> + <kbd>Alt</kbd> + <kbd>4</kbd>   | <kbd>Control</kbd> + <kbd>Alt</kbd> + <kbd>4</kbd>   |
| **Ordered list**                 | <kbd>Cmd</kbd> + <kbd>Shift</kbd> + <kbd>7</kbd> | <kbd>Control</kbd> + <kbd>Shift</kbd> + <kbd>7</kbd> |
| **Unordered list**               | <kbd>Cmd</kbd> + <kbd>Shift</kbd> + <kbd>8</kbd> | <kbd>Control</kbd> + <kbd>Shift</kbd> + <kbd>8</kbd> |
| **Blockquote**                   | <kbd>Cmd</kbd> + <kbd>Shift</kbd> + <kbd>B</kbd> | <kbd>Control</kbd> + <kbd>Shift</kbd> + <kbd>B</kbd> |
| **Subscript**                    | <kbd>Cmd</kbd> + <kbd>,</kbd>                    | <kbd>Control</kbd> + <kbd>,</kbd>                    |
| **Superscript**                  | <kbd>Cmd</kbd> + <kbd>.</kbd>                    | <kbd>Control</kbd> + <kbd>.</kbd>                    |

## Troubleshooting

Here are solutions to common issues you might encounter with the web editor.

<AccordionGroup>
  <Accordion title="Changes not appearing after publishing">
    **Possible causes:**

    * Deployment is still in progress
    * Caching issues in your browser

    **Solutions:**

    1. Check deployment status in your Mintlify Dashboard.
    2. Try hard refreshing your browser (<kbd>Ctrl</kbd> + <kbd>F5</kbd> or <kbd>Cmd</kbd> + <kbd>Shift</kbd> + <kbd>R</kbd>).
    3. Clear your browser cache.
  </Accordion>

  <Accordion title="Permission errors when publishing">
    **Possible causes:**

    * Insufficient permissions to the Git repository
    * Authentication issues with your Git provider

    **Solutions:**

    1. Verify you have correct access to the repository.
    2. Check if your Git integration is properly configured.
    3. Review the [Editor Permissions](/advanced/dashboard/permissions) documentation.
  </Accordion>

  <Accordion title="Editor loading issues">
    **Possible causes:**

    * Network connectivity problems
    * Large documentation repositories

    **Solutions:**

    1. Check your internet connection.
    2. Refresh the page and try again.
    3. Contact support if the issue persists.
  </Accordion>
</AccordionGroup>


# Analytics
Source: https://mintlify.com/docs/guides/analytics

See information about your docs' performance in your dashboard

The analytics page provides insights into how your documentation is performing, helping you identify improvement opportunities and track changes over time.

## Accessing analytics

Navigate to the **Analytics** tab in your [dashboard](https://dashboard.mintlify.com/products/analytics).

Use the range selector to adjust the time period for displayed data.

## Analytics tabs

The analytics dashboard has three main sections:

### Overview

View traffic and other high-level insights about your docs.

* **Visitors**: Unique visitors.
* **Views**: Total page views.
* **Actions**: Combined count of API calls, navbar link clicks, and CTA button clicks.
* **Popular Pages**: Most-visited pages with view counts.
* **Referrers**: Top traffic sources directing users to your docs.

### Feedback

Monitor user satisfaction through voting data:

* **Liked by viewers**: Pages with the most positive feedback (thumbs up votes).
* **Needs improvement**: Pages with the most negative feedback (thumbs down votes).

To view feedback data, you must first enable feedback from the [Add-ons](https://dashboard.mintlify.com/products/addons) page in your dashboard.

### Search

Understand how users search within your documentation.

* **Total queries**: Search volume.
* **Top searches**: Most-searched terms.
* **Low-confidence searches**: Queries that may not have found relevant results.

## Improving your docs with analytics

Use your analytics to enhance the user experience of your docs:

**Review popular content**: Ensure your most-visited pages contain current, accurate information and consider expanding successful topics.

**Address feedback concerns**: Investigate pages with negative feedback to identify and resolve user pain points.

**Optimize for search**: Review top search queries so that relevant pages are discoverable and up-to-date. Pay attention to low-confidence searches that might indicate content gaps.


# Assistant
Source: https://mintlify.com/docs/guides/assistant

Help users succeed with your product and find answers faster

<Info>
  The assistant is automatically enabled on [Pro and Enterprise plans](https://mintlify.com/pricing?ref=assistant).
</Info>

## About the assistant

The assistant answers questions about your documentation through natural language queries. It is embedded directly in your documentation site, providing users with immediate access to contextual help.

The assistant uses agentic RAG (retrieval-augmented generation) with tool calling powered by Claude Sonnet 4. When users ask questions, the assistant:

* **Searches and retrieves** relevant content from your documentation to provide accurate answers.
* **Cites sources** and provides navigable links to take users directly to referenced pages.
* **Generates copyable code examples** to help users implement solutions from your documentation.

You can view assistant usage through your dashboard to understand user behavior and documentation effectiveness. Export and analyze query data to help identify:

* Frequently asked questions that might need better coverage.
* Content gaps where users struggle to find answers.
* Popular topics that could benefit from additional content.

## Using the assistant

Users can access the assistant in two ways:

* **Keyboard shortcut**: <kbd>Command</kbd> + <kbd>I</kbd> (<kbd>Ctrl</kbd> + <kbd>I</kbd> on Windows)
* **Assistant button** next to the search bar
  <img
    src="https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/assistant/assistant-button-light.png?maxW=1806&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=634b37298cac1a20a3e4d56e29cd2a7a"
    className="block dark:hidden rounded-2xl border border-gray-100 shadow-lg"
    style={{
    width: '268px',
    height: 'auto',
  }}
    alt="Search bar and assistant button in light mode."
    width="1806"
    height="322"
    data-path="images/assistant/assistant-button-light.png"
    srcset="https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/assistant/assistant-button-light.png?w=280&maxW=1806&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=736966eff1416b9d0200bc7b644e3276 280w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/assistant/assistant-button-light.png?w=560&maxW=1806&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=d2aaadbd9a90c861cf70e3918545fa06 560w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/assistant/assistant-button-light.png?w=840&maxW=1806&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=7617ef95f2027f742586bf9c03e35dbe 840w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/assistant/assistant-button-light.png?w=1100&maxW=1806&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=b728d7ce2b27429c23908b030536e834 1100w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/assistant/assistant-button-light.png?w=1650&maxW=1806&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=aa93f5667ff80e7bbd7ec290c39d0303 1650w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/assistant/assistant-button-light.png?w=2500&maxW=1806&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=8d0666eda470e37091ff75e646a1c415 2500w"
    data-optimize="true"
    data-opv="2"
  />
  <img
    src="https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/assistant/assistant-button-dark.png?maxW=1806&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=99124c57991e752ecb015068e248c0ac"
    className="hidden dark:block rounded-2xl border border-white/10 shadow-lg"
    style={{
    width: '268px',
    height: 'auto',
  }}
    alt="Search bar and assistant button in dark mode."
    width="1806"
    height="324"
    data-path="images/assistant/assistant-button-dark.png"
    srcset="https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/assistant/assistant-button-dark.png?w=280&maxW=1806&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=6b2e89194a170b1352abfabce275cdd3 280w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/assistant/assistant-button-dark.png?w=560&maxW=1806&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=71b7fe654acede87c97c1accd6a25c5b 560w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/assistant/assistant-button-dark.png?w=840&maxW=1806&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=cfd75f29b6877602cd2dc4c308fe81ce 840w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/assistant/assistant-button-dark.png?w=1100&maxW=1806&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=6c19751f7580b280906ccd1b72aadcb9 1100w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/assistant/assistant-button-dark.png?w=1650&maxW=1806&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=0a199aaf5ac803e999d5ad222305134f 1650w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/assistant/assistant-button-dark.png?w=2500&maxW=1806&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=f27834c692e8f7400d0307cc930bfd79 2500w"
    data-optimize="true"
    data-opv="2"
  />

Both methods open a chat panel on the right side of your docs. Users can ask any question and the assistant will search your documentation for an answer. If no relevant information is found, the assistant will respond that it cannot answer the question.

## Making content AI ingestible

Structure your documentation to help the assistant provide accurate, relevant answers. Clear organization and comprehensive context benefit both human readers and AI understanding.

<Card title="Structure and organization">
  * Use semantic markup.
  * Write descriptive headings for sections.
  * Create a logical information hierarchy.
  * Use consistent formatting across your docs.
  * Include comprehensive metadata in page frontmatter.
  * Break up long blocks of text into shorter paragraphs.
</Card>

<Card title="Context">
  * Define specific terms and acronyms when first introduced.
  * Provide sufficient conceptual content about features and procedures.
  * Include examples and use cases.
  * Cross-reference related topics.
  * Add [hidden pages](/guides/hidden-pages) with additional context that users don't need, but the assistant can reference.
</Card>

## Exporting and analyzing queries

Review and export queries from your dashboard to understand how people interact with your documentation and identify improvement opportunities. Some ways that analyzing queries can help you improve your documentation:

* Identify content gaps where frequent queries receive insufficient answers.
* Discover user behavior patterns and common information needs from themes and patterns in queries.
* Prioritize high-traffic pages for accuracy and quality improvements.

You can explore queries from your [dashboard](https://dashboard.mintlify.com/products/assistant), but to get more powerful insights we recommend exporting a `CSV` file of your queries, responses, and sources to analyze with your preferred AI tool.

1. Navigate to the [assistant page](https://dashboard.mintlify.com/products/assistant) in your dashboard.
2. Select **Export to CSV**.
3. Analyze the exported data using your preferred tool.

<Card title="Sample analysis prompts">
  * Summarize the most common themes of the queries.
  * List any queries that had no sources cited.
  * Find patterns in unsuccessful interactions.
</Card>


# Changelogs
Source: https://mintlify.com/docs/guides/changelogs

Post product updates in your docs with a subscribable RSS feed

Create a changelog for your docs by adding [Update components](/components/update) to a page.

Check out the [Mintlify changelog](/changelog) as an example: you can include links, images, text, and demos of your new features in each update.

## Setting up your changelog

<Steps>
  <Step title="Create a page for your changelog">
    1. Create a new page in your docs such as `changelog.mdx` or `updates.mdx`.
    2. Add your changelog page to your navigation scheme in your `docs.json`.
  </Step>

  <Step title="Add Update components to your changelog">
    Add an `Update` for each changelog entry.

    Include relevant information like feature releases, bug fixes, or other announcements.
  </Step>
</Steps>

```mdx Example changelog.mdx
---
title: "Changelog"
description: "Product updates and announcements"
---
<Update label="March 2025" description="v0.0.10">
  Added a new Wintergreen flavor.

  Released a new version of the Spearmint flavor, now with 10% more mint.
</Update>

<Update label="February 2025" description="v0.0.09">
  Released a new version of the Spearmint flavor.
</Update>
```

## Customizing your changelog

Control how people navigate your changelog and stay up to date with your product information.

### Table of contents

Each `label` property for an `Update` automatically creates an entry in the right sidebar's table of contents. This is the default navigation for your changelog.

<Frame>
  <img src="https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/changelog-toc-light.png?maxW=2632&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=6ba11f3872a0a20da9ec2d4abba5b8a0" alt="Changelog with table of contents displayed in light mode." className="block dark:hidden" width="2632" height="1502" data-path="images/changelog-toc-light.png" srcset="https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/changelog-toc-light.png?w=280&maxW=2632&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=590aacd58901ead5f5e3f32ce0f96b55 280w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/changelog-toc-light.png?w=560&maxW=2632&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=b2c24e979c6ca52a1cd5fe76f400b035 560w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/changelog-toc-light.png?w=840&maxW=2632&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=b9b9e67cf601ba11db2cd17f0f1f5340 840w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/changelog-toc-light.png?w=1100&maxW=2632&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=e47badf02d4966f4c8162d1a148b5501 1100w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/changelog-toc-light.png?w=1650&maxW=2632&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=ea25a6add17f4b4c1c98424712f65efd 1650w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/changelog-toc-light.png?w=2500&maxW=2632&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=4ec0a12220fbc996d1cb6b58584c5fa3 2500w" data-optimize="true" data-opv="2" />

  <img src="https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/changelog-toc-dark.png?maxW=2590&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=55b99eff2f8697445d459aaba662e339" alt="Changelog with table of contents displayed in dark mode." className="hidden dark:block" width="2590" height="1432" data-path="images/changelog-toc-dark.png" srcset="https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/changelog-toc-dark.png?w=280&maxW=2590&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=340e0b2680b9c75469ce418cdc09e97c 280w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/changelog-toc-dark.png?w=560&maxW=2590&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=86bbd4bb00396d11d8c2313f9ed1bf9a 560w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/changelog-toc-dark.png?w=840&maxW=2590&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=36fae1ab33b3880b5673c7bb511003e4 840w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/changelog-toc-dark.png?w=1100&maxW=2590&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=0934e9d42f677f8b5bc6595916adbe8b 1100w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/changelog-toc-dark.png?w=1650&maxW=2590&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=e5f00d0c8a47a955436dfbe5ca4575cf 1650w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/changelog-toc-dark.png?w=2500&maxW=2590&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=f81b516e5104c841c61e2ae0d8d193d4 2500w" data-optimize="true" data-opv="2" />
</Frame>

### Tag filters

Add `tags` to your `Update` components to replace the table of contents with tag filters. Users can filter the changelog by selecting one or more tags:

```mdx Tag filters example wrap
<Update label="March 2025" description="v0.0.10" tags={["Wintergreen", "Spearmint"]}>
  Added a new Wintergreen flavor.

  Released a new version of the Spearmint flavor, now with 10% more mint.
</Update>

<Update label="February 2025" description="v0.0.09" tags={["Spearmint"]}>
  Released a new version of the Spearmint flavor.
</Update>

<Update label="January 2025" description="v0.0.08" tags={["Peppermint", "Spearmint"]}>
  Deprecated the Peppermint flavor.

  Released a new version of the Spearmint flavor.
</Update>
```

<Frame>
  <img src="https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/changelog-filters-light.png?maxW=2170&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=8053393cb39933ef43e03bf006e0b836" alt="Changelog in light mode with the Peppermint tag filter selected." className="block dark:hidden" width="2170" height="582" data-path="images/changelog-filters-light.png" srcset="https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/changelog-filters-light.png?w=280&maxW=2170&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=6ada5bdce519327eeb56c72ccc794485 280w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/changelog-filters-light.png?w=560&maxW=2170&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=034d15544a1b701993d0ea1e9ef87325 560w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/changelog-filters-light.png?w=840&maxW=2170&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=d882876843e9df9def3a7cf04a96ae49 840w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/changelog-filters-light.png?w=1100&maxW=2170&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=704bd964acd2001d2970e3c47f76e19f 1100w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/changelog-filters-light.png?w=1650&maxW=2170&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=b146bc55b3ce89f4b5aa13afcc3af933 1650w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/changelog-filters-light.png?w=2500&maxW=2170&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=3bf9d252b29ff546fae12df83c250472 2500w" data-optimize="true" data-opv="2" />

  <img src="https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/changelog-filters-dark.png?maxW=2172&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=47261c01082b27d5d4d20a144ef04845" alt="Changelog in dark mode with the Peppermint tag filter selected." className="hidden dark:block" width="2172" height="584" data-path="images/changelog-filters-dark.png" srcset="https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/changelog-filters-dark.png?w=280&maxW=2172&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=b8e3d32af477aa7746bab0b2b8b4dd86 280w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/changelog-filters-dark.png?w=560&maxW=2172&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=a0d7218bd18ce5595f7979c6270e7b79 560w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/changelog-filters-dark.png?w=840&maxW=2172&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=ebed4c369c5c27bb3e677ea07012d4df 840w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/changelog-filters-dark.png?w=1100&maxW=2172&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=0f5bb427e5e432b8b4db3cc892b8b780 1100w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/changelog-filters-dark.png?w=1650&maxW=2172&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=a9f33d86a569c3f4439f797db6d37427 1650w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/changelog-filters-dark.png?w=2500&maxW=2172&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=484e4c627f5776e3a77409bef9588a2a 2500w" data-optimize="true" data-opv="2" />
</Frame>

<Tip>
  The table of contents and changelog filters are hidden when using `custom`, `center`, or `wide` page modes. Learn more about [page modes](/pages#page-mode).
</Tip>

### Subscribable changelogs

Using `Update` components creates a subscribable RSS feed at your page URL with `/rss.xml` appended. For example, `mintlify.com/docs/changelog/rss.xml`.

Entries are added to the RSS feed when new `Update` components are published and when new headings are added inside of existing `<Update>` tags.

The top level headings of `Update` components are used as the titles of RSS feed entries, and the entries link to their heading anchors in your docs.

```xml Example RSS feed
<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title><![CDATA[Product updates]]></title>
    <description><![CDATA[New updates and improvements]]></description>
    <link>https://mintlify.com/docs</link>
    <generator>RSS for Node</generator>
    <lastBuildDate>Mon, 21 Jul 2025 21:21:47 GMT</lastBuildDate>
    <atom:link href="https://mintlify.com/docs/changelog/rss.xml" rel="self" type="application/rss+xml"/>
    <copyright><![CDATA[Mintlify]]></copyright>
    <docs>https://mintlify.com/docs</docs>
    <item>
      <title><![CDATA[June 2025]]></title>
      <link>https://mintlify.com/docs/changelog#june-2025</link>
      <guid isPermaLink="true">https://mintlify.com/docs/changelog#june-2025</guid>
      <pubDate>Mon, 23 Jun 2025 16:54:22 GMT</pubDate>
    </item>
  </channel>
</rss>
```

RSS feeds can integrate with Slack, email, or other subscription tools to notify users of product changes. Some options include:

* [Slack](https://slack.com/help/articles/218688467-Add-RSS-feeds-to-Slack)
* [Email](https://zapier.com/apps/email/integrations/rss/1441/send-new-rss-feed-entries-via-email) via Zapier
* Discord bots like [Readybot](https://readybot.io) or [RSS Feeds to Discord Bot](https://rss.app/en/bots/rssfeeds-discord-bot)

To make the RSS feed discoverable, you can display an RSS icon button that links to the feed at the top of the page. Add `rss: true` to the page frontmatter:

```mdx
---
rss: true
---
```

<Frame>
  <img src="https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/changelog-rss-button-light.png?maxW=1486&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=a17aad2c08f54cdd324e9a87a8527fb0" alt="Changelog page in light mode with RSS feed button enabled." className="block dark:hidden" width="1486" height="388" data-path="images/changelog-rss-button-light.png" srcset="https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/changelog-rss-button-light.png?w=280&maxW=1486&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=fb94a1e244013033571eedea068dd4f7 280w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/changelog-rss-button-light.png?w=560&maxW=1486&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=09971e4771dfdfaadacf5d87dcd28bd2 560w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/changelog-rss-button-light.png?w=840&maxW=1486&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=7b336adac0c24148059e9c5aef6006f4 840w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/changelog-rss-button-light.png?w=1100&maxW=1486&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=22a3a17825216013570f67a090c163cd 1100w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/changelog-rss-button-light.png?w=1650&maxW=1486&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=6daf82ab2ca96193ded32a683ec59656 1650w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/changelog-rss-button-light.png?w=2500&maxW=1486&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=577a16aa291380c7ee1694aaca3c3663 2500w" data-optimize="true" data-opv="2" />

  <img src="https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/changelog-rss-button-dark.png?maxW=1486&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=8b594ae5e37f6d4e1254daf9c6de8d12" alt="Changelog page in dark mode with RSS feed button enabled." className="hidden dark:block" width="1486" height="388" data-path="images/changelog-rss-button-dark.png" srcset="https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/changelog-rss-button-dark.png?w=280&maxW=1486&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=6016b584e7aef2c135a697f7669a9e87 280w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/changelog-rss-button-dark.png?w=560&maxW=1486&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=8b183363182c519e77f973694528da11 560w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/changelog-rss-button-dark.png?w=840&maxW=1486&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=f7c006305ba370f1df6e295c80d3f446 840w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/changelog-rss-button-dark.png?w=1100&maxW=1486&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=e7b3f36356c049fe4843a326ebce9dc7 1100w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/changelog-rss-button-dark.png?w=1650&maxW=1486&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=269e18ee7e27b0daaac7497aee232b82 1650w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/changelog-rss-button-dark.png?w=2500&maxW=1486&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=ebcb488654088a1dc2dd6e489c974e0f 2500w" data-optimize="true" data-opv="2" />
</Frame>


# Claude Code
Source: https://mintlify.com/docs/guides/claude-code

Configure Claude Code to help write, review, and update your docs

Claude Code is an agentic command line tool that can help you maintain your documentation. It can write new content, review existing pages, and keep docs up to date.

You can train Claude Code to understand your documentation standards and workflows by adding a `CLAUDE.md` file to your project and refining it over time.

## Getting started

**Prerequisites:**

* Active Claude subscription (Pro, Max, or API access)

**Setup:**

1. Install Claude Code:

```bash
npm install -g @anthropic-ai/claude-code
```

2. Navigate to your docs directory.
3. (Optional) Add the `CLAUDE.md` file below to your project.
4. Run `claude` to start.

## CLAUDE.md template

Save a `CLAUDE.md` file at the root of your docs directory to help Claude Code understand your project. This file trains Claude Code on your documentation standards, preferences, and workflows. See [Manage Claude's memory](https://docs.anthropic.com/en/docs/claude-code/memory) in the Anthropic docs for more information.

Copy this example template or make changes for your docs specifications:

```mdx
# Mintlify documentation

## Working relationship
- You can push back on ideas-this can lead to better documentation. Cite sources and explain your reasoning when you do so
- ALWAYS ask for clarification rather than making assumptions
- NEVER lie, guess, or make up information

## Project context
- Format: MDX files with YAML frontmatter
- Config: docs.json for navigation, theme, settings
- Components: Mintlify components

## Content strategy
- Document just enough for user success - not too much, not too little
- Prioritize accuracy and usability of information
- Make content evergreen when possible
- Search for existing information before adding new content. Avoid duplication unless it is done for a strategic reason
- Check existing patterns for consistency
- Start by making the smallest reasonable changes

## docs.json

- Refer to the [docs.json schema](https://mintlify.com/docs.json) when building the docs.json file and site navigation

## Frontmatter requirements for pages
- title: Clear, descriptive page title
- description: Concise summary for SEO/navigation

## Writing standards
- Second-person voice ("you")
- Prerequisites at start of procedural content
- Test all code examples before publishing
- Match style and formatting of existing pages
- Include both basic and advanced use cases
- Language tags on all code blocks
- Alt text on all images
- Relative paths for internal links

## Git workflow
- NEVER use --no-verify when committing
- Ask how to handle uncommitted changes before starting
- Create a new branch when no clear branch exists for changes
- Commit frequently throughout development
- NEVER skip or disable pre-commit hooks

## Do not
- Skip frontmatter on any MDX file
- Use absolute URLs for internal links
- Include untested code examples
- Make assumptions - always ask for clarification
```

## Sample prompts

Once you have Claude Code set up, try these prompts to see how it can help with common documentation tasks. You can copy and paste these examples directly, or adapt them for your specific needs.

### Convert notes to polished docs

Turn rough drafts into proper Markdown pages with components and frontmatter.

**Example prompt:**

```text wrap
Convert this text into a properly formatted MDX page: [paste your text here]
```

### Review docs for consistency

Get suggestions to improve style, formatting, and component usage.

**Example prompt:**

```text wrap
Review the files in docs/ and suggest improvements for consistency and clarity
```

### Update docs when features change

Keep documentation current when your product evolves.

**Example prompt:**

```text wrap
Our API now requires a version parameter. Update our docs to include version=2024-01 in all examples
```

### Generate comprehensive code examples

Create multi-language examples with error handling.

**Example prompt:**

```text wrap
Create code examples for [your API endpoint] in JavaScript, Python, and cURL with error handling
```

## Extending Claude Code

Beyond manually prompting Claude Code, you can integrate it with your existing workflows.

### Automation with GitHub Actions

Run Claude Code automatically when code changes to keep docs up to date. You can trigger documentation reviews on pull requests or update examples when API changes are detected.

### Multi-instance workflows

Use separate Claude Code sessions for different tasks - one for writing new content and another for reviewing and quality assurance. This helps maintain consistency and catch issues that a single session might miss.

### Team collaboration

Share your refined `CLAUDE.md` file with your team to ensure consistent documentation standards across all contributors. Teams often develop project-specific prompts and workflows that become part of their documentation process.

### Custom commands

Create reusable slash commands in `.claude/commands/` for frequently used documentation tasks specific to your project or team.


# Cursor
Source: https://mintlify.com/docs/guides/cursor

Configure Cursor to be your writing assistant

Transform Cursor into a documentation expert that knows your components, style guide, and best practices.

## Using Cursor with Mintlify

Cursor rules provide persistent context about your documentation, ensuring more consistent suggestions that fit your standards and style.

* **Project rules** are stored in your documentation repository and shared with your team.
* **User rules** apply to your personal Cursor environment.

We recommend creating project rules for your docs so that all contributors have access to the same rules.

Create rules files in the `.cursor/rules` directory of your docs repo. See the [Cursor Rules documentation](https://docs.cursor.com/context/rules) for complete setup instructions.

## Example project rule

This rule provides Cursor with context to properly format Mintlify components and follow technical writing best practices.

You can use this example as-is or customize it for your documentation:

* **Writing standards**: Update language guidelines to match your style guide.
* **Component patterns**: Add project-specific components or modify existing examples.
* **Code examples**: Replace generic examples with real API calls and responses for your product.
* **Style and tone preferences**: Adjust terminology, formatting, and other rules.

Add this rule with any modifications as an `.mdc` file in the `.cursor/rules` directory of your docs repo.

````mdx wrap
# Mintlify technical writing rule

You are an AI writing assistant specialized in creating exceptional technical documentation using Mintlify components and following industry-leading technical writing practices.

## Core writing principles

### Language and style requirements

- Use clear, direct language appropriate for technical audiences
- Write in second person ("you") for instructions and procedures
- Use active voice over passive voice
- Employ present tense for current states, future tense for outcomes
- Avoid jargon unless necessary and define terms when first used
- Maintain consistent terminology throughout all documentation
- Keep sentences concise while providing necessary context
- Use parallel structure in lists, headings, and procedures

### Content organization standards

- Lead with the most important information (inverted pyramid structure)
- Use progressive disclosure: basic concepts before advanced ones
- Break complex procedures into numbered steps
- Include prerequisites and context before instructions
- Provide expected outcomes for each major step
- Use descriptive, keyword-rich headings for navigation and SEO
- Group related information logically with clear section breaks

### User-centered approach

- Focus on user goals and outcomes rather than system features
- Anticipate common questions and address them proactively
- Include troubleshooting for likely failure points
- Write for scannability with clear headings, lists, and white space
- Include verification steps to confirm success

## Mintlify component reference

### docs.json

- Refer to the [docs.json schema](https://mintlify.com/docs.json) when building the docs.json file and site navigation

### Callout components

#### Note - Additional helpful information

<Note>
Supplementary information that supports the main content without interrupting flow
</Note>

#### Tip - Best practices and pro tips

<Tip>
Expert advice, shortcuts, or best practices that enhance user success
</Tip>

#### Warning - Important cautions

<Warning>
Critical information about potential issues, breaking changes, or destructive actions
</Warning>

#### Info - Neutral contextual information

<Info>
Background information, context, or neutral announcements
</Info>

#### Check - Success confirmations

<Check>
Positive confirmations, successful completions, or achievement indicators
</Check>

### Code components

#### Single code block

Example of a single code block:

```javascript config.js
const apiConfig = {
  baseURL: 'https://api.example.com',
  timeout: 5000,
  headers: {
    'Authorization': `Bearer ${process.env.API_TOKEN}`
  }
};
```

#### Code group with multiple languages

Example of a code group:

<CodeGroup>
```javascript Node.js
const response = await fetch('/api/endpoint', {
  headers: { Authorization: `Bearer ${apiKey}` }
});
```

```python Python
import requests
response = requests.get('/api/endpoint', 
  headers={'Authorization': f'Bearer {api_key}'})
```

```curl cURL
curl -X GET '/api/endpoint' \
  -H 'Authorization: Bearer YOUR_API_KEY'
```
</CodeGroup>

#### Request/response examples

Example of request/response documentation:

<RequestExample>
```bash cURL
curl -X POST 'https://api.example.com/users' \
  -H 'Content-Type: application/json' \
  -d '{"name": "John Doe", "email": "john@example.com"}'
```
</RequestExample>

<ResponseExample>
```json Success
{
  "id": "user_123",
  "name": "John Doe", 
  "email": "john@example.com",
  "created_at": "2024-01-15T10:30:00Z"
}
```
</ResponseExample>

### Structural components

#### Steps for procedures

Example of step-by-step instructions:

<Steps>
<Step title="Install dependencies">
  Run `npm install` to install required packages.
  
  <Check>
  Verify installation by running `npm list`.
  </Check>
</Step>

<Step title="Configure environment">
  Create a `.env` file with your API credentials.
  
  ```bash
  API_KEY=your_api_key_here
  ```
  
  <Warning>
  Never commit API keys to version control.
  </Warning>
</Step>
</Steps>

#### Tabs for alternative content

Example of tabbed content:

<Tabs>
<Tab title="macOS">
  ```bash
  brew install node
  npm install -g package-name
  ```
</Tab>

<Tab title="Windows">
  ```powershell
  choco install nodejs
  npm install -g package-name
  ```
</Tab>

<Tab title="Linux">
  ```bash
  sudo apt install nodejs npm
  npm install -g package-name
  ```
</Tab>
</Tabs>

#### Accordions for collapsible content

Example of accordion groups:

<AccordionGroup>
<Accordion title="Troubleshooting connection issues">
  - **Firewall blocking**: Ensure ports 80 and 443 are open
  - **Proxy configuration**: Set HTTP_PROXY environment variable
  - **DNS resolution**: Try using 8.8.8.8 as DNS server
</Accordion>

<Accordion title="Advanced configuration">
  ```javascript
  const config = {
    performance: { cache: true, timeout: 30000 },
    security: { encryption: 'AES-256' }
  };
  ```
</Accordion>
</AccordionGroup>

### Cards and columns for emphasizing information

Example of cards and card groups:

<Card title="Getting started guide" icon="rocket" href="/quickstart">
Complete walkthrough from installation to your first API call in under 10 minutes.
</Card>

<CardGroup cols={2}>
<Card title="Authentication" icon="key" href="/auth">
  Learn how to authenticate requests using API keys or JWT tokens.
</Card>

<Card title="Rate limiting" icon="clock" href="/rate-limits">
  Understand rate limits and best practices for high-volume usage.
</Card>
</CardGroup>

### API documentation components

#### Parameter fields

Example of parameter documentation:

<ParamField path="user_id" type="string" required>
Unique identifier for the user. Must be a valid UUID v4 format.
</ParamField>

<ParamField body="email" type="string" required>
User's email address. Must be valid and unique within the system.
</ParamField>

<ParamField query="limit" type="integer" default="10">
Maximum number of results to return. Range: 1-100.
</ParamField>

<ParamField header="Authorization" type="string" required>
Bearer token for API authentication. Format: `Bearer YOUR_API_KEY`
</ParamField>

#### Response fields

Example of response field documentation:

<ResponseField name="user_id" type="string" required>
Unique identifier assigned to the newly created user.
</ResponseField>

<ResponseField name="created_at" type="timestamp">
ISO 8601 formatted timestamp of when the user was created.
</ResponseField>

<ResponseField name="permissions" type="array">
List of permission strings assigned to this user.
</ResponseField>

#### Expandable nested fields

Example of nested field documentation:

<ResponseField name="user" type="object">
Complete user object with all associated data.

<Expandable title="User properties">
  <ResponseField name="profile" type="object">
  User profile information including personal details.
  
  <Expandable title="Profile details">
    <ResponseField name="first_name" type="string">
    User's first name as entered during registration.
    </ResponseField>
    
    <ResponseField name="avatar_url" type="string | null">
    URL to user's profile picture. Returns null if no avatar is set.
    </ResponseField>
  </Expandable>
  </ResponseField>
</Expandable>
</ResponseField>

### Media and advanced components

#### Frames for images

Wrap all images in frames:

<Frame>
<img src="/images/dashboard.png" alt="Main dashboard showing analytics overview" />
</Frame>

<Frame caption="The analytics dashboard provides real-time insights">
<img src="/images/analytics.png" alt="Analytics dashboard with charts" />
</Frame>

#### Videos

Use the HTML video element for self-hosted video content:

<video
  controls
  className="w-full aspect-video rounded-xl"
  src="link-to-your-video.com"
></video>

Embed YouTube videos using iframe elements:

<iframe
  className="w-full aspect-video rounded-xl"
  src="https://www.youtube.com/embed/4KzFe50RQkQ"
  title="YouTube video player"
  frameBorder="0"
  allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
  allowFullScreen
></iframe>

#### Tooltips

Example of tooltip usage:

<Tooltip tip="Application Programming Interface - protocols for building software">
API
</Tooltip>

#### Updates

Use updates for changelogs:

<Update label="Version 2.1.0" description="Released March 15, 2024">
## New features
- Added bulk user import functionality
- Improved error messages with actionable suggestions

## Bug fixes
- Fixed pagination issue with large datasets
- Resolved authentication timeout problems
</Update>

## Required page structure

Every documentation page must begin with YAML frontmatter:

```yaml
---
title: "Clear, specific, keyword-rich title"
description: "Concise description explaining page purpose and value"
---
```

## Content quality standards

### Code examples requirements

- Always include complete, runnable examples that users can copy and execute
- Show proper error handling and edge case management
- Use realistic data instead of placeholder values
- Include expected outputs and results for verification
- Test all code examples thoroughly before publishing
- Specify language and include filename when relevant
- Add explanatory comments for complex logic
- Never include real API keys or secrets in code examples

### API documentation requirements

- Document all parameters including optional ones with clear descriptions
- Show both success and error response examples with realistic data
- Include rate limiting information with specific limits
- Provide authentication examples showing proper format
- Explain all HTTP status codes and error handling
- Cover complete request/response cycles

### Accessibility requirements

- Include descriptive alt text for all images and diagrams
- Use specific, actionable link text instead of "click here"
- Ensure proper heading hierarchy starting with H2
- Provide keyboard navigation considerations
- Use sufficient color contrast in examples and visuals
- Structure content for easy scanning with headers and lists

## Component selection logic

- Use **Steps** for procedures and sequential instructions
- Use **Tabs** for platform-specific content or alternative approaches
- Use **CodeGroup** when showing the same concept in multiple programming languages
- Use **Accordions** for progressive disclosure of information
- Use **RequestExample/ResponseExample** specifically for API endpoint documentation
- Use **ParamField** for API parameters, **ResponseField** for API responses
- Use **Expandable** for nested object properties or hierarchical information
````


# Deployments
Source: https://mintlify.com/docs/guides/deployments

Troubleshoot your deployments

Your documentation site automatically deploys when you push changes to your connected repository. This requires the Mintlify GitHub app to be properly installed and connected.

If your latest changes are not appearing on your live site, first check that the GitHub app is installed on the account or organization that owns your docs repository. See [GitHub troubleshooting](/settings/github#troubleshooting) for more information.

If the GitHub app is connected, but changes are still not deploying, you can manually trigger a rebuild from your dashboard.

## Manually triggering a deployment

<Steps>
  <Step title="Verify your latest commit was successful.">
    Check that your latest commit appears in your docs repository and did not encounter any errors.
  </Step>

  <Step title="Manually trigger a deployment.">
    Go to your [dashboard](https://dashboard.mintlify.com) and select the deploy button.

    <Frame>
      <img src="https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/deployments/manual-update-light.png?maxW=1354&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=0026f3a5dd7ed797ecae1c9abaef97fb" alt="The manual update button emphasized with an orange rectangle." className="block dark:hidden" width="1354" height="192" data-path="images/deployments/manual-update-light.png" srcset="https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/deployments/manual-update-light.png?w=280&maxW=1354&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=fe204abcfd1a71a916d90220f5e08f11 280w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/deployments/manual-update-light.png?w=560&maxW=1354&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=e558d1338e21863a8ee1502209f7d1cf 560w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/deployments/manual-update-light.png?w=840&maxW=1354&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=82f7473643bbf1ea405b5ee818bdbf1b 840w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/deployments/manual-update-light.png?w=1100&maxW=1354&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=f0b06c40f0ec174ab13a8acaf547e190 1100w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/deployments/manual-update-light.png?w=1650&maxW=1354&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=3aa919d1336899f1bbf163ba8ec0ba1f 1650w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/deployments/manual-update-light.png?w=2500&maxW=1354&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=1219cfd3a342b04f6fd10fc18bfaa868 2500w" data-optimize="true" data-opv="2" />

      <img src="https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/deployments/manual-update-dark.png?maxW=1354&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=3fa8414c7d5d7e41a53fb6204ec7fb1b" alt="The manual update button emphasized with an orange rectangle." className="hidden dark:block" width="1354" height="192" data-path="images/deployments/manual-update-dark.png" srcset="https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/deployments/manual-update-dark.png?w=280&maxW=1354&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=f99830d6aaa84985b0e2a1c1b6c963bb 280w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/deployments/manual-update-dark.png?w=560&maxW=1354&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=484f644fb3f4081f556367803cee830e 560w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/deployments/manual-update-dark.png?w=840&maxW=1354&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=9204660fb5bf6c07c703c16e5a96b69b 840w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/deployments/manual-update-dark.png?w=1100&maxW=1354&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=e04263748efc8d18aa3077febd341489 1100w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/deployments/manual-update-dark.png?w=1650&maxW=1354&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=fcc6a1f09182a2b004475f7d76bd22dc 1650w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/deployments/manual-update-dark.png?w=2500&maxW=1354&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=e6b79f88416d6063c5e56d4c6aca78e6 2500w" data-optimize="true" data-opv="2" />
    </Frame>
  </Step>
</Steps>


# GEO guide: Optimize docs for AI search and answer engines
Source: https://mintlify.com/docs/guides/geo

Make your documentation more discoverable and cited more frequently by AI tools

Optimize your documentation for both traditional search engines and AI-powered answer engines like ChatGPT, Perplexity, and Google AI Overviews.

Generative Engine Optimization (GEO) focuses on being cited by AI systems through comprehensive content and structured information, while traditional SEO targets search result rankings.

## GEO quickstart

### Initial setup

1. **Make sure your docs are being indexed** in your `docs.json` settings
2. **Audit current pages** for missing descriptions and titles

### Content improvements

1. **Add comparison tables** to appropriate pages
2. **Audit headings** to ensure they answer common questions
3. **Improve internal linking** between related topics
4. **Test with AI tools** to verify accuracy

## GEO best practices

In general, well written and well structured documentation will have strong GEO. You should still prioritize writing for your users, and if your content is meeting their needs, you will be well on your way to optimizing for AI tools. Creating genuinely helpful content rather than optimizing for optimization's sake is rewarded by both traditional and AI search engines.

Focus on:

* Content aligned to user needs rather than keyword matching
* Structured, scannable information
* Direct answers to questions

### Format for clarity

These formatting practices help AI tools parse and understand your content:

* Don't skip heading levels (H1 → H2 → H3)
* Use specific object names instead of "it" or "this"
* Label code blocks with their programming language
* Give images descriptive alt text
* Link to related concepts to help AI understand relationships

### Answer questions directly

Write content that addresses specific user questions:

* Begin sections with the main takeaway
* Use descriptive headings that match common queries
* Break complex topics into numbered steps

## Mintlify configuration

Use these features to improve GEO.

### Add descriptive page metadata

Include clear titles and descriptions in your frontmatter:

```mdx
---
title: "API authentication guide"
description: "Complete guide to implementing API authentication with code examples"
---
```

### Configure global indexing settings

Add to your `docs.json`:

```json
{
  "seo": {
    "indexing": "all",
    "metatags": {
      "og:type": "website",
      "og:site_name": "Your docs"
    }
  }
}
```

### LLMs.txt

LLMs.txt files help AI systems understand your documentation structure, similar to how sitemaps help search engines. Mintlify automatically generates LLMs.txt files for your docs. No configuration is required.

## Testing your documentation

Test various AI tools with questions about your product and documentation to see how well your docs are being cited.

**Ask AI assistants specific questions about your docs:**

* "How do I set up authentication using this API?"
* "Walk me through the installation process step by step"

**Check that tools provide:**

* Correct code samples
* Accurate step-by-step instructions


# Hidden pages
Source: https://mintlify.com/docs/guides/hidden-pages

Exclude pages from your navigation

Hidden pages are removed from your site's navigation but remain publicly accessible to anyone who knows their URL.

Use hidden pages for content that you want to be accessible on your site or referenced as context for AI tools, but not discoverable through the navigation.

For content requiring strict access control, you must configure [authentication](/authentication-personalization/authentication-setup).

If you want to hide pages for specific groups of users, use personalization to control [page visibility](/authentication-personalization/overview#page-visibility).

## Hiding a page

A page is hidden if it is not included in your `docs.json` navigation. To hide a page, remove it from your navigation structure.

Hidden pages use the same URL structure as regular pages based on their file path.  For example,  `guides/hidden-page.mdx` would be accessible at `docs.yoursite.com/guides/hidden-page`.

See an [example of a hidden page](/guides/hidden-page-example).

<Note>
  Some navigation elements like sidebars, dropdowns, and tabs may appear empty or shift layout on hidden pages.
</Note>

## Hiding a group of pages

A group of pages is hidden if the `hidden` property is set to `true` in your `docs.json` file:

```json highlight={4}
"groups": [
  {
    "group": "Getting started",
    "hidden": true,
    "pages": [
      "index",
      "quickstart"
    ]
  },
  {
    "group": "Guides",
    "pages": [
      "guides/hidden-page.mdx",
      "guides/hidden-groups.mdx"
    ]
  }
]
```

In this example, the `Getting started` group is hidden, but the `Guides` group is visible.

### Hiding a tab

You can also hide a tab by adding the `hidden` property to your `docs.json` file:

```json highlight={4}
"tabs": [
  {
    "tab": "Home",
    "hidden": true,
    "pages": [
      "index",
      "quickstart"
    ]
  }
]
```

## Search, SEO, and AI indexing

By default, hidden pages are excluded from indexing for search engines, internal search within your docs, and as context for the AI assistant. To include hidden pages in search results and as context for the assistant, add the `seo` property to your `docs.json`:

```json
"seo": {
    "indexing": "all"
}
```

To exclude a specific page, add `noindex: "true"` to its frontmatter.


# Migrations
Source: https://mintlify.com/docs/guides/migration

How to migrate documentation from your current platform

This guide helps you move your existing documentation to Mintlify. Choose automated migration for supported platforms or manual migration for complete control over the process.

## Choose your migration path

<CardGroup cols="2">
  <Card title="Automated migration" icon="wand-sparkles">
    If you are migrating from Docusaurus, ReadMe, or GitBook, use our tools to automate your migration.
  </Card>

  <Card title="Manual migration" icon="pencil-ruler">
    If you are migrating from any other platform, follow our guide to migrate your content.
  </Card>
</CardGroup>

<Tabs>
  <Tab title="Automated migration">
    Migrate your documentation using the [@mintlify/scraping package](https://www.npmjs.com/package/@mintlify/scraping). The package scrapes your content and converts it to use Mintlify components.

    ### Supported Platforms

    <Columns cols="3">
      <Card
        title="Docusaurus"
        icon={<svg className="h-6 w-6" width="36" height="36" viewBox="0 -19 256 256" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" preserveAspectRatio="xMidYMid">
  <g>
  		<rect fill="#FFFFFF" x="126.030769" y="45.9487179" width="110.276923" height="44.6358974">

</rect>
  		<path d="M26.2564103,191.671795 C16.5441641,191.671795 8.0830359,186.385067 3.54067692,178.54359 C1.30231795,182.408533 0,186.883938 0,191.671795 C0,206.17321 11.7549949,217.928205 26.2564103,217.928205 L52.5128205,217.928205 L52.5128205,191.671795 L26.2564103,191.671795 Z" fill="#3ECC5F">

</path>
  		<path d="M144.384656,53.006441 L236.308349,47.2615385 L236.308349,34.1333333 C236.308349,19.6319179 224.552041,7.87692308 210.051938,7.87692308 L91.8980923,7.87692308 L88.616041,2.19241026 C87.1561846,-0.334769231 83.5104821,-0.334769231 82.0519385,2.19241026 L78.7698872,7.87692308 L75.4878359,2.19241026 C74.0279795,-0.334769231 70.3822769,-0.334769231 68.9237333,2.19241026 L65.6416821,7.87692308 L62.3596308,2.19241026 C60.8997744,-0.334769231 57.2540718,-0.334769231 55.7955282,2.19241026 L52.5134769,7.87692308 C52.4845949,7.87692308 52.4570256,7.88086154 52.4281436,7.88086154 L46.990441,2.44447179 C44.928,0.382030769 41.4070154,1.3246359 40.6508308,4.14326154 L38.8548923,10.8438974 L32.0374154,9.01645128 C29.2187897,8.26157949 26.6404103,10.839959 27.3965949,13.6585846 L29.2227282,20.4760615 L22.5234051,22.2706872 C19.7047795,23.0268718 18.7608615,26.5491692 20.8233026,28.6116103 L26.2596923,34.0493128 C26.2596923,34.0768821 26.2570667,34.1044513 26.2570667,34.1333333 L20.571241,37.4153846 C18.0453744,38.8739282 18.0453744,42.5209436 20.571241,43.9794872 L26.2570667,47.2615385 L20.571241,50.5435897 C18.0453744,52.0021333 18.0453744,55.6491487 20.571241,57.1076923 L26.2570667,60.3897436 L20.571241,63.6717949 C18.0453744,65.1303385 18.0453744,68.7773538 20.571241,70.2358974 L26.2570667,73.5179487 L20.571241,76.8 C18.0453744,78.2585436 18.0453744,81.905559 20.571241,83.3641026 L26.2570667,86.6461538 L20.571241,89.9282051 C18.0453744,91.3867487 18.0453744,95.0337641 20.571241,96.4923077 L26.2570667,99.774359 L20.571241,103.05641 C18.0453744,104.514954 18.0453744,108.161969 20.571241,109.620513 L26.2570667,112.902564 L20.571241,116.184615 C18.0453744,117.643159 18.0453744,121.290174 20.571241,122.748718 L26.2570667,126.030769 L20.571241,129.312821 C18.0453744,130.771364 18.0453744,134.418379 20.571241,135.876923 L26.2570667,139.158974 L20.571241,142.441026 C18.0453744,143.899569 18.0453744,147.546585 20.571241,149.005128 L26.2570667,152.287179 L20.571241,155.569231 C18.0453744,157.027774 18.0453744,160.67479 20.571241,162.133333 L26.2570667,165.415385 L20.571241,168.697436 C18.0453744,170.155979 18.0453744,173.802995 20.571241,175.261538 L26.2570667,178.54359 L20.571241,181.825641 C18.0453744,183.284185 18.0453744,186.9312 20.571241,188.389744 L26.2570667,191.671795 C26.2570667,206.17321 38.0120615,217.928205 52.5134769,217.928205 L210.051938,217.928205 C224.552041,217.928205 236.308349,206.17321 236.308349,191.671795 L236.308349,86.6461538 L144.384656,80.9012513 C137.019733,80.4404513 131.282708,74.3332103 131.282708,66.9538462 C131.282708,59.5744821 137.019733,53.467241 144.384656,53.006441" fill="#3ECC5F">

</path>
  		<polygon fill="#3ECC5F" points="183.794872 217.928205 223.179487 217.928205 223.179487 165.415385 183.794872 165.415385">

</polygon>
  		<path d="M249.435897,185.107692 C249.14839,185.107692 248.87401,185.156267 248.597005,185.191713 C248.547118,184.99479 248.499856,184.796554 248.444718,184.599631 C250.815672,183.609764 252.481641,181.272944 252.481641,178.54359 C252.481641,174.917579 249.543549,171.979487 245.917538,171.979487 C244.423549,171.979487 243.062154,172.499364 241.958072,173.339569 C241.812349,173.191221 241.666626,173.044185 241.518277,172.898462 C242.341415,171.800944 242.845538,170.45399 242.845538,168.977067 C242.845538,165.351056 239.907446,162.412964 236.281436,162.412964 C233.570462,162.412964 231.244144,164.057928 230.243774,166.405251 C230.049477,166.350113 229.853867,166.304164 229.659569,166.254277 C229.695015,165.977272 229.74359,165.702892 229.74359,165.415385 C229.74359,161.789374 226.805497,158.851282 223.179487,158.851282 C219.553477,158.851282 216.615385,161.789374 216.615385,165.415385 C216.615385,165.702892 216.663959,165.977272 216.699405,166.254277 C216.505108,166.304164 216.309497,166.350113 216.1152,166.405251 C215.114831,164.057928 212.788513,162.412964 210.077538,162.412964 C206.451528,162.412964 203.513436,165.351056 203.513436,168.977067 C203.513436,170.45399 204.017559,171.800944 204.840697,172.898462 C199.960944,177.666626 196.923077,184.31081 196.923077,191.671795 C196.923077,206.17321 208.678072,217.928205 223.179487,217.928205 C235.439918,217.928205 245.707487,209.513026 248.597005,198.151877 C248.87401,198.187323 249.14839,198.235897 249.435897,198.235897 C253.061908,198.235897 256,195.297805 256,191.671795 C256,188.045785 253.061908,185.107692 249.435897,185.107692" fill="#44D860">

</path>
  		<polygon fill="#3ECC5F" points="196.923077 139.158974 236.307692 139.158974 236.307692 112.902564 196.923077 112.902564">

</polygon>
  		<path d="M249.435897,129.312821 C251.248903,129.312821 252.717949,127.843774 252.717949,126.030769 C252.717949,124.217764 251.248903,122.748718 249.435897,122.748718 C249.2928,122.748718 249.154954,122.773662 249.017108,122.790728 C248.990851,122.692267 248.968533,122.593805 248.940964,122.495344 C250.125128,122.00041 250.958769,120.830687 250.958769,119.466667 C250.958769,117.653662 249.489723,116.184615 247.676718,116.184615 C246.929723,116.184615 246.248369,116.443241 245.696985,116.864656 C245.624779,116.789826 245.551262,116.716308 245.476431,116.644103 C245.888656,116.096656 246.140718,115.421867 246.140718,114.682749 C246.140718,112.871056 244.671672,111.400697 242.858667,111.400697 C241.502523,111.400697 240.339364,112.223836 239.839179,113.397497 C238.714092,113.083733 237.533867,112.902564 236.307692,112.902564 C229.058297,112.902564 223.179487,118.781374 223.179487,126.030769 C223.179487,133.280164 229.058297,139.158974 236.307692,139.158974 C237.533867,139.158974 238.714092,138.977805 239.839179,138.664041 C240.339364,139.837703 241.502523,140.660841 242.858667,140.660841 C244.671672,140.660841 246.140718,139.190482 246.140718,137.37879 C246.140718,136.639672 245.888656,135.964882 245.476431,135.417436 C245.551262,135.345231 245.624779,135.271713 245.696985,135.196882 C246.248369,135.618297 246.929723,135.876923 247.676718,135.876923 C249.489723,135.876923 250.958769,134.407877 250.958769,132.594872 C250.958769,131.230851 250.125128,130.061128 248.940964,129.566195 C248.968533,129.469046 248.990851,129.369272 249.017108,129.27081 C249.154954,129.287877 249.2928,129.312821 249.435897,129.312821" fill="#44D860">

</path>
  		<path d="M78.7692308,50.5435897 C76.9562256,50.5435897 75.4871795,49.0745436 75.4871795,47.2615385 C75.4871795,41.8317128 71.0708513,37.4153846 65.6410256,37.4153846 C60.2112,37.4153846 55.7948718,41.8317128 55.7948718,47.2615385 C55.7948718,49.0745436 54.3258256,50.5435897 52.5128205,50.5435897 C50.6998154,50.5435897 49.2307692,49.0745436 49.2307692,47.2615385 C49.2307692,38.2122667 56.5917538,30.8512821 65.6410256,30.8512821 C74.6902974,30.8512821 82.0512821,38.2122667 82.0512821,47.2615385 C82.0512821,49.0745436 80.5822359,50.5435897 78.7692308,50.5435897" fill="#000000">

</path>
  		<path d="M131.282051,217.928205 L210.051282,217.928205 C224.552697,217.928205 236.307692,206.17321 236.307692,191.671795 L236.307692,99.774359 L157.538462,99.774359 C143.037046,99.774359 131.282051,111.529354 131.282051,126.030769 L131.282051,217.928205 Z" fill="#FFFF50">

</path>
  		<path d="M216.640985,140.471795 L150.948759,140.471795 C150.222769,140.471795 149.635938,139.884964 149.635938,139.158974 C149.635938,138.432985 150.222769,137.846154 150.948759,137.846154 L216.640985,137.846154 C217.366974,137.846154 217.953805,138.432985 217.953805,139.158974 C217.953805,139.884964 217.366974,140.471795 216.640985,140.471795" fill="#000000">

</path>
  		<path d="M216.640985,166.728205 L150.948759,166.728205 C150.222769,166.728205 149.635938,166.141374 149.635938,165.415385 C149.635938,164.689395 150.222769,164.102564 150.948759,164.102564 L216.640985,164.102564 C217.366974,164.102564 217.953805,164.689395 217.953805,165.415385 C217.953805,166.141374 217.366974,166.728205 216.640985,166.728205" fill="#000000">

</path>
  		<path d="M216.640985,192.984615 L150.948759,192.984615 C150.222769,192.984615 149.635938,192.397785 149.635938,191.671795 C149.635938,190.945805 150.222769,190.358974 150.948759,190.358974 L216.640985,190.358974 C217.366974,190.358974 217.953805,190.945805 217.953805,191.671795 C217.953805,192.397785 217.366974,192.984615 216.640985,192.984615" fill="#000000">

</path>
  		<path d="M216.640985,127.587118 L150.948759,127.587118 C150.222769,127.587118 149.635938,126.998974 149.635938,126.274297 C149.635938,125.548308 150.222769,124.961477 150.948759,124.961477 L216.640985,124.961477 C217.366974,124.961477 217.953805,125.548308 217.953805,126.274297 C217.953805,126.998974 217.366974,127.587118 216.640985,127.587118" fill="#000000">

</path>
  		<path d="M216.640985,153.6 L150.948759,153.6 C150.222769,153.6 149.635938,153.013169 149.635938,152.287179 C149.635938,151.56119 150.222769,150.974359 150.948759,150.974359 L216.640985,150.974359 C217.366974,150.974359 217.953805,151.56119 217.953805,152.287179 C217.953805,153.013169 217.366974,153.6 216.640985,153.6" fill="#000000">

</path>
  		<path d="M216.640985,179.85641 L150.948759,179.85641 C150.222769,179.85641 149.635938,179.269579 149.635938,178.54359 C149.635938,177.8176 150.222769,177.230769 150.948759,177.230769 L216.640985,177.230769 C217.366974,177.230769 217.953805,177.8176 217.953805,178.54359 C217.953805,179.269579 217.366974,179.85641 216.640985,179.85641" fill="#000000">

</path>
  		<path d="M236.307692,58.5666297 C236.291938,58.5666297 236.27881,58.5587528 236.263056,58.5600656 C232.206441,58.6979118 230.287097,62.75584 228.593559,66.3359015 C226.826503,70.0761272 225.459856,72.5100964 223.220185,72.4365785 C220.740267,72.3473067 219.322421,69.5457477 217.820554,66.5800862 C216.095508,63.1759426 214.126277,59.3136246 209.992205,59.4580349 C205.993354,59.5945682 204.067446,63.1260554 202.368656,66.2413785 C200.560903,69.5601887 199.33079,71.5779938 196.958523,71.4847836 C194.428718,71.3928862 193.08439,69.1151426 191.528697,66.478999 C189.794462,63.5435323 187.789785,60.2431015 183.735795,60.3560041 C179.80521,60.4912246 177.874051,63.487081 176.17001,66.1324144 C174.367508,68.9287221 173.104574,70.6327631 170.702113,70.5316759 C168.111918,70.4384656 166.774154,68.5493169 165.226338,66.3608451 C163.488164,63.9019323 161.529436,61.1187528 157.487262,61.2539733 C153.643323,61.3852554 151.712164,63.8389169 150.009436,66.0037579 C148.392041,68.0570092 147.129108,69.682281 144.457518,69.579881 C143.732841,69.550999 143.125005,70.1194503 143.098749,70.84544 C143.071179,71.5688041 143.638318,72.1779528 144.362995,72.2055221 C148.323774,72.3381169 150.329764,69.8411323 152.071877,67.6277169 C153.617067,65.6637374 154.950892,63.9688862 157.576533,63.8796144 C160.105026,63.7719631 161.290503,65.3434092 163.083815,67.8771528 C164.786544,70.2848656 166.719015,73.0155323 170.60759,73.1560041 C174.681272,73.2925374 176.641313,70.2481067 178.376862,67.554199 C179.928615,65.1464862 181.267692,63.0682913 183.825067,62.9803323 C186.178954,62.8923733 187.460267,64.75264 189.266708,67.8128246 C190.969436,70.6970913 192.897969,73.9647015 196.864,74.1091118 C200.966564,74.2508964 202.94761,70.6682092 204.673969,67.4990605 C206.169272,64.7578913 207.580554,62.1676964 210.081477,62.0823631 C212.435364,62.0272246 213.662851,64.1763118 215.478482,67.7668759 C217.174646,71.1185067 219.097928,74.9151836 223.125662,75.0609067 C223.200492,75.0635323 223.27401,75.0648451 223.347528,75.0648451 C227.37001,75.0648451 229.278851,71.0279221 230.968451,67.4583631 C232.463754,64.2944656 233.878974,61.3130503 236.307692,61.1922708 L236.307692,58.5666297 Z" fill="#000000">

</path>
  		<polygon fill="#3ECC5F" points="105.025641 217.928205 157.538462 217.928205 157.538462 165.415385 105.025641 165.415385">

</polygon>
  		<path d="M183.794872,185.107692 C183.507364,185.107692 183.232985,185.156267 182.955979,185.191713 C182.906092,184.99479 182.858831,184.796554 182.803692,184.599631 C185.174646,183.609764 186.840615,181.272944 186.840615,178.54359 C186.840615,174.917579 183.902523,171.979487 180.276513,171.979487 C178.782523,171.979487 177.421128,172.499364 176.317046,173.339569 C176.171323,173.191221 176.0256,173.044185 175.877251,172.898462 C176.70039,171.800944 177.204513,170.45399 177.204513,168.977067 C177.204513,165.351056 174.266421,162.412964 170.64041,162.412964 C167.929436,162.412964 165.603118,164.057928 164.602749,166.405251 C164.408451,166.350113 164.212841,166.304164 164.018544,166.254277 C164.05399,165.977272 164.102564,165.702892 164.102564,165.415385 C164.102564,161.789374 161.164472,158.851282 157.538462,158.851282 C153.912451,158.851282 150.974359,161.789374 150.974359,165.415385 C150.974359,165.702892 151.022933,165.977272 151.058379,166.254277 C150.864082,166.304164 150.668472,166.350113 150.474174,166.405251 C149.473805,164.057928 147.147487,162.412964 144.436513,162.412964 C140.810503,162.412964 137.87241,165.351056 137.87241,168.977067 C137.87241,170.45399 138.376533,171.800944 139.199672,172.898462 C134.319918,177.666626 131.282051,184.31081 131.282051,191.671795 C131.282051,206.17321 143.037046,217.928205 157.538462,217.928205 C169.798892,217.928205 180.066462,209.513026 182.955979,198.151877 C183.232985,198.187323 183.507364,198.235897 183.794872,198.235897 C187.420882,198.235897 190.358974,195.297805 190.358974,191.671795 C190.358974,188.045785 187.420882,185.107692 183.794872,185.107692" fill="#44D860">

</path>
  		<polygon fill="#3ECC5F" points="105.025641 139.158974 157.538462 139.158974 157.538462 112.902564 105.025641 112.902564">

</polygon>
  		<path d="M170.666667,129.312821 C172.479672,129.312821 173.948718,127.843774 173.948718,126.030769 C173.948718,124.217764 172.479672,122.748718 170.666667,122.748718 C170.523569,122.748718 170.385723,122.773662 170.247877,122.790728 C170.221621,122.692267 170.199303,122.593805 170.171733,122.495344 C171.355897,122.00041 172.189538,120.830687 172.189538,119.466667 C172.189538,117.653662 170.720492,116.184615 168.907487,116.184615 C168.160492,116.184615 167.479138,116.443241 166.927754,116.864656 C166.855549,116.789826 166.782031,116.716308 166.7072,116.644103 C167.119426,116.096656 167.371487,115.421867 167.371487,114.682749 C167.371487,112.871056 165.902441,111.400697 164.089436,111.400697 C162.733292,111.400697 161.570133,112.223836 161.069949,113.397497 C159.944862,113.083733 158.764636,112.902564 157.538462,112.902564 C150.289067,112.902564 144.410256,118.781374 144.410256,126.030769 C144.410256,133.280164 150.289067,139.158974 157.538462,139.158974 C158.764636,139.158974 159.944862,138.977805 161.069949,138.664041 C161.570133,139.837703 162.733292,140.660841 164.089436,140.660841 C165.902441,140.660841 167.371487,139.190482 167.371487,137.37879 C167.371487,136.639672 167.119426,135.964882 166.7072,135.417436 C166.782031,135.345231 166.855549,135.271713 166.927754,135.196882 C167.479138,135.618297 168.160492,135.876923 168.907487,135.876923 C170.720492,135.876923 172.189538,134.407877 172.189538,132.594872 C172.189538,131.230851 171.355897,130.061128 170.171733,129.566195 C170.199303,129.469046 170.221621,129.369272 170.247877,129.27081 C170.385723,129.287877 170.523569,129.312821 170.666667,129.312821" fill="#44D860">

</path>
  		<path d="M183.794872,32.4923077 C183.584821,32.4923077 183.361641,32.4660513 183.15159,32.4266667 C182.941538,32.3872821 182.730174,32.321641 182.534564,32.2428718 C182.337641,32.1641026 182.153846,32.0590769 181.968738,31.9409231 C181.798072,31.8227692 181.628718,31.678359 181.469867,31.5339487 C181.326769,31.3764103 181.182359,31.2188718 181.064205,31.0350769 C180.946051,30.8512821 180.841026,30.6674872 180.760944,30.4705641 C180.683487,30.273641 180.617846,30.0635897 180.578462,29.8535385 C180.539077,29.6434872 180.512821,29.4203077 180.512821,29.2102564 C180.512821,29.0002051 180.539077,28.7770256 180.578462,28.5669744 C180.617846,28.3569231 180.683487,28.16 180.760944,27.9499487 C180.841026,27.7530256 180.946051,27.5692308 181.064205,27.3854359 C181.182359,27.2147692 181.326769,27.0441026 181.469867,26.8865641 C181.628718,26.7421538 181.798072,26.5977436 181.968738,26.4795897 C182.153846,26.3614359 182.337641,26.2564103 182.534564,26.177641 C182.730174,26.0988718 182.941538,26.0332308 183.15159,25.9938462 C183.571692,25.9019487 184.004923,25.9019487 184.438154,25.9938462 C184.646892,26.0332308 184.858256,26.0988718 185.055179,26.177641 C185.25079,26.2564103 185.435897,26.3614359 185.619692,26.4795897 C185.790359,26.5977436 185.959713,26.7421538 186.118564,26.8865641 C186.262974,27.0441026 186.407385,27.2147692 186.525538,27.3854359 C186.643692,27.5692308 186.748718,27.7530256 186.827487,27.9499487 C186.906256,28.16 186.971897,28.3569231 187.011282,28.5669744 C187.049354,28.7770256 187.076923,29.0002051 187.076923,29.2102564 C187.076923,30.0767179 186.721149,30.9300513 186.118564,31.5339487 C185.959713,31.678359 185.790359,31.8227692 185.619692,31.9409231 C185.435897,32.0590769 185.25079,32.1641026 185.055179,32.2428718 C184.858256,32.321641 184.646892,32.3872821 184.438154,32.4266667 C184.228103,32.4660513 184.004923,32.4923077 183.794872,32.4923077" fill="#000000">

</path>
  		<path d="M210.051282,30.8512821 C209.184821,30.8512821 208.344615,30.4968205 207.726277,29.8929231 C207.583179,29.7353846 207.438769,29.5647179 207.320615,29.3940513 C207.202462,29.2102564 207.097436,29.0264615 207.017354,28.8295385 C206.939897,28.6326154 206.874256,28.4225641 206.834872,28.2125128 C206.795487,28.0024615 206.769231,27.7792821 206.769231,27.5692308 C206.769231,26.7027692 207.123692,25.8625641 207.726277,25.2455385 C207.885128,25.1011282 208.054482,24.9567179 208.225149,24.8385641 C208.410256,24.7204103 208.594051,24.6153846 208.790974,24.5366154 C208.986585,24.4578462 209.197949,24.3922051 209.408,24.3528205 C209.828103,24.2609231 210.274462,24.2609231 210.694564,24.3528205 C210.903303,24.3922051 211.114667,24.4578462 211.31159,24.5366154 C211.5072,24.6153846 211.692308,24.7204103 211.876103,24.8385641 C212.046769,24.9567179 212.216123,25.1011282 212.374974,25.2455385 C212.977559,25.8625641 213.333333,26.7027692 213.333333,27.5692308 C213.333333,27.7792821 213.305764,28.0024615 213.267692,28.2125128 C213.228308,28.4225641 213.162667,28.6326154 213.083897,28.8295385 C212.992,29.0264615 212.900103,29.2102564 212.781949,29.3940513 C212.663795,29.5647179 212.519385,29.7353846 212.374974,29.8929231 C212.216123,30.0373333 212.046769,30.1817436 211.876103,30.2998974 C211.692308,30.4180513 211.5072,30.5230769 211.31159,30.6018462 C211.114667,30.6806154 210.903303,30.7462564 210.694564,30.785641 C210.484513,30.8250256 210.261333,30.8512821 210.051282,30.8512821" fill="#000000">

</path>
  </g>
</svg>}
        horizontal
      />

      <Card
        title="ReadMe"
        icon={<svg fill="#177fc4" className="h-6 w-6" width="36" height="36" viewBox="0 0 32 32" xmlns="http://www.w3.org/2000/svg">
<path d="M29.35 4.361h-7.767c-2.672 0-4.994 1.85-5.578 4.461-0.589-2.611-2.906-4.461-5.578-4.461h-7.761c-1.472 0-2.667 1.194-2.667 2.667v13.656c0 1.472 1.194 2.667 2.667 2.667h4.983c5.678 0 7.372 1.355 8.183 4.167 0.039 0.156 0.289 0.156 0.333 0 0.817-2.811 2.511-4.167 8.183-4.167h4.983c1.472 0 2.667-1.194 2.667-2.667v-13.65c0-1.467-1.183-2.661-2.65-2.672zM13.444 19.105c0 0.106-0.083 0.194-0.194 0.194h-8.906c-0.105 0-0.194-0.083-0.194-0.194v-1.272c0-0.105 0.083-0.194 0.194-0.194h8.911c0.105 0 0.194 0.083 0.194 0.194v1.272zM13.444 15.722c0 0.105-0.083 0.194-0.194 0.194h-8.906c-0.105 0-0.194-0.083-0.194-0.194v-1.272c0-0.106 0.083-0.194 0.194-0.194h8.911c0.105 0 0.194 0.083 0.194 0.194v1.272zM13.444 12.339c0 0.105-0.083 0.194-0.194 0.194h-8.906c-0.105 0-0.194-0.083-0.194-0.194v-1.272c0-0.105 0.083-0.194 0.194-0.194h8.911c0.105 0 0.194 0.083 0.194 0.194v1.272zM27.85 19.1c0 0.105-0.083 0.194-0.194 0.194h-8.906c-0.105 0-0.194-0.083-0.194-0.194v-1.272c0-0.105 0.083-0.194 0.194-0.194h8.911c0.106 0 0.194 0.083 0.194 0.194v1.272zM27.85 15.717c0 0.106-0.083 0.194-0.194 0.194h-8.906c-0.105 0-0.194-0.083-0.194-0.194v-1.272c0-0.105 0.083-0.194 0.194-0.194h8.911c0.106 0 0.194 0.083 0.194 0.194v1.272zM27.85 12.333c0 0.105-0.083 0.194-0.194 0.194h-8.906c-0.105 0-0.194-0.083-0.194-0.194v-1.267c0-0.105 0.083-0.194 0.194-0.194h8.911c0.106 0 0.194 0.083 0.194 0.194v1.267z"/>
</svg>}
        horizontal
      />

      <Card
        title="GitBook (beta)"
        icon={<svg role="img" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" height="24" width="24">
<path d="M12.513 1.097c-0.645 0 -1.233 0.34 -2.407 1.017L3.675 5.82A7.233 7.233 0 0 0 0 12.063v0.236a7.233 7.233 0 0 0 3.667 6.238L7.69 20.86c2.354 1.36 3.531 2.042 4.824 2.042 1.292 0.001 2.47 -0.678 4.825 -2.038l4.251 -2.453c1.177 -0.68 1.764 -1.02 2.087 -1.579 0.323 -0.56 0.324 -1.24 0.323 -2.6v-2.63a1.04 1.04 0 0 0 -1.558 -0.903l-8.728 5.024c-0.587 0.337 -0.88 0.507 -1.201 0.507 -0.323 0 -0.616 -0.168 -1.204 -0.506l-5.904 -3.393c-0.297 -0.171 -0.446 -0.256 -0.565 -0.271a0.603 0.603 0 0 0 -0.634 0.368c-0.045 0.111 -0.045 0.282 -0.043 0.625 0.002 0.252 0 0.378 0.025 0.494 0.053 0.259 0.189 0.493 0.387 0.667 0.089 0.077 0.198 0.14 0.416 0.266l6.315 3.65c0.589 0.34 0.884 0.51 1.207 0.51 0.324 0 0.617 -0.17 1.206 -0.509l7.74 -4.469c0.202 -0.116 0.302 -0.172 0.377 -0.13 0.075 0.044 0.075 0.16 0.075 0.392v1.193c0 0.34 0.001 0.51 -0.08 0.649 -0.08 0.14 -0.227 0.224 -0.522 0.394l-6.382 3.685c-1.178 0.68 -1.767 1.02 -2.413 1.02 -0.646 0 -1.236 -0.34 -2.412 -1.022l-5.97 -3.452 -0.043 -0.025a4.106 4.106 0 0 1 -2.031 -3.52V11.7c0 -0.801 0.427 -1.541 1.12 -1.944a1.979 1.979 0 0 1 1.982 -0.001l4.946 2.858c1.174 0.679 1.762 1.019 2.407 1.02 0.645 0 1.233 -0.34 2.41 -1.017l7.482 -4.306a1.091 1.091 0 0 0 0 -1.891L14.92 2.11c-1.175 -0.675 -1.762 -1.013 -2.406 -1.013Z" fill="#currentColor" stroke-width="1"></path>
</svg>}
        horizontal
      />
    </Columns>

    If your documentation is hosted on another platform, see the manual migration steps.

    ### Installing the scraper

    Install the `@mintlify/scraping` package to get started.

    ```bash
    npm install @mintlify/scraping@latest -g
    ```

    ### Scraping pages and sections

    The migration tool automatically detects your documentation platform and converts your content. Prepared files are stored locally in `./docs` by default.

    For large documentation sites, migrate smaller sections at a time rather than the entire site at once.

    **Migrate entire sections:**

    ```bash
    mintlify-scrape section https://your-docs-site.com/docs
    ```

    **Migrate single pages:**

    ```bash
    mintlify-scrape page https://your-docs-site.com/docs/getting-started
    ```

    **Migrate OpenAPI specifications:**

    ```bash
    mintlify-scrape openapi-file [openApiFilename]
    ```

    ### Add prepared content to your Mintlify project

    After scraping your existing documentation platform, you are ready to build your docs on Mintlify.

    Confirm that all of your pages have been migrated then add these files to the documentation repository that you created during the onboarding process. This is usually a GitHub repository.
  </Tab>

  <Tab title="Manual migration">
    Migrate your documentation from any platform with full control over the process.

    ### Content migration

    To migrate your content to Mintlify, you will need:

    * A valid `docs.json` for your site settings and navigation. See [Global settings](/settings) and [Navigation](/navigation) for more information.
    * An `MDX` file for each page of your documentation. See [Pages](/pages) for more information.
    * (Optional) An OpenAPI specification for your API endpoint pages. See [OpenAPI setup](/api-playground/openapi-setup) for more information.

    1. If your content is already in `MDX` format, copy the pages to your Mintlify project. Otherwise, convert your content to `MDX` format.
    2. Create your `docs.json` referencing the paths to your `MDX` pages.
    3. If you have OpenAPI specifications, add them to your `docs.json` and configure the API playground.

    ### Asset migration

    1. Copy assets to your repository's `images/` directory.
    2. Update references in your `MDX` files:
       ```mdx
       ![Alt text](/images/screenshot.png)
       ```
  </Tab>
</Tabs>

## Post-migration checklist

After completing your migration (automated or manual), we recommend checking:

* All pages render
* Navigation works as intended
* Internal links resolve properly
* Images and assets load correctly
* Code blocks display with proper syntax highlighting
* Search functionality works
* Deployment is configured
* Custom domain is set up


# Monorepo setup
Source: https://mintlify.com/docs/guides/monorepo

Deploy your docs from a repo that contains multiple projects

Configure Mintlify to deploy documentation from a specific directory within a monorepo. This setup allows you to maintain documentation alongside your code in repositories that contain multiple projects or services.

## Prerequisites

* Admin access to your Mintlify project.
* Documentation files organized in a dedicated directory within your monorepo.
* A valid `docs.json` in your documentation directory.

## Configure monorepo deployment

<Steps>
  <Step title="Access Git settings">
    Navigate to [Git Settings](https://dashboard.mintlify.com/settings/deployment/git-settings) in your dashboard.

    <Frame>
      <img className="block dark:hidden my-0 pointer-events-none" src="https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/monorepo-light.png?maxW=1350&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=e67afcf590f12d95f39bf2950b815ccb" alt="The project settings panel in the Git Settings menu. The Set up as monorepo toggle button is enabled and a path to the /docs directory is specified." width="1350" height="900" data-path="images/monorepo-light.png" srcset="https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/monorepo-light.png?w=280&maxW=1350&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=ab98d716dd71dd53af23a0a91cd206d0 280w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/monorepo-light.png?w=560&maxW=1350&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=d412e41eccbefc64f1d1c7eb1064e63c 560w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/monorepo-light.png?w=840&maxW=1350&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=93da6c685ce28aff4e9798f9fffa7481 840w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/monorepo-light.png?w=1100&maxW=1350&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=0bc529d10b0b5ad100c6ad700bb9da86 1100w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/monorepo-light.png?w=1650&maxW=1350&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=d2ced325531eedb2cb4965b5e8a68cf1 1650w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/monorepo-light.png?w=2500&maxW=1350&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=8914fa14aed75921f0112ae9b5bf3ba7 2500w" data-optimize="true" data-opv="2" />

      <img className="hidden dark:block my-0 pointer-events-none" src="https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/monorepo-dark.png?maxW=1350&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=53c40163b3542b746483b8e8208c3d67" alt="The project settings panel in the Git Settings menu. The Set up as monorepo toggle button is enabled and a path to the /docs directory is specified." width="1350" height="900" data-path="images/monorepo-dark.png" srcset="https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/monorepo-dark.png?w=280&maxW=1350&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=35ddab45a7e28164be9842191d8bea07 280w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/monorepo-dark.png?w=560&maxW=1350&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=b56ac97aad212455ade7c2d5b3efceff 560w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/monorepo-dark.png?w=840&maxW=1350&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=65e2f87d34179e86ce2064a0183f8d87 840w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/monorepo-dark.png?w=1100&maxW=1350&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=331e2ee23bd7fb3b36ad7957385f01c2 1100w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/monorepo-dark.png?w=1650&maxW=1350&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=79c7af6f3773e7254eead7071ea091b1 1650w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/monorepo-dark.png?w=2500&maxW=1350&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=8883780de4bde6c705beb0d1dc2cb467 2500w" data-optimize="true" data-opv="2" />
    </Frame>
  </Step>

  <Step title="Set your documentation path">
    1. Select the **Set up as monorepo** toggle button.
    2. Enter the relative path to your docs directory. For example, if your docs are in the `docs` directory, enter `/docs`.

    <Note>
      Do not include a trailing slash in the path.
    </Note>

    3. Select **Save changes**.
  </Step>
</Steps>


# Windsurf
Source: https://mintlify.com/docs/guides/windsurf

Configure Windsurf to be your writing assistant

Transform Windsurf into a documentation expert that understands your style guide, components, and project context through workspace rules and memories.

## Using Windsurf with Mintlify

Windsurf's Cascade AI assistant can be tuned to write documentation according to your standards using Mintlify components. Workspace rules and memories provide persistent context about your project, ensuring more consistent suggestions from Cascade.

* **Workspace rules** are stored in your documentation repository and shared with your team.
* **Memories** provide individual context that builds up over time.

We recommend setting up workspace rules for shared documentation standards. You can develop memories as you work, but since they are not shared, they will not be consistent across team members.

Create workspace rules in the `.windsurf/rules` directory of your docs repo. See [Memories & Rules](https://docs.windsurf.com/windsurf/cascade/memories) in the Windsurf documentation for more information.

## Example workspace rule

This rule provides Cascade with context about Mintlify components and general technical writing best practices.

You can use this example rule as-is or customize it for your documentation:

* **Writing standards**: Update language guidelines to match your style guide.
* **Component patterns**: Add project-specific components or modify existing examples.
* **Code examples**: Replace generic examples with real API calls and responses for your product.
* **Style and tone preferences**: Adjust terminology, formatting, and other rules.

Save your rule as a `.md` file in the `.windsurf/rules` directory of your docs repo.

````mdx
# Mintlify technical writing rule

## Project context

- This is a documentation project on the Mintlify platform
- We use MDX files with YAML frontmatter  
- Navigation is configured in `docs.json`
- We follow technical writing best practices

## Writing standards

- Use second person ("you") for instructions
- Write in active voice and present tense
- Start procedures with prerequisites
- Include expected outcomes for major steps
- Use descriptive, keyword-rich headings
- Keep sentences concise but informative

## Required page structure

Every page must start with frontmatter:

```yaml
---
title: "Clear, specific title"
description: "Concise description for SEO and navigation"
---
```

## Mintlify components

### docs.json

- Refer to the [docs.json schema](https://mintlify.com/docs.json) when building the docs.json file and site navigation

### Callouts

- `<Note>` for helpful supplementary information
- `<Warning>` for important cautions and breaking changes
- `<Tip>` for best practices and expert advice  
- `<Info>` for neutral contextual information
- `<Check>` for success confirmations

### Code examples

- When appropriate, include complete, runnable examples
- Use `<CodeGroup>` for multiple language examples
- Specify language tags on all code blocks
- Include realistic data, not placeholders
- Use `<RequestExample>` and `<ResponseExample>` for API docs

### Procedures

- Use `<Steps>` component for sequential instructions
- Include verification steps with `<Check>` components when relevant
- Break complex procedures into smaller steps

### Content organization

- Use `<Tabs>` for platform-specific content
- Use `<Accordion>` for progressive disclosure
- Use `<Card>` and `<CardGroup>` for highlighting content
- Wrap images in `<Frame>` components with descriptive alt text

## API documentation requirements

- Document all parameters with `<ParamField>` 
- Show response structure with `<ResponseField>`
- Include both success and error examples
- Use `<Expandable>` for nested object properties
- Always include authentication examples

## Quality standards

- Test all code examples before publishing
- Use relative paths for internal links
- Include alt text for all images
- Ensure proper heading hierarchy (start with h2)
- Check existing patterns for consistency
````

## Working with Cascade

Once your rules are set up, you can use Cascade to assist with various documentation tasks. See [Cascade](https://docs.windsurf.com/windsurf/cascade) in the Windsurf documentation for more information.

### Example prompts

**Writing new content**:

```text wrap
Create a new page explaining how to authenticate with our API. Include code examples in JavaScript, Python, and cURL.
```

**Improving existing content**:

```text wrap
Review this page and suggest improvements for clarity and component usage. Focus on making the steps easier to follow.
```

**Creating code examples**:

```text wrap
Generate a complete code example showing error handling for this API endpoint. Use realistic data and include expected responses.
```

**Maintaining consistency**:

```text wrap
Check if this new page follows our documentation standards and suggest any needed changes.
```


# Images and embeds
Source: https://mintlify.com/docs/image-embeds

Add images, videos, and iframes

Add images, embed videos, and include interactive content with iframes to your documentation.

All static assets in your docs repository are automatically served at the appropriate path on your domain. For example, if you have `/images/my-logo.png` in your repo, the image will be available at `https://docs.yoursite.com/images/my-logo.png`.

<Frame>
  <img className="rounded-xl" src="https://mintlify-assets.b-cdn.net/bigbend.jpg" alt="Photograph of a scenic landscape with purple flowers in the foreground, mountains in the background, and a blue sky with scattered clouds." />
</Frame>

## Images

Add images to provide visual context, examples, or decoration to your documentation.

### Basic image syntax

Use [Markdown syntax](https://www.markdownguide.org/basic-syntax/#images) to add images to your documentation:

```mdx
![Alt text describing the image](/path/to/image.png)
```

<Tip>
  Always include descriptive alt text to improve accessibility and SEO. The alt text should clearly describe what the image shows.
</Tip>

Image files must be less than 20MB. For larger files, host them on a CDN service like [Amazon S3](https://aws.amazon.com/s3) or [Cloudinary](https://cloudinary.com).

### HTML image embeds

For more control over image display, use HTML `<img>` tags:

```html
<img 
  src="/images/dashboard.png" 
  alt="Main dashboard interface"
  height="300"
  className="rounded-lg"
/>
```

#### Disable zoom functionality

To disable the default zoom on click for images, add the `noZoom` property:

```html highlight="4"
<img 
  src="/images/screenshot.png" 
  alt="Descriptive alt text"
  noZoom 
  height="200"
/>
```

#### Link images

To make an image a clickable link, wrap the image in an anchor tag and add the `noZoom` property:

```html
<a href="https://mintlify.com" target="_blank">
  <img 
    src="/images/logo.png" 
    alt="Mintlify logo"
    noZoom 
    height="100"
  />
</a>
```

<Note>
  Images within anchor tags automatically display a pointer cursor to indicate they are clickable.
</Note>

#### Light and dark mode images

To display different images for light and dark themes, use Tailwind CSS classes:

```html
<!-- Light mode image -->
<img 
  className="block dark:hidden" 
  src="/images/light-mode.png" 
  alt="Light mode interface"
/>

<!-- Dark mode image -->
<img 
  className="hidden dark:block" 
  src="/images/dark-mode.png" 
  alt="Dark mode interface"
/>
```

## Videos

Mintlify supports [HTML tags in Markdown](https://www.markdownguide.org/basic-syntax/#html), giving you flexibility to create rich content.

<Tip>
  Always include fallback text content within video elements for browsers that don't support video playback.
</Tip>

### YouTube embeds

Embed YouTube videos using iframe elements:

```html
<iframe
  className="w-full aspect-video rounded-xl"
  src="https://www.youtube.com/embed/4KzFe50RQkQ"
  title="YouTube video player"
  frameBorder="0"
  allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
  allowFullScreen
></iframe>
```

<Frame>
  <iframe className="w-full aspect-video rounded-xl" src="https://www.youtube.com/embed/4KzFe50RQkQ" title="YouTube video player" frameBorder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowFullScreen />
</Frame>

### Self-hosted videos

Use the HTML `<video>` element for self-hosted video content:

```html
<video
  controls
  className="w-full aspect-video rounded-xl"
  src="link-to-your-video.com"
></video>
```

### Autoplay videos

To autoplay a video, use:

```html
<video
  autoPlay
  muted
  loop
  playsInline
  className="w-full aspect-video rounded-xl"
  src="/videos/demo.mp4"
></video>
```

<Note>
  When using JSX syntax, write double-word attributes in camelCase: `autoPlay`, `playsInline`, `allowFullScreen`.
</Note>

## iframes

Embed external content using iframe elements:

```html
<iframe 
  src="https://example.com/embed" 
  title="Embedded content"
  className="w-full h-96 rounded-xl"
></iframe>
```

## Related resources

<Card title="Frame component reference" icon="frame" horizontal href="/components/frames">
  Learn how to use the Frame component for presenting images.
</Card>


# Introduction
Source: https://mintlify.com/docs/index

Meet the next generation of documentation. AI-native, beautiful out-of-the-box, and built for developers.

export const HeroCard = ({filename, title, description, href}) => {
  return <a className="group cursor-pointer pb-8" href={href}>
      <img src={`https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/hero/${filename}.png`} className="block dark:hidden pointer-events-none group-hover:scale-105 transition-all duration-100" />
      <img src={`https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/hero/${filename}-dark.png`} className="pointer-events-none group-hover:scale-105 transition-all duration-100 hidden dark:block" />
      <h3 className="mt-5 text-gray-900 dark:text-zinc-50 font-medium">
        {title}
      </h3>
      <span className="mt-1.5">{description}</span>
    </a>;
};


<div className="relative">
  <div className="absolute top-0 lg:-top-16 left-0 right-0">
    <img src="https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/hero/background-light.png?maxW=2304&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=61dc1fe51dbe05ca34f311dee88a28c7" className="block dark:hidden pointer-events-none" width="2304" height="776" data-path="images/hero/background-light.png" srcset="https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/hero/background-light.png?w=280&maxW=2304&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=be4ca4e3b076c010c1fa8216b496fef2 280w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/hero/background-light.png?w=560&maxW=2304&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=9ffb5116344b505aef1f112fc9108724 560w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/hero/background-light.png?w=840&maxW=2304&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=016b49b12c64614c820a826a6167830b 840w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/hero/background-light.png?w=1100&maxW=2304&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=a08055bd195ff3c9a194152272af8c20 1100w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/hero/background-light.png?w=1650&maxW=2304&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=1987409f6c784bd01a0823cab6a8ace2 1650w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/hero/background-light.png?w=2500&maxW=2304&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=7bd100b7e9a27e60d48e714b30cf6075 2500w" data-optimize="true" data-opv="2" />

    <img src="https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/hero/background-dark.png?maxW=2304&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=1d79e4e2cfd472c7e28e49ab1e09ba88" className="hidden dark:block pointer-events-none" width="2304" height="776" data-path="images/hero/background-dark.png" srcset="https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/hero/background-dark.png?w=280&maxW=2304&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=54a10f91c4ccb3491b9454bc04db4004 280w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/hero/background-dark.png?w=560&maxW=2304&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=317e13b55ed3b169e6ec6ffaae40248c 560w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/hero/background-dark.png?w=840&maxW=2304&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=aa14c3a0eeb4cc7e65a7de4fde7ff95b 840w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/hero/background-dark.png?w=1100&maxW=2304&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=0a3b803e56fa42867d1500d57ee02ea2 1100w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/hero/background-dark.png?w=1650&maxW=2304&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=bec1ee6cff73b82502ceccfa89f7b364 1650w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/hero/background-dark.png?w=2500&maxW=2304&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=3eff593b73c1884beace776ed2426e5b 2500w" data-optimize="true" data-opv="2" />
  </div>

  <div className="px-4 py-16 lg:py-48 lg:pb-24 max-w-3xl mx-auto">
    <h1 className="block text-4xl font-medium text-center text-gray-900 dark:text-zinc-50 tracking-tight">
      Documentation
    </h1>

    <div className="max-w-xl mx-auto px-4 mt-4 text-lg text-center text-gray-500 dark:text-zinc-500">
      Meet the next generation of documentation. AI-native, beautiful out-of-the-box, and built for developers.
    </div>

    <div className="px-6 lg:px-0 mt-12 lg:mt-24 grid sm:grid-cols-2 gap-x-6 gap-y-4">
      <HeroCard filename="rocket" title="Quickstart" description="Deploy your first docs site in minutes with our step-by-step guide" href="/quickstart" />

      <HeroCard filename="cli" title="CLI installation" description="Install the CLI to preview and develop your docs locally" href="/installation" />

      <HeroCard filename="editor" title="Web editor" description="Make quick updates and manage content with our browser-based editor" href="/editor" />

      <HeroCard filename="components" title="Components" description="Build rich, interactive documentation with our ready-to-use components" href="/text" />
    </div>
  </div>
</div>


# CLI installation
Source: https://mintlify.com/docs/installation

Install the CLI to preview and develop your docs locally

<img className="block dark:hidden my-0 pointer-events-none" src="https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/installation/local-development-light.png?maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=23417603ec6a4aee495a69942bf6b9d9" width="1184" height="320" data-path="images/installation/local-development-light.png" srcset="https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/installation/local-development-light.png?w=280&maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=22731cc815c31ceecfa8d4555aa2840e 280w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/installation/local-development-light.png?w=560&maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=43350fcdb7b9725648a9517c77bd4c65 560w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/installation/local-development-light.png?w=840&maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=7d21d3b91bccb30a24fbb04ad6b23fe3 840w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/installation/local-development-light.png?w=1100&maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=9eec733ce02988d6efe89c4f865e3ec3 1100w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/installation/local-development-light.png?w=1650&maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=bcc4ae7c1fecb127c6c0d7e70a60933c 1650w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/installation/local-development-light.png?w=2500&maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=958c5591c770855b4a2c2e0cc6daab77 2500w" data-optimize="true" data-opv="2" />

<img className="hidden dark:block my-0 pointer-events-none" src="https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/installation/local-development-dark.png?maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=15e6c76376bd8ceb8dc186f352eb7246" width="1184" height="320" data-path="images/installation/local-development-dark.png" srcset="https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/installation/local-development-dark.png?w=280&maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=d80339140d70504bdd7b630b707980da 280w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/installation/local-development-dark.png?w=560&maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=fb4c3432410cb6ca984b4e058f6f8ac6 560w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/installation/local-development-dark.png?w=840&maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=68c28625028c46a5ec9762ad542364ae 840w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/installation/local-development-dark.png?w=1100&maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=7d2bf211bbc4f16aee96fc3dbf4e8d73 1100w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/installation/local-development-dark.png?w=1650&maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=a6b0f45ac218f5d603d3d48b5fcd4182 1650w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/installation/local-development-dark.png?w=2500&maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=f3ed6476f7453cfbccf3b1b066c96bdd 2500w" data-optimize="true" data-opv="2" />

## Installing the CLI

<Info>
  **Prerequisite**: Please install [Node.js](https://nodejs.org/en) before proceeding.
</Info>

<Steps>
  <Step title="Install the CLI.">
    Run the following command to install the [CLI](https://www.npmjs.com/package/mint):

    <CodeGroup>
      ```bash npm
      npm i -g mint
      ```

      ```bash pnpm
      pnpm add -g mint
      ```
    </CodeGroup>
  </Step>

  <Step title="Preview locally.">
    Navigate to your docs directory (where your `docs.json` file is located) and execute the following command:

    ```bash
    mint dev
    ```

    A local preview of your documentation will be available at `http://localhost:3000`.
  </Step>
</Steps>

Alternatively, if you do not want to install the CLI globally, you can run a one-time script:

```bash
npx mint dev
```

## Updates

If your local preview is out of sync with what you see on the web in the production version, update your local CLI:

```bash
mint update
```

If this `mint update` command is not available on your local version, re-install the CLI with the latest version:

<CodeGroup>
  ```bash npm
  npm i -g mint@latest
  ```

  ```bash pnpm
  pnpm add -g mint@latest
  ```
</CodeGroup>

## Custom ports

By default, the CLI uses port 3000. You can customize the port using the `--port` flag. To run the CLI on port 3333, for instance, use this command:

```bash
mint dev --port 3333
```

If you attempt to run on a port that is already in use, it will use the next available port:

```mdx
Port 3000 is already in use. Trying 3001 instead.
```

## Previewing as a specific group

If you use partial authentication to restrict access to your documentation, you can preview as a specific authentication group by using the `--group [groupname]` flag.

For example, if you have a group named `admin`, you can preview as a member of that group with the command:

```bash
mint dev --group admin
```

## Additional commands

While `mint dev` is the most commonly used command, there are other commands you can use to manage your documentation.

### Finding broken links

The CLI can assist with validating reference links made in your documentation. To identify any broken links, use the following command:

```bash
mint broken-links
```

### Checking OpenAPI spec

You can use the CLI to check your OpenAPI file for errors using the following command:

```bash
mint openapi-check <openapiFilenameOrUrl>
```

You can pass in a filename (e.g. `./openapi.yaml`) or a URL (e.g. `https://petstore3.swagger.io/api/v3/openapi.json`).

### Renaming files

You can rename and update all references to files using the following command:

```bash
mint rename <oldFilename> <newFilename>
```

### Migrating MDX endpoint pages

You can migrate MDX endpoint pages to autogenerated pages from your OpenAPI specification using the following command:

```bash
mint migrate-mdx
```

This command converts individual MDX endpoint pages to autogenerated pages defined in your `docs.json`, moves MDX content to the `x-mint` extension in your OpenAPI specification, and updates your navigation. See [Migrating from MDX](/api-playground/migrating-from-mdx) for detailed information.

## Formatting

While developing locally, we recommend using extensions in your IDE to recognize and format `MDX` files.

If you use Cursor, Windsurf, or VS Code, we recommend the [MDX VS Code extension](https://marketplace.visualstudio.com/items?itemName=unifiedjs.vscode-mdx) for syntax highlighting, and [Prettier](https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode) for code formatting.

If you use JetBrains, we recommend the [MDX IntelliJ IDEA plugin](https://plugins.jetbrains.com/plugin/14944-mdx) for syntax highlighting, and setting up [Prettier](https://prettier.io/docs/webstorm) for code formatting.

## Troubleshooting

<AccordionGroup>
  <Accordion title="Error: Could not load the &#x22;sharp&#x22; module using the darwin-arm64 runtime">
    This may be due to an outdated version of node. Try the following:

    1. Remove the currently-installed version of the mint CLI: `npm uninstall -g mint`
    2. Upgrade to Node.js.
    3. Reinstall the mint CLI: `npm install -g mint`
  </Accordion>

  <Accordion title="Issue: Encountering an unknown error">
    **Solution**: Go to the root of your device and delete the `~/.mintlify` folder. Afterwards, run `mint dev` again.
  </Accordion>

  <Accordion title="Error: permission denied">
    This is due to not having the required permissions to globally install node packages.

    **Solution**: Try running `sudo npm i -g mint`. You will be prompted for your password, which is the one you use to unlock your computer.
  </Accordion>

  <Accordion title="The local preview doesn't look the same as my docs do on the web">
    This is likely due to an outdated version of the CLI.

    **Solution:** Run `mint update` to get the latest changes.
  </Accordion>

  <Accordion title="mintlify vs. mint package">
    If you have any problems with the CLI package, you should first run `npm ls -g`. This command shows what packages are globally installed on your machine.

    If you don't use npm or don't see it in the -g list, try `which mint` to locate the installation.

    If you have a package named `mint` and a package named `mintlify` installed, you should uninstall `mintlify`.

    1. Uninstall the old package:

    ```bash
      npm uninstall -g mintlify
    ```

    2. Clear your npm cache:

    ```bash
      npm cache clean --force
    ```

    3. Reinstall the new package:

    ```bash
    npm i -g mint
    ```
  </Accordion>
</AccordionGroup>


# Amplitude
Source: https://mintlify.com/docs/integrations/analytics/amplitude



Add the following to your `docs.json` file to send analytics to Amplitude.

<CodeGroup>
  ```json Analytics options in docs.json
  "integrations": {
      "amplitude": {
          "apiKey": "required"
      }
  }
  ```

  ```json Example
  "integrations": {
      "amplitude": {
          "apiKey": "76bb138bf3fbf58186XXX00000"
      }
  }
  ```
</CodeGroup>


# Clearbit
Source: https://mintlify.com/docs/integrations/analytics/clearbit



Add the following to your `docs.json` file to send analytics to Clearbit.

<CodeGroup>
  ```json Analytics options in docs.json
  "integrations": {
      "clearbit": {
          "publicApiKey": "required"
      }
  }
  ```

  ```json Example
  "integrations": {
      "clearbit": {
          "publicApiKey": "pk_1a1882"
      }
  }
  ```
</CodeGroup>


# Fathom
Source: https://mintlify.com/docs/integrations/analytics/fathom



Add the following to your `docs.json` file to send analytics to Fathom.

You can get the `siteId` from your script settings.

<CodeGroup>
  ```json Analytics options in docs.json
  "integrations": {
      "fathom": {
          "siteId": "required"
      }
  }
  ```

  ```json Example
  "integrations": {
      "fathom": {
          "siteId": "YSVMSDAY"
      }
  }
  ```
</CodeGroup>


# Google Analytics 4
Source: https://mintlify.com/docs/integrations/analytics/google-analytics



You will need to generate a new <Tooltip tip="Google Analytics 4">GA4</Tooltip> property to use with Mintlify. The data collected will go into the same project as your other Google Analytics data.

If you are using the old version of Google Analytics, Universal Analytics, you will still be able to generate a <Tooltip tip="Google Analytics 4">GA4</Tooltip> property. <Tooltip tip="Google Analytics 4">GA4</Tooltip> data is slightly different from UA data but still gets collected in the same project.

## How to Connect GA4 to Mintlify

### Create a Web Stream

You will need to create a web stream to get the Measurement ID to put into Mintlify.

Click the cog at the bottom left of the Google Analytics screen. Then click on Data Streams.

<Frame><img src="https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/ga4-web-streams.png?maxW=1400&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=c1ecb22dbb12bd0df298e3842cf0e0ec" alt="" width="1400" height="504" data-path="images/ga4-web-streams.png" srcset="https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/ga4-web-streams.png?w=280&maxW=1400&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=fde0c7d2dbca6d18e5df7f329fbaabd3 280w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/ga4-web-streams.png?w=560&maxW=1400&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=d6c578981cb0f9bca60ed45bce090d73 560w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/ga4-web-streams.png?w=840&maxW=1400&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=eb8b90842d3e517e65c718d5c13a1f26 840w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/ga4-web-streams.png?w=1100&maxW=1400&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=a1002e37fb9f6333622a0dd04267a99d 1100w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/ga4-web-streams.png?w=1650&maxW=1400&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=72b60ae717a1c53a7b5e36a8b3447581 1650w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/ga4-web-streams.png?w=2500&maxW=1400&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=1eee7cf400f723fccdac1d74df53a1e7 2500w" data-optimize="true" data-opv="2" /></Frame>

Create a Web Stream and put the URL of your Mintlify docs site as the stream URL.

Your Measurement ID looks like `G-XXXXXXX` and will show up under Stream Details immediately after you create the Web Stream.

### Put Measurement ID in docs.json

Add your Measurement ID to your `docs.json` file like so:

```json docs.json
"integrations": {
    "ga4": {
        "measurementId": "G-XXXXXXX"
    }
}
```

### Wait

Google Analytics takes two to three days to show your data.

You can use the [Google Analytics Debugger](https://chrome.google.com/webstore/detail/google-analytics-debugger/jnkmfdileelhofjcijamephohjechhna?hl=en) to check analytics are enabled correctly. The extension will log to your browser's console every time GA4 makes a request.

<Note>
  Preview links have analytics turned off.
</Note>


# Google Tag Manager
Source: https://mintlify.com/docs/integrations/analytics/google-tag-manager



Add your tag ID to `docs.json` file and we'll inject the Google Tag Manager script to all your pages.

You are responsible for setting up cookie consent banners with Google Tag Manager if you need them.

<CodeGroup>
  ```json Analytics options in docs.json
  "integrations": {
      "gtm": {
          "tagId": "required"
      }
  }
  ```

  ```json Example
  "integrations": {
      "gtm": {
          "tagId": "GTM-MGBL4PW"
      }
  }
  ```
</CodeGroup>


# Heap
Source: https://mintlify.com/docs/integrations/analytics/heap



Add the following to your `docs.json` file to send analytics to Heap.

<CodeGroup>
  ```json Analytics options in docs.json
  "integrations": {
      "heap": {
          "appId": "required"
      }
  }
  ```

  ```json Example
  "integrations": {
      "heap": {
          "appId": "1234567890"
      }
  }
  ```
</CodeGroup>


# Hightouch
Source: https://mintlify.com/docs/integrations/analytics/hightouch



Add the following to your `docs.json` file to send analytics to Hightouch.

<Info>
  Do not include `https://` for the `apiHost`.
</Info>

<CodeGroup>
  ```json Analytics options in docs.json
  "integrations": {
      "hightouch": {
          "writeKey": "required"
          "apiHost": "optional"
      }
  }
  ```

  ```json Example
  "integrations": {
      "hightouch": {
          "writeKey": "9132c81do371p76sr11da0075469b54f77649c9a067dp0303p56q0q64n072336"
          "apiHost": "us-east-1.hightouch-events.com" # optional, defaults to `us-east-1.hightouch-events.com`
      }
  }
  ```
</CodeGroup>


# HotJar
Source: https://mintlify.com/docs/integrations/analytics/hotjar



Add the following to your `docs.json` file to send analytics to HotJar.

```json Analytics options in docs.json
"integrations": {
    "hotjar": {
        "hjid": "required",
        "hjsv": "required"
    }
}
```


# Koala
Source: https://mintlify.com/docs/integrations/analytics/koala



Add the following to your `docs.json` file to send analytics to Koala.

<CodeGroup>
  ```json Analytics options in docs.json
  "integrations": {
      "koala": {
          "publicApiKey": "required"
      }
  }
  ```

  ```json Example
  "integrations": {
      "koala": {
          "publicApiKey": "pk_1a1882"
      }
  }
  ```
</CodeGroup>


# LogRocket
Source: https://mintlify.com/docs/integrations/analytics/logrocket



Add the following to your `docs.json` file to send analytics to LogRocket.

```json Analytics options in docs.json
"integrations": {
    "logrocket": {
        "apiKey": "required"
    }
}
```


# Mixpanel
Source: https://mintlify.com/docs/integrations/analytics/mixpanel



Add the following to your `docs.json` file to send analytics to Mixpanel.

```json Analytics options in docs.json
"integrations": {
    "mixpanel": {
        "projectToken": "required"
    }
}
```


# Analytics integrations
Source: https://mintlify.com/docs/integrations/analytics/overview

Integrate with an analytics platform to track events

Automatically send data about your documentation engagement to your third party analytics provider.

## All integrations

<CardGroup cols={2}>
  <Card
    title="Amplitude"
    href="/integrations/analytics/amplitude"
    horizontal
    icon={<svg className="h-6 w-6" width="36" height="36" viewBox="0 0 36 36" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M15.5988 8.04494C15.4989 7.91714 15.3924 7.84668 15.2646 7.84668C15.1728 7.85323 15.0876 7.88273 15.009 7.93188C14.0635 8.67087 12.7773 11.8055 11.7188 15.9412L12.6576 15.9477C14.5059 15.969 16.4165 15.9903 18.3008 16.0182C17.8027 14.1273 17.3341 12.5068 16.9015 11.1926C16.2674 9.28205 15.8414 8.42181 15.5988 8.04494Z" fill="#1E61F0"/>
<path d="M17.6964 0.078125C7.92405 0.078125 0 8.00217 0 17.7745C0 27.5468 7.92405 35.4709 17.6964 35.4709C27.4687 35.4709 35.3928 27.5468 35.3928 17.7745C35.3928 8.00217 27.4687 0.078125 17.6964 0.078125ZM30.7589 17.5615C30.7098 17.7598 30.5885 17.9531 30.4181 18.094C30.3968 18.1088 30.3755 18.1219 30.3542 18.1366L30.3329 18.1514L30.2903 18.1792L30.2543 18.2005C30.1199 18.271 29.9692 18.307 29.8135 18.307H21.4274C21.4913 18.584 21.5699 18.9035 21.6469 19.2459C22.109 21.2286 23.3248 26.5014 24.6242 26.5014H24.652H24.6668H24.6946C25.704 26.5014 26.2234 25.0382 27.3606 21.8316L27.3753 21.7955C27.5605 21.2843 27.7669 20.701 27.9865 20.0832L28.0439 19.9276C28.1291 19.7211 28.3634 19.6146 28.5698 19.6998C28.7189 19.7572 28.8254 19.9063 28.8254 20.0701C28.8254 20.1127 28.8189 20.1488 28.8107 20.1832L28.7615 20.3388C28.6403 20.7223 28.5207 21.2417 28.3699 21.8463C27.6948 24.6466 26.6707 28.8757 24.0556 28.8757H24.0343C22.3433 28.861 21.334 26.1606 20.8998 25.0022C20.0903 22.8409 19.4791 20.5453 18.8893 18.3152H11.1864L9.58718 23.439L9.56588 23.4177C9.32501 23.7946 8.82034 23.9076 8.44347 23.6668C8.20916 23.5176 8.0666 23.262 8.0666 22.9851V22.9573L8.16655 22.3739C8.38612 21.0598 8.65648 19.6867 8.9547 18.3087H5.68578L5.67104 18.2939C5.00251 18.194 4.54043 17.5697 4.64039 16.9012C4.71904 16.3817 5.1172 15.9705 5.62843 15.8771C5.75624 15.8623 5.88405 15.8558 6.01186 15.8623H6.16752C7.19817 15.8771 8.29272 15.8984 9.50034 15.9115C11.1995 9.00333 13.1674 5.49191 15.3565 5.48535C17.7013 5.48535 19.4431 10.8221 20.8359 16.0458L20.8424 16.0671C23.7 16.1245 26.756 16.2097 29.7185 16.4227L29.8463 16.4374C29.8954 16.4374 29.938 16.444 29.9888 16.4522H30.0036L30.0183 16.4588H30.0249C30.5312 16.5587 30.8654 17.0568 30.7589 17.5615Z" fill="#1E61F0"/>
</svg>}
  />

  <Card
    title="Mixpanel"
    href="/integrations/analytics/mixpanel"
    horizontal
    icon={
  <svg
    className="h-6 w-6"
    style={{ fill: "#7856ff" }}
    viewBox="0 0 98 98"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path d="M24.2391 58.7912C29.877 58.7912 34.4475 54.2207 34.4475 48.5828C34.4475 42.9449 29.877 38.3745 24.2391 38.3745C18.6012 38.3745 14.0308 42.9449 14.0308 48.5828C14.0308 54.2207 18.6012 58.7912 24.2391 58.7912Z"></path>
    <path d="M54.7787 55.7046C58.7675 55.7046 62.0011 52.4716 62.0011 48.4834C62.0011 44.4952 58.7675 41.2622 54.7787 41.2622C50.7899 41.2622 47.5563 44.4952 47.5563 48.4834C47.5563 52.4716 50.7899 55.7046 54.7787 55.7046Z"></path>
    <path d="M78.6018 52.0652C80.547 52.0652 82.1239 50.4883 82.1239 48.5431C82.1239 46.5979 80.547 45.021 78.6018 45.021C76.6566 45.021 75.0798 46.5979 75.0798 48.5431C75.0798 50.4883 76.6566 52.0652 78.6018 52.0652Z"></path>
  </svg>
}
  />

  <Card
    title="PostHog"
    href="/integrations/analytics/posthog"
    horizontal
    icon={
  <svg
    className="h-6 w-6"
    width="50"
    height="30"
    viewBox="0 0 50 30"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      d="M10.8914 17.2057c-.3685.7371-1.42031.7371-1.78884 0L8.2212 15.443c-.14077-.2815-.14077-.6129 0-.8944l.88136-1.7627c.36853-.7371 1.42034-.7371 1.78884 0l.8814 1.7627c.1407.2815.1407.6129 0 .8944l-.8814 1.7627zM10.8914 27.2028c-.3685.737-1.42031.737-1.78884 0L8.2212 25.44c-.14077-.2815-.14077-.6129 0-.8944l.88136-1.7627c.36853-.7371 1.42034-.7371 1.78884 0l.8814 1.7627c.1407.2815.1407.6129 0 .8944l-.8814 1.7628z"
      fill="#1D4AFF"
    />
    <path
      d="M0 23.4082c0-.8909 1.07714-1.3371 1.70711-.7071l4.58338 4.5834c.62997.63.1838 1.7071-.7071 1.7071H.999999c-.552284 0-.999999-.4477-.999999-1v-4.5834zm0-4.8278c0 .2652.105357.5196.292893.7071l9.411217 9.4112c.18753.1875.44189.2929.70709.2929h5.1692c.8909 0 1.3371-1.0771.7071-1.7071L1.70711 12.7041C1.07714 12.0741 0 12.5203 0 13.4112v5.1692zm0-9.99701c0 .26521.105357.51957.292893.7071L19.7011 28.6987c.1875.1875.4419.2929.7071.2929h5.1692c.8909 0 1.3371-1.0771.7071-1.7071L1.70711 2.70711C1.07715 2.07715 0 2.52331 0 3.41421v5.16918zm9.997 0c0 .26521.1054.51957.2929.7071l17.994 17.99401c.63.63 1.7071.1838 1.7071-.7071v-5.1692c0-.2652-.1054-.5196-.2929-.7071l-17.994-17.994c-.63-.62996-1.7071-.18379-1.7071.70711v5.16918zm11.7041-5.87628c-.63-.62997-1.7071-.1838-1.7071.7071v5.16918c0 .26521.1054.51957.2929.7071l7.997 7.99701c.63.63 1.7071.1838 1.7071-.7071v-5.1692c0-.2652-.1054-.5196-.2929-.7071l-7.997-7.99699z"
      fill="#F9BD2B"
    />
    <path
      d="M42.5248 23.5308l-9.4127-9.4127c-.63-.63-1.7071-.1838-1.7071.7071v13.1664c0 .5523.4477 1 1 1h14.5806c.5523 0 1-.4477 1-1v-1.199c0-.5523-.4496-.9934-.9973-1.0647-1.6807-.2188-3.2528-.9864-4.4635-2.1971zm-6.3213 2.2618c-.8829 0-1.5995-.7166-1.5995-1.5996 0-.8829.7166-1.5995 1.5995-1.5995.883 0 1.5996.7166 1.5996 1.5995 0 .883-.7166 1.5996-1.5996 1.5996z"
      fill="#000"
    />
    <path
      d="M0 27.9916c0 .5523.447715 1 1 1h4.58339c.8909 0 1.33707-1.0771.70711-1.7071l-4.58339-4.5834C1.07714 22.0711 0 22.5173 0 23.4082v4.5834zM9.997 10.997L1.70711 2.70711C1.07714 2.07714 0 2.52331 0 3.41421v5.16918c0 .26521.105357.51957.292893.7071L9.997 18.9946V10.997zM1.70711 12.7041C1.07714 12.0741 0 12.5203 0 13.4112v5.1692c0 .2652.105357.5196.292893.7071L9.997 28.9916V20.994l-8.28989-8.2899z"
      fill="#1D4AFF"
    />
    <path
      d="M19.994 11.4112c0-.2652-.1053-.5196-.2929-.7071l-7.997-7.99699c-.6299-.62997-1.70709-.1838-1.70709.7071v5.16918c0 .26521.10539.51957.29289.7071l9.7041 9.70411v-7.5834zM9.99701 28.9916h5.58339c.8909 0 1.3371-1.0771.7071-1.7071L9.99701 20.994v7.9976zM9.99701 10.997v7.5834c0 .2652.10539.5196.29289.7071l9.7041 9.7041v-7.5834c0-.2652-.1053-.5196-.2929-.7071L9.99701 10.997z"
      fill="#F54E00"
    />
  </svg>
}
  />

  <Card
    title="Google Analytics 4"
    href="/integrations/analytics/google-analytics"
    horizontal
    icon={
  <svg
    className="h-6 w-6"
    xmlns="http://www.w3.org/2000/svg"
    width="64"
    height="64"
    viewBox="0 0 64 64"
  >
    <g transform="matrix(.363638 0 0 .363636 -3.272763 -2.909091)">
      <path
        d="M130 29v132c0 14.77 10.2 23 21 23 10 0 21-7 21-23V30c0-13.54-10-22-21-22s-21 9.33-21 21z"
        fill="#f9ab00"
      />
      <g fill="#e37400">
        <path d="M75 96v65c0 14.77 10.2 23 21 23 10 0 21-7 21-23V97c0-13.54-10-22-21-22s-21 9.33-21 21z" />
        <circle cx="41" cy="163" r="21" />
      </g>
    </g>
  </svg>
}
  />

  <Card
    title="Google Tag Manager"
    href="/integrations/analytics/google-tag-manager"
    horizontal
    icon={
  <svg
    className="h-6 w-6"
    version="1.1"
    xmlns="http://www.w3.org/2000/svg"
    x="0px"
    y="0px"
    width="192px"
    height="192px"
    viewBox="0 0 192 192"
    enableBackground="new 0 0 192 192"
  >
    <rect fill="none" width="192" height="192" />
    <g>
      <polygon
        fill="#8AB4F8"
        points="111.31,176.79 80.76,147 146.37,80 178,111 	"
      />
      <path
        fill="#4285F4"
        d="M111.44,45.08L81,14L14.44,79.93c-8.58,8.58-8.58,22.49,0,31.08L80,177l31-29L61.05,95.47L111.44,45.08z"
      />
      <path
        fill="#8AB4F8"
        d="M177.56,80.44l-66-66c-8.59-8.59-22.52-8.59-31.11,0c-8.59,8.59-8.59,22.52,0,31.11l66,66
  c8.59,8.59,22.52,8.59,31.11,0C186.15,102.96,186.15,89.03,177.56,80.44z"
      />
      <circle fill="#246FDB" cx="95.5" cy="162.5" r="21.5" />
    </g>
  </svg>
}
  />

  <Card
    title="Hightouch"
    href="/integrations/analytics/hightouch"
    horizontal
    icon={
  <svg
    className="h-6 w-6"
    xmlns="http://www.w3.org/2000/svg"
    width="97"
    height="97"
    viewBox="0 0 97 97"
    fill="none"
  >
    <path
      d="M33 3.75C33 2.7835 33.7835 2 34.75 2H93.25C94.2165 2 95 2.7835 95 3.75V62.25C95 63.2165 94.2165 64 93.25 64H33V3.75Z"
      className="fill-black dark:fill-white"
    />
    <path
      d="M33 93.25C33 94.2165 32.2165 95 31.25 95L3.75 95C2.7835 95 2 94.2165 2 93.25L2 65.75C2 64.7835 2.7835 64 3.75 64L33 64L33 93.25Z"
      className="fill-black dark:fill-white"
    />
  </svg>
}
  />

  <Card
    title="HotJar"
    href="/integrations/analytics/hotjar"
    horizontal
    icon={
  <svg
    className="h-6 w-6"
    width="51"
    height="57"
    viewBox="0 0 51 57"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      d="M20.9743 23.3016C27.5805 19.6488 36.6281 14.645 36.6281 0.0820312H25.6725C25.6725 8.23006 21.687 10.4338 15.6538 13.7698C9.0477 17.4239 0 22.4256 0 36.99H10.9556C10.9556 28.8414 14.9412 26.6376 20.9743 23.3016Z"
      fill="#FF3C00"
    />
    <path
      d="M39.9362 19.9551C39.9362 28.1035 35.9506 30.3073 29.9175 33.6428C23.3131 37.2956 14.2637 42.2987 14.2637 56.8628H25.2189C25.2189 48.7143 29.2044 46.5106 35.2375 43.1746C41.8436 39.5218 50.8909 34.5193 50.8909 19.9551H39.9362Z"
      fill="#FF3C00"
    />
  </svg>
}
  />

  <Card
    title="Koala"
    href="/integrations/analytics/koala"
    horizontal
    icon={
  <svg
    className="h-6 w-6"
    width="121"
    height="121"
    viewBox="0 0 121 121"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      d="M72.5246 72.3223C71.4431 72.3248 70.3866 72.6473 69.4886 73.2503C68.5911 73.8528 67.8916 74.7078 67.4796 75.7078C67.0676 76.7073 66.9611 77.8068 67.1736 78.8673C67.3861 79.9273 67.9081 80.9008 68.6736 81.6648C69.4391 82.4283 70.4136 82.9483 71.4746 83.1583C72.5351 83.3683 73.6346 83.2593 74.6331 82.8448C75.6321 82.4303 76.4856 81.7293 77.0861 80.8303C77.6866 79.9308 78.0071 78.8738 78.0071 77.7923C78.0071 77.0728 77.8651 76.3603 77.5896 75.6958C77.3141 75.0313 76.9101 74.4278 76.4006 73.9198C75.8911 73.4118 75.2866 73.0088 74.6216 72.7348C73.9566 72.4608 73.2436 72.3203 72.5246 72.3223Z"
      fill="#4D32E4"
    />
    <path
      d="M60.5 0C44.4544 0 29.066 6.3741 17.7201 17.7201C6.3741 29.066 0 44.4544 0 60.5C0 76.5455 6.3741 91.934 17.7201 103.28C29.066 114.626 44.4544 121 60.5 121C76.5455 121 91.934 114.626 103.28 103.28C114.626 91.934 121 76.5455 121 60.5C121 44.4544 114.626 29.066 103.28 17.7201C91.934 6.3741 76.5455 0 60.5 0ZM108.522 84.07C107.203 81.71 105.138 79.855 102.65 78.796C100.163 77.737 97.3945 77.534 94.779 78.2195C92.164 78.9045 89.8505 80.439 88.202 82.5815C86.553 84.724 85.663 87.3535 85.6705 90.057V107.211C85.6705 107.387 85.6705 107.551 85.6705 107.728C78.4335 111.61 70.3975 113.767 62.189 114.03C53.4065 104.206 48.8746 91.3035 49.5848 78.146C50.1465 69.442 53.0275 61.047 57.929 53.8325C58.004 53.7305 58.038 53.6035 58.024 53.4775C58.01 53.351 57.949 53.235 57.853 53.152C57.752 53.089 57.633 53.061 57.515 53.0725C57.3965 53.0835 57.285 53.134 57.1975 53.215C49.6673 59.3625 44.6827 68.0835 43.2071 77.692C43.0432 78.549 42.8541 80.0115 42.7533 80.818C42.7533 81.171 42.2492 81.259 42.0349 81.196C37.9451 79.838 34.2333 77.534 31.201 74.472C28.1687 71.4095 25.9014 67.6755 24.5833 63.5725C23.2651 59.4695 22.9333 55.1135 23.6147 50.8585C24.2962 46.603 25.9717 42.5685 28.5052 39.0824C31.0387 35.5963 34.3587 32.7568 38.1956 30.7947C42.0325 28.8326 46.2781 27.8031 50.5875 27.7899C54.897 27.7767 59.149 28.7802 62.9975 30.7187C66.8465 32.6573 70.184 35.4763 72.7385 38.9469C73 39.3158 73.3455 39.6171 73.7465 39.8254C74.148 40.0337 74.593 40.1429 75.045 40.1442H85.62H109.946C112.846 47.1544 114.22 54.702 113.977 62.2845C113.733 69.867 111.879 77.3105 108.535 84.12L108.522 84.07Z"
      fill="#4D32E4"
    />
  </svg>
}
  />

  <Card
    title="LogRocket"
    href="/integrations/analytics/logrocket"
    horizontal
    icon={
  <svg
    className="h-7 w-5"
    width="102"
    height="159"
    viewBox="0 0 102 159"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      d="M33.7001 18.4998C38.1001 11.4998 44.0001 5.3998 50.9001 0.799805C57.7001 5.2998 63.5001 11.2998 67.9001 18.1998C79.4001 34.1998 85.2001 53.4998 84.4001 73.1998C88.0001 76.0998 91.7001 78.8998 95.2001 81.7998C100.2 86.2998 102.6 93.0998 101.4 99.6998C99.7001 107.9 98.1001 116.1 96.3001 124.3C95.1001 127.9 91.2001 129.8 87.7001 128.6C87.1001 128.4 86.5001 128.1 86.0001 127.7C80.2001 123.1 74.6001 118.3 68.8001 113.6C58.9001 123 43.5001 123.1 33.5001 113.8C29.4001 116.8 25.5001 120.5 21.5001 123.8C19.7001 125.5 17.8001 127.1 15.6001 128.3C12.1001 129.7 8.10011 127.9 6.80011 124.4C6.70011 124.2 6.7001 124 6.6001 123.9C4.8001 115.9 2.8001 107.9 1.0001 99.8998C-0.399898 92.8998 2.1001 85.7998 7.5001 81.1998C10.6001 78.6998 13.8001 76.1998 17.0001 73.6998C17.9001 73.1998 17.4001 72.1998 17.5001 71.4998C17.1001 52.5998 22.8001 33.9998 33.7001 18.4998ZM39.4001 43.2998C35.2001 48.6998 35.7001 56.3998 40.6001 61.1998C46.2001 66.5998 55.1001 66.7998 60.9001 61.5998C65.0001 57.8998 66.4001 51.9998 64.5001 46.7998C62.5001 41.7998 57.9001 38.2998 52.5001 37.8998C47.4001 37.2998 42.5001 39.3998 39.4001 43.2998Z"
      fill="#764ABC"
    />
    <path
      d="M31.7002 130.6C31.8002 128.7 33.5002 127.3 35.3002 127.5C35.8002 127.5 36.3002 127.7 36.7002 127.9C45.6002 132.2 56.0002 132.2 65.0002 127.9C66.7002 127 68.7002 127.7 69.6002 129.3C69.8002 129.6 69.9002 130 70.0002 130.4C70.0002 135.4 70.0002 140.4 70.0002 145.4C69.8002 147.2 68.1002 148.6 66.3002 148.4C65.7002 148.3 65.2002 148.1 64.7002 147.8C63.2002 146.5 61.9002 145.1 60.4002 143.8C58.1002 148.1 56.0002 152.4 53.7002 156.7C52.7002 158.3 50.6002 158.7 49.0002 157.7C48.6002 157.5 48.3002 157.1 48.1002 156.8C45.8002 152.5 43.7002 148.2 41.3002 143.9C39.9002 145.3 38.5002 146.7 37.0002 147.9C35.5002 149 33.3002 148.6 32.3002 147C32.0002 146.5 31.8002 146 31.7002 145.4C31.7002 140.5 31.7002 135.5 31.7002 130.6Z"
      fill="#764ABC"
    />
    <path
      d="M50.7998 58.5005C54.5998 58.6005 57.6998 55.6005 57.7998 51.8005C57.6998 48.0005 54.5998 45.0005 50.7998 45.0005C46.9998 44.9005 43.8998 47.9005 43.7998 51.7005C43.7998 55.5005 46.9998 58.6005 50.7998 58.5005Z"
      fill="#764ABC"
    />
  </svg>
}
  />

  <Card
    title="Pirsch"
    href="/integrations/analytics/pirsch"
    horizontal
    icon={
  <>
    <svg
      className="h-6 w-6 dark:hidden"
      width="1"
      height="1"
      viewBox="0 0 1 1"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <g clipPath="url(#clip0_2199_68)">
        <path
          d="M0.184082 0.631579C0.358477 0.631579 0.499871 0.490184 0.499871 0.315789C0.499871 0.141395 0.358477 0 0.184082 0V0.631579ZM0.815661 0.368421C0.641266 0.368421 0.499871 0.509816 0.499871 0.684211C0.499871 0.858605 0.641266 1 0.815661 1V0.368421Z"
          fill="black"
        />
        <path
          d="M0.710681 0.288549C0.78335 0.288549 0.842259 0.229639 0.842259 0.15697C0.842259 0.0843005 0.78335 0.0253906 0.710681 0.0253906C0.638011 0.0253906 0.579102 0.0843005 0.579102 0.15697C0.579102 0.229639 0.638011 0.288549 0.710681 0.288549Z"
          fill="black"
        />
        <path
          d="M0.289294 0.974095C0.361963 0.974095 0.420873 0.915185 0.420873 0.842516C0.420873 0.769847 0.361963 0.710938 0.289294 0.710938C0.216625 0.710938 0.157715 0.769847 0.157715 0.842516C0.157715 0.915185 0.216625 0.974095 0.289294 0.974095Z"
          fill="black"
        />
      </g>
      <defs>
        <clipPath id="clip0_2199_68">
          <rect width="1" height="1" fill="black" />
        </clipPath>
      </defs>
    </svg>
    <svg
      className="hidden h-6 w-6 dark:block"
      width="1"
      height="1"
      viewBox="0 0 1 1"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <g clipPath="url(#clip0_2199_68)">
        <path
          d="M0.184082 0.631579C0.358477 0.631579 0.499871 0.490184 0.499871 0.315789C0.499871 0.141395 0.358477 0 0.184082 0V0.631579ZM0.815661 0.368421C0.641266 0.368421 0.499871 0.509816 0.499871 0.684211C0.499871 0.858605 0.641266 1 0.815661 1V0.368421Z"
          fill="white"
        />
        <path
          d="M0.710681 0.288549C0.78335 0.288549 0.842259 0.229639 0.842259 0.15697C0.842259 0.0843005 0.78335 0.0253906 0.710681 0.0253906C0.638011 0.0253906 0.579102 0.0843005 0.579102 0.15697C0.579102 0.229639 0.638011 0.288549 0.710681 0.288549Z"
          fill="white"
        />
        <path
          d="M0.289294 0.974095C0.361963 0.974095 0.420873 0.915185 0.420873 0.842516C0.420873 0.769847 0.361963 0.710938 0.289294 0.710938C0.216625 0.710938 0.157715 0.769847 0.157715 0.842516C0.157715 0.915185 0.216625 0.974095 0.289294 0.974095Z"
          fill="white"
        />
      </g>
      <defs>
        <clipPath id="clip0_2199_68">
          <rect width="1" height="1" fill="white" />
        </clipPath>
      </defs>
    </svg>
  </>
}
  />

  <Card
    title="Plausible"
    href="/integrations/analytics/plausible"
    horizontal
    icon={
  <svg
    xmlns="http://www.w3.org/2000/svg"
    width="1000px"
    height="1000px"
    className="h-6 w-6"
    viewBox="0 0 1000 1000"
  >
    <defs>
      <radialGradient
        cx="79.1305263%"
        cy="87.6448158%"
        fx="79.1305263%"
        fy="87.6448158%"
        r="96.9897763%"
        id="radialGradient-1"
      >
        <stop stopColor="#2440E6" offset="0%" />
        <stop stopColor="#5661B3" offset="100%" />
      </radialGradient>
      <radialGradient
        cx="0%"
        cy="30.2198829%"
        fx="0%"
        fy="30.2198829%"
        r="62.2688936%"
        gradientTransform="translate(0.000000,0.302199),scale(1.000000,0.722519),rotate(61.734530),translate(-0.000000,-0.302199)"
        id="radialGradient-2"
      >
        <stop stopColor="#6574CD" stopOpacity="0.5" offset="0%" />
        <stop stopColor="#6574CD" offset="100%" />
      </radialGradient>
    </defs>
    <g stroke="none" strokeWidth="1" fill="none" fillRule="evenodd">
      <g transform="translate(19.000000, 0.000000)">
        <g transform="translate(-19.000000, 0.000000)">
          <rect x="0" y="0" width="1000" height="1000" />
          <g transform="translate(124.069479, 0.000000)">
            <g transform="translate(376.923077, 500.000000) scale(-1, 1) rotate(-180.000000) translate(-376.923077, -500.000000) translate(2.233251, -0.000000)">
              <circle
                fill="url(#radialGradient-1)"
                cx="373.69727"
                cy="624.069479"
                r="373.449132"
              />
              <path
                d="M309.677419,993.322174 C232.506203,979.92267 167.493797,947.168328 113.647643,894.562869 C58.3126551,840.468576 24.0694789,777.44128 7.44416873,698.781231 L1.7369727,671.982223 L0.992555831,336.498352 L0.248138958,0.76634245 L7.19602978,0.76634245 C11.1662531,0.76634245 23.82134,2.00703724 35.235732,3.24773203 C132.754342,15.158402 215.632754,74.215474 260.794045,163.793638 C272.208437,186.622422 280.397022,212.925151 286.104218,245.679494 C290.818859,273.471057 291.066998,282.652199 290.322581,427.56535 L289.578164,580.170809 L295.533499,595.059146 C303.722084,615.406541 326.30273,637.987186 346.650124,646.175772 L361.538462,652.131107 L500.496278,652.379246 C576.923077,652.379246 643.920596,653.371802 649.131514,654.364357 C673.449132,659.078998 699.503722,679.426392 709.925558,702.007037 C712.903226,708.210511 716.873449,720.36932 718.610422,728.557906 C721.33995,742.205548 721.091811,745.927633 717.121588,761.312248 C704.71464,806.969816 661.042184,870.245251 616.377171,907.217955 C565.756824,949.153439 509.925558,977.193141 449.627792,991.337062 C417.866005,998.533092 345.905707,999.773787 309.677419,993.322174 Z"
                id="Path"
                fill="url(#radialGradient-2)"
                fillRule="nonzero"
              />
            </g>
          </g>
        </g>
      </g>
    </g>
  </svg>
}
  />

  <Card
    title="Fathom"
    href="/integrations/analytics/fathom"
    horizontal
    icon={
<svg
className="h-6 w-6"
width="256"
height="256"
viewBox="0 0 256 256"
fill="none"
xmlns="http://www.w3.org/2000/svg"
>
<path
d="M50.4139 36.0859H40.3871C31.7927 36.105 22.7513 37.7857 15.3869 42.8984C11.5551 45.5505 8.45289 49.125 6.36656 53.292C4.0486 58.1293 2.89794 63.4429 3.0071 68.8058V212.667C3.0071 213.984 3.53027 215.247 4.46151 216.178C5.39275 217.109 6.65579 217.632 7.97276 217.632H27.5661C28.8831 217.632 30.1461 217.109 31.0774 216.178C32.0086 215.247 32.5318 213.984 32.5318 212.667V111.31H50.4063C51.0584 111.31 51.7041 111.182 52.3065 110.932C52.909 110.682 53.4564 110.317 53.9175 109.856C54.3786 109.394 54.7444 108.847 54.9939 108.245C55.2435 107.642 55.3719 106.996 55.3719 106.344V89.5566C55.3719 88.2396 54.8488 86.9766 53.9175 86.0453C52.9863 85.1141 51.7232 84.5909 50.4063 84.5909H32.5394V71.8349C32.4457 69.708 32.7382 67.5817 33.4027 65.5591C33.6012 64.974 33.9349 64.444 34.3767 64.0121C35.0566 63.4655 35.8835 63.1331 36.7526 63.0571C38.4628 62.845 40.1867 62.7639 41.9092 62.8146H50.4196C51.7366 62.8146 52.9996 62.2914 53.9309 61.3602C54.8621 60.4289 55.3853 59.1659 55.3853 57.8489V41.0592C55.3853 39.7423 54.8621 38.4792 53.9309 37.548C52.9996 36.6167 51.7366 36.0936 50.4196 36.0936"
className="fill-black dark:fill-white"
/>
<path
d="M168.815 128.261C168.982 122.018 167.781 115.814 165.296 110.084C162.812 104.354 159.105 99.2374 154.434 95.0918C145.198 87.0379 132.23 82.712 116.98 82.7178C101.466 82.7178 88.0641 87.1582 78.2799 94.9409C73.4171 98.7218 69.4331 103.513 66.6032 108.985C63.7733 114.456 62.165 120.476 61.8894 126.63C61.8575 127.301 61.9625 127.972 62.1977 128.602C62.433 129.232 62.7937 129.807 63.258 130.294C63.7223 130.78 64.2806 131.167 64.8989 131.431C65.5172 131.695 66.1827 131.831 66.855 131.83H87.6019C88.8467 131.832 90.0466 131.366 90.9642 130.525C91.8817 129.684 92.4499 128.529 92.5561 127.288C92.7767 124.972 93.4898 122.729 94.6475 120.71C95.8053 118.691 97.3811 116.943 99.2693 115.583C104.448 111.964 110.667 110.136 116.98 110.378C124.718 110.378 130.282 112.479 133.83 115.564C135.624 117.142 137.044 119.1 137.987 121.296C138.93 123.491 139.372 125.869 139.281 128.257V128.958C139.296 129.537 139.232 130.115 139.09 130.677L138.899 131.106C138.545 131.474 138.1 131.743 137.61 131.885C134.826 132.791 131.95 133.381 129.035 133.644C124.833 134.202 119.373 134.779 112.57 135.69H112.581C100.098 137.369 87.3498 139.41 77.0193 145.239C71.7347 148.136 67.3067 152.375 64.1812 157.527C60.8001 163.529 59.1166 170.338 59.311 177.224C59.2225 183.496 60.4876 189.713 63.02 195.452C66.6423 203.293 72.8442 209.656 80.5908 213.477C88.8782 217.474 97.9927 219.456 107.191 219.262C119.128 219.274 128.181 216.497 134.846 212.251C136.408 211.261 137.892 210.155 139.287 208.941V212.66C139.287 213.977 139.81 215.24 140.741 216.171C141.672 217.102 142.936 217.625 144.253 217.625H153.79L168.812 161.735L168.815 128.261ZM139.283 166.03C139.404 169.288 138.883 172.539 137.748 175.596C136.613 178.652 134.887 181.456 132.669 183.845C128.204 188.349 121.149 191.569 109.984 191.601C102.793 191.613 97.4741 190.033 94.2941 187.753C92.8266 186.744 91.6254 185.395 90.7933 183.821C89.9498 182.118 89.5217 180.241 89.5443 178.341V178.293V178.213C89.4842 176.061 90.0395 173.937 91.1447 172.09C93.1437 169.263 95.9722 167.127 99.2388 165.979C103.667 164.269 108.293 163.122 113.007 162.564C120.085 161.569 127.367 160.514 133.404 159.317C135.561 158.895 137.482 158.442 139.289 157.969L139.283 166.03Z"
className="fill-black dark:fill-white"
/>
<path
d="M251.975 21.9481C251.51 21.3425 250.913 20.8518 250.228 20.514C249.544 20.1763 248.791 20.0004 248.027 20H223.077C221.982 19.9988 220.917 20.3596 220.048 21.0263C219.18 21.6929 218.556 22.628 218.273 23.6861L168.813 207.74L166.375 216.833L163.015 229.322C162.816 230.059 162.789 230.832 162.937 231.581C163.085 232.33 163.404 233.035 163.868 233.641C164.333 234.247 164.931 234.737 165.616 235.074C166.301 235.411 167.055 235.586 167.818 235.584H192.769C193.863 235.586 194.927 235.226 195.796 234.56C196.665 233.895 197.289 232.961 197.572 231.904L252.831 26.2644C253.027 25.5271 253.053 24.7545 252.904 24.0059C252.756 23.2573 252.438 22.5527 251.975 21.9462"
fill="#7166F6"
/>
</svg>

}
  />

  <Card
    title="Clearbit"
    href="/integrations/analytics/clearbit"
    horizontal
    icon={
  <svg
    xmlns="http://www.w3.org/2000/svg"
    width="36"
    height="36"
    className="h-6 w-6"
    viewBox="0 0 40 40"
  >
    <defs>
      <linearGradient id="clearbit-a" x1="50%" x2="100%" y1="0%" y2="100%">
        <stop offset="0%" stopColor="#DEF2FE"></stop>
        <stop offset="100%" stopColor="#DBF1FE"></stop>
      </linearGradient>
      <linearGradient id="clearbit-b" x1="0%" x2="50%" y1="0%" y2="100%">
        <stop offset="0%" stopColor="#57BCFD"></stop>
        <stop offset="100%" stopColor="#51B5FD"></stop>
      </linearGradient>
      <linearGradient id="clearbit-c" x1="37.5%" x2="62.5%" y1="0%" y2="100%">
        <stop offset="0%" stopColor="#1CA7FD"></stop>
        <stop offset="100%" stopColor="#148CFC"></stop>
      </linearGradient>
      <filter
        id="ck-icon-shadow"
        x="-50%"
        y="-50%"
        width="200%"
        height="200%"
      >
        <feOffset result="offOut" in="SourceGraphic" dx="0" dy="1"></feOffset>
        <feGaussianBlur
          result="blurOut"
          in="offOut"
          stdDeviation="1"
        ></feGaussianBlur>
        <feBlend in="SourceGraphic" in2="blurOut" mode="normal"></feBlend>
      </filter>
    </defs>
    <g fill="none">
      <path
        d="M27.9195733,37 L12.0804267,37 L11.4338943,36.9949826 C8.75934941,36.9515623 7.69554096,36.6271471 6.62367147,36.053905 C5.46935048,35.4365674 4.56343261,34.5306495 3.94609499,33.3763285 L3.81824005,33.1283803 C3.30403747,32.0897188 3.02217708,30.9433817 3.00125617,28.250264 L3,12.0804267 C3,8.92296455 3.32875737,7.77799245 3.94609499,6.62367147 C4.56343261,5.46935048 5.46935048,4.56343261 6.62367147,3.94609499 L6.87161969,3.81824005 C7.91028124,3.30403747 9.05661831,3.02217708 11.749736,3.00125617 L27.9195733,3 C31.0770355,3 32.2220075,3.32875737 33.3763285,3.94609499 C34.5306495,4.56343261 35.4365674,5.46935048 36.053905,6.62367147 L36.18176,6.87161969 C36.6959625,7.91028124 36.9778229,9.05661831 36.9987438,11.749736 L37,27.9195733 L36.9949826,28.5661057 C36.9515623,31.2406506 36.6271471,32.304459 36.053905,33.3763285 C35.4365674,34.5306495 34.5306495,35.4365674 33.3763285,36.053905 L33.1283803,36.18176 C32.0481723,36.7165306 30.8515024,37 27.9195733,37 Z"
        id="clearbit-edge"
        strokeOpacity="0.2"
        stroke="#9BADBC"
        fillOpacity="0"
        fill="#9BADBC"
      ></path>
      <path
        d="M27.9195733,37 L12.0804267,37 L11.4338943,36.9949826 C8.75934941,36.9515623 7.69554096,36.6271471 6.62367147,36.053905 C5.46935048,35.4365674 4.56343261,34.5306495 3.94609499,33.3763285 L3.81824005,33.1283803 C3.30403747,32.0897188 3.02217708,30.9433817 3.00125617,28.250264 L3,12.0804267 C3,8.92296455 3.32875737,7.77799245 3.94609499,6.62367147 C4.56343261,5.46935048 5.46935048,4.56343261 6.62367147,3.94609499 L6.87161969,3.81824005 C7.91028124,3.30403747 9.05661831,3.02217708 11.749736,3.00125617 L27.9195733,3 C31.0770355,3 32.2220075,3.32875737 33.3763285,3.94609499 C34.5306495,4.56343261 35.4365674,5.46935048 36.053905,6.62367147 L36.18176,6.87161969 C36.6959625,7.91028124 36.9778229,9.05661831 36.9987438,11.749736 L37,27.9195733 L36.9949826,28.5661057 C36.9515623,31.2406506 36.6271471,32.304459 36.053905,33.3763285 C35.4365674,34.5306495 34.5306495,35.4365674 33.3763285,36.053905 L33.1283803,36.18176 C32.0481723,36.7165306 30.8515024,37 27.9195733,37 Z"
        id="clearbit-fx"
        fillOpacity="0.2"
        fill="#9BADBC"
        filter="url(#ck-icon-shadow)"
      ></path>
      <path
        fill="url(#clearbit-a)"
        d="M37,20 L37,27.9195733 C37,31.0770355 36.6712426,32.2220075 36.053905,33.3763285 C35.4365674,34.5306495 34.5306495,35.4365674 33.3763285,36.053905 C32.2220075,36.6712426 31.0770355,37 27.9195733,37 L20,37 L20,20 L37,20 Z"
      ></path>
      <path
        fill="url(#clearbit-b)"
        d="M20,3 L27.9195733,3 C31.0770355,3 32.2220075,3.32875737 33.3763285,3.94609499 C34.5306495,4.56343261 35.4365674,5.46935048 36.053905,6.62367147 C36.6712426,7.77799245 37,8.92296455 37,12.0804267 L37,20 L20,20 L20,3 Z"
      ></path>
      <path
        fill="url(#clearbit-c)"
        d="M12.0804267,3 L20,3 L20,37 L12.0804267,37 C8.92296455,37 7.77799245,36.6712426 6.62367147,36.053905 C5.46935048,35.4365674 4.56343261,34.5306495 3.94609499,33.3763285 C3.32875737,32.2220075 3,31.0770355 3,27.9195733 L3,12.0804267 C3,8.92296455 3.32875737,7.77799245 3.94609499,6.62367147 C4.56343261,5.46935048 5.46935048,4.56343261 6.62367147,3.94609499 C7.77799245,3.32875737 8.92296455,3 12.0804267,3 Z"
      ></path>
    </g>
  </svg>
}
  />

  <Card
    title="Heap"
    href="/integrations/analytics/heap"
    horizontal
    icon={
  <svg
    className="h-6 w-6"
    width="32"
    height="32"
    viewBox="0 0 256 256"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      d="M78.7 55.2H49V200.2H78.7V55.2ZM142.9 0H113.3V110.5H142.9V0Z"
      fill="black"
    />
    <path
      d="M142.9 144.9H113.3V255.4H142.9V144.9ZM207.1 55.2002H177.5V200.2H207.1V55.2002Z"
      fill="#31D891"
    />
  </svg>
}
  />

  <Card
    title="Segment"
    href="/integrations/analytics/segment"
    horizontal
    icon={
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none">
<path
  fill="#93C8A2"
  fill-rule="evenodd"
  d="M22.69 10.396H8.64a1.184 1.184 0 0 1-1.173-1.187c0-.653.528-1.188 1.173-1.188h14.05c.645 0 1.173.535 1.173 1.188 0 .653-.527 1.187-1.173 1.187Z"
  clip-rule="evenodd"
/>
<path
  fill="#43AF79"
  fill-rule="evenodd"
  d="M1.923 10.396A1.184 1.184 0 0 1 .75 9.209c0-.12.03-.238.059-.356C2.275 4.015 6.646.75 11.66.75c1.144 0 2.288.178 3.374.505.615.207.968.86.762 1.484-.205.623-.85.979-1.466.771a8.962 8.962 0 0 0-2.67-.415c-3.989 0-7.45 2.582-8.594 6.44-.176.505-.616.86-1.144.86Z"
  clip-rule="evenodd"
/>
<path
  fill="#93C8A2"
  fill-rule="evenodd"
  d="M19.786 4.667c0 .653-.528 1.188-1.173 1.188a1.184 1.184 0 0 1-1.173-1.188c0-.653.528-1.187 1.173-1.187s1.173.534 1.173 1.187ZM1.173 13.604h14.05c.645 0 1.173.534 1.173 1.187s-.528 1.188-1.173 1.188H1.173A1.184 1.184 0 0 1 0 14.79c0-.653.528-1.187 1.173-1.187Z"
  clip-rule="evenodd"
/>
<path
  fill="#43AF79"
  fill-rule="evenodd"
  d="M21.94 13.604c.645 0 1.173.534 1.173 1.187 0 .12-.029.238-.058.357-1.467 4.837-5.837 8.102-10.853 8.102-1.144 0-2.288-.178-3.373-.505-.616-.207-.968-.86-.763-1.483.205-.624.85-.98 1.467-.772.85.267 1.76.415 2.669.415 3.989 0 7.45-2.582 8.594-6.44.176-.505.616-.86 1.144-.86Z"
  clip-rule="evenodd"
/>
<path
  fill="#93C8A2"
  fill-rule="evenodd"
  d="M4.077 19.332c0-.653.528-1.187 1.173-1.187.646 0 1.174.534 1.174 1.187S5.896 20.52 5.25 20.52a1.184 1.184 0 0 1-1.173-1.188Z"
  clip-rule="evenodd"
/>
</svg>
}
  />
</CardGroup>

## Enabling analytics

Set your analytics keys in `docs.json`. You can add an unlimited number of analytics integrations for free.

The syntax for `docs.json` is below. You only need to include entries for the platforms you want to connect.

```json Analytics options in docs.json
"integrations": {
    "amplitude": {
        "apiKey": "required"
    },
    "clearbit": {
        "publicApiKey": "required"
    },
    "cookies": {
      "key": "required",
      "value": "required"
    },
    "fathom": {
        "siteId": "required"
    },
    "ga4": {
        "measurementId": "required"
    },
    "gtm": {
        "tagId": "required"
    },
    "hightouch": {
        "apiKey": "required",
        "apiHost": "optional"
    },
    "hotjar": {
        "hjid": "required",
        "hjsv": "required"
    },
    "koala": {
        "publicApiKey": "required"
    },
    "logrocket": {
        "appId": "required"
    },
    "mixpanel": {
        "projectToken": "required"
    },
    "pirsch": {
        "id": "required"
    },
    "plausible": {
        "domain": "required"
    },
    "posthog": {
        "apiKey": "required",
        "apiHost": "optional"
    },
    "segment": {
      "key": "required"
    },
    "telemetry": {
      "enabled": "boolean"
    }
}
```

## Analytics events

We send the following events to your analytics provider. All events use the `docs.` prefix.

| Event name                              | Description                                                                                               |
| :-------------------------------------- | :-------------------------------------------------------------------------------------------------------- |
| `docs.accordion.close`                  | When a user closes an accordion.                                                                          |
| `docs.accordion.open`                   | When a user opens an accordion.                                                                           |
| `docs.api_playground.request`           | When a user calls an API in the API playground.                                                           |
| `docs.code_block.copy`                  | When a user copies code from a code block.                                                                |
| `docs.code_block.ask_ai`                | When a user asks the assistant to explain a code block.                                                   |
| `docs.content.view`                     | When a user views a page. Only available for analytics providers that do not track page views by default. |
| `docs.feedback.thumbs_up`               | When a user clicks the positive feedback button.                                                          |
| `docs.feedback.thumbs_down`             | When a user clicks the negative feedback button.                                                          |
| `docs.navitem.cta_click`                | When a user clicks a call to action.                                                                      |
| `docs.expandable.close`                 | When a user closes an expandable.                                                                         |
| `docs.expandable.open`                  | When a user opens an expandable.                                                                          |
| `docs.navitem.click`                    | When a user clicks a header navigation item.                                                              |
| `docs.footer.powered_by_mintlify_click` | When a user clicks the "Powered by Mintlify" link.                                                        |
| `docs.assistant.source_click`           | When a user clicks a citation in a chat.                                                                  |
| `docs.assistant.suggestion_click`       | When a user clicks a suggestion in a chat.                                                                |
| `docs.assistant.thumbs_up`              | When a user clicks the positive feedback button in a chat.                                                |
| `docs.assistant.thumbs_down`            | When a user clicks the negative feedback button in a chat.                                                |
| `docs.assistant.completed`              | When a chat session is completed.                                                                         |
| `docs.assistant.enter`                  | When a user initiates a chat.                                                                             |
| `docs.assistant.shared`                 | When a user shares a chat conversation.                                                                   |
| `docs.search.close`                     | When a user closes the search bar.                                                                        |
| `docs.search.result_click`              | When a user clicks a search result.                                                                       |
| `docs.context_menu.copy_page`           | When a user copies the current page as markdown.                                                          |
| `docs.context_menu.copy_mcp_link`       | When a user copies the hosted MCP server link.                                                            |
| `docs.context_menu.ai_provider_click`   | When a user clicks an AI provider and create a conversation with current page as context.                 |
| `docs.context_menu.install_mcp_server`  | When a user installs the hosted MCP server on code editors.                                               |


# Pirsch
Source: https://mintlify.com/docs/integrations/analytics/pirsch



Add the following to your `docs.json` file to send analytics to Pirsch.

You can get your site ID from Settings > Developer > Identification Code.

<CodeGroup>
  ```json Analytics options in docs.json
  "integrations": {
      "pirsch": {
          "id": "required"
      }
  }
  ```

  ```json Example
  "integrations": {
      "pirsch": {
          "id": "8Kw7OKxBfswOjnKGZa7P9Day8JmVYwTp"
      }
  }
  ```
</CodeGroup>


# Plausible
Source: https://mintlify.com/docs/integrations/analytics/plausible



Add your site's domain to `docs.json` to send analytics to Plausible.

<Info>
  Do not include `https://` for the domain or server.
</Info>

<CodeGroup>
  ```json Analytics options in docs.json
  "integrations": {
      "plausible": {
          "domain": "required",
          "server": "optional"
      }
  }
  ```

  ```json Example
  "integrations": {
      "plausible": {
          "domain": "docs.domain.com"
      }
  }
  ```
</CodeGroup>


# PostHog
Source: https://mintlify.com/docs/integrations/analytics/posthog



Add the following to your `docs.json` file to send analytics to PostHog.

You only need to include `apiHost` if you are self-hosting PostHog. We send events to `https://app.posthog.com` by default.

<CodeGroup>
  ```json Analytics options in docs.json
  "integrations": {
      "posthog": {
          "apiKey": "YOUR_POSTHOG_PROJECT_API_KEY",
          "apiHost": "optional"
      }
  }
  ```

  ```json Example
  "integrations": {
      "posthog": {
          "apiKey": "phc_TXdpocbYTeZVm5VJmMzHTMrCofBQu3e0kN7HGMNGTVW"
      }
  }
  ```
</CodeGroup>

<br />

<Warning>
  Enabling PostHog analytics will disable the analytics on the Mintlify dashboard.
</Warning>

## Session Recordings

You need to add the URL for your docs website to Posthog's "Authorized domains for recordings" before you can receive session recordings. The option to add your URL is in Posthog's project settings.


# Segment
Source: https://mintlify.com/docs/integrations/analytics/segment



Add your Segment write key to your `docs.json` file to send analytics to Segment.

<CodeGroup>
  ```json Analytics options in docs.json
  "integrations": {
      "segment": {
          "key": "required",
      }
  }
  ```

  ```json Example
  "integrations": {
      "segment": {
          "key": "nqJxiRG15Y6M594P8Sb8ESEciU3VC2"
      }
  }
  ```
</CodeGroup>


# Osano
Source: https://mintlify.com/docs/integrations/privacy/osano



Add the following to your `docs.json` file to add the [Osano](https://www.osano.com/) cookie consent manager.

<CodeGroup>
  ```json Integration options in docs.json
  "integrations": {
      "osano": "SOURCE"
  }
  ```

  ```json Example
  "integrations": {
      "osano": "https://cmp.osano.com/2sUB2dqwqdkks/8dqwd-dwd86£-4a9b/osano.js"
  }
  ```
</CodeGroup>

The `SOURCE` can be found as the `src` value in the code snippet generated by Osano. It always starts with `https://cmp.osano.com/`.

```html Code snippet from Osano
<script src="https://cmp.osano.com/placeholder/placeholder/osano.js"/>
```

## Troubleshooting

<Accordion title="Pages not loading with Strict compliance mode">
  If your documentation pages aren't loading properly when using Osano's **Strict** compliance mode, you'll need to whitelist Mintlify's domain to allow images and other assets to load.

  <Steps>
    <Step title="Navigate to Managed Rules">
      In your Osano dashboard, go to **Scripts** → **Managed Rules**.
    </Step>

    <Step title="Add Mintlify domain">
      Add `.mintlify.app/` as a managed rule.

      <Frame>
        <img src="https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/integrations/osano-managed-rule.png?maxW=1980&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=23c258b9014e7fd42570efffbcff9a6b" alt="Osano managed rule" width="1980" height="738" data-path="images/integrations/osano-managed-rule.png" srcset="https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/integrations/osano-managed-rule.png?w=280&maxW=1980&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=365364704bac1d3c5d0f22e1831d65e2 280w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/integrations/osano-managed-rule.png?w=560&maxW=1980&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=d39c03026d2a43ad466a125f768d5b0d 560w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/integrations/osano-managed-rule.png?w=840&maxW=1980&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=8b585156ac45484cbe611c8ac17ec15d 840w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/integrations/osano-managed-rule.png?w=1100&maxW=1980&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=cecefcf7a080f5cc6f3e4e7bfbfd2955 1100w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/integrations/osano-managed-rule.png?w=1650&maxW=1980&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=ab8c23785095e1181c57c96624b60d11 1650w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/integrations/osano-managed-rule.png?w=2500&maxW=1980&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=3e956853c1bc9424ab198d2c0dbd77f0 2500w" data-optimize="true" data-opv="2" />
      </Frame>

      <Info>
        This ensures that all Mintlify-served assets (including images, stylesheets, and other documentation resources) are treated as essential and will load even when Osano blocks uncategorized third-party content.
      </Info>
    </Step>
  </Steps>
</Accordion>


# Privacy integrations
Source: https://mintlify.com/docs/integrations/privacy/overview

Integrate with a data privacy platform

<CardGroup>
  <Card title="Osano" href="/integrations/privacy/osano" icon={<svg width="32" height="32" className="h-6 w-6" viewBox="0 0 256 256" fill="none" xmlns="http://www.w3.org/2000/svg"><path fillRule="evenodd" clipRule="evenodd" d="M128 256C198.692 256 256 198.692 256 128C256 57.3076 198.692 0 128 0C57.3076 0 0 57.3076 0 128C0 198.692 57.3076 256 128 256ZM128 192C163.346 192 192 163.346 192 128C192 92.6538 163.346 64 128 64C92.6538 64 64 92.6538 64 128C64 163.346 92.6538 192 128 192Z" fill="#7764FA"/></svg>} horizontal />
</CardGroup>

## Enabling Data Privacy Integrations

You can add data privacy platforms onto your docs. Add the `integrations` field into your `docs.json` file with your respective scripts.

```json
  "integrations": {
    "osano": "SOURCE"
  }
```

## Cookie Consent and Disabling Telemetry

If you need to check if a user has already consented to cookies for GDPR compliance, you can specify a local storage key and value under `cookies`:

```json
  "integrations": {
    "cookies": {
      "key": "LOCAL STORAGE KEY",
      "value": "LOCAL STORAGE VALUE"
    }
  }
```

If these values are set, local storage will be checked to see if the user has consented to cookies. If they have not, telemetry will be disabled.

If you'd like to disable telemetry for all users, you can add the following to your `docs.json` file:

```json
  "integrations": {
    "telemetry": {
      "enabled": false
    }
  }
```


# Speakeasy
Source: https://mintlify.com/docs/integrations/sdks/speakeasy

Automate your SDK usage snippets in the API playground

Autogenerated code snippets from Speakeasy SDKs can be integrated directly into Mintlify API reference documentation. SDK usage snippets are shown in the [interactive playground](/api-playground/overview) of Mintlify-powered documentation sites.

<Frame>
    <img src="https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/speakeasy/mintlify-with-speakeasy-openapi.png?maxW=2560&auto=format&n=mvenohBb7F5T71_N&q=85&s=fcddfa925c98dab1b1696057d391f474" alt="A Mintlify API playground with Speakeasy code snippets." width="2560" height="1440" data-path="images/speakeasy/mintlify-with-speakeasy-openapi.png" srcset="https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/speakeasy/mintlify-with-speakeasy-openapi.png?w=280&maxW=2560&auto=format&n=mvenohBb7F5T71_N&q=85&s=a7ed396e7528528069d576d4429f02c4 280w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/speakeasy/mintlify-with-speakeasy-openapi.png?w=560&maxW=2560&auto=format&n=mvenohBb7F5T71_N&q=85&s=11b5e640dce15a2727a7021496647e0a 560w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/speakeasy/mintlify-with-speakeasy-openapi.png?w=840&maxW=2560&auto=format&n=mvenohBb7F5T71_N&q=85&s=b9f3de44317c12ff4466b4225cd9c39e 840w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/speakeasy/mintlify-with-speakeasy-openapi.png?w=1100&maxW=2560&auto=format&n=mvenohBb7F5T71_N&q=85&s=4c876cc8387d083c355a1df81068d07d 1100w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/speakeasy/mintlify-with-speakeasy-openapi.png?w=1650&maxW=2560&auto=format&n=mvenohBb7F5T71_N&q=85&s=98eff5da9573c8534563de582834b9cb 1650w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/speakeasy/mintlify-with-speakeasy-openapi.png?w=2500&maxW=2560&auto=format&n=mvenohBb7F5T71_N&q=85&s=aff7c71721452e157a8119fa8f8c1851 2500w" data-optimize="true" data-opv="2" />
</Frame>

## Prerequisites

To integrate Mintlify with Speakeasy, you'll need the following:

* A [Mintlify documentation repository](/quickstart#creating-the-repository).
* A Speakeasy-generated SDK with a configured [automated code sample URL](https://www.speakeasy.com/docs/code-samples/automated-code-sample-urls).

## Setting up the integration

To integrate Speakeasy with Mintlify, you must get the API's combined spec public URL from the registry and update your `docs.json` configuration file.

### Get the API's combined spec public URL from the registry

Navigate to your [Speakeasy Dashboard](https://app.speakeasy.com) and open the **API Registry** tab. Open the `*-with-code-samples` entry for the API.

<Frame>
    <img src="https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/speakeasy/openapi-registry-and-combined-spec.png?maxW=2560&auto=format&n=mvenohBb7F5T71_N&q=85&s=6327fc19fa4c7b0f4881cdd2b37f0ee2" alt="Screenshot of the Speakeasy API Registry page. The API Registry tab is emphasized with a red square and the number 1 and the entry for the API is emphasized with a red square and the number 2." width="2560" height="1440" data-path="images/speakeasy/openapi-registry-and-combined-spec.png" srcset="https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/speakeasy/openapi-registry-and-combined-spec.png?w=280&maxW=2560&auto=format&n=mvenohBb7F5T71_N&q=85&s=e577582ec94016a4557d509e2c5f869d 280w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/speakeasy/openapi-registry-and-combined-spec.png?w=560&maxW=2560&auto=format&n=mvenohBb7F5T71_N&q=85&s=2e176f34f2f02745202bb3089624cfb6 560w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/speakeasy/openapi-registry-and-combined-spec.png?w=840&maxW=2560&auto=format&n=mvenohBb7F5T71_N&q=85&s=b94c6007aa4f18c2c7a089c8f086386c 840w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/speakeasy/openapi-registry-and-combined-spec.png?w=1100&maxW=2560&auto=format&n=mvenohBb7F5T71_N&q=85&s=e2ef6476ae1056d129aef591433cae6c 1100w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/speakeasy/openapi-registry-and-combined-spec.png?w=1650&maxW=2560&auto=format&n=mvenohBb7F5T71_N&q=85&s=2c15c54ec1ec07e803d8266be0272098 1650w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/speakeasy/openapi-registry-and-combined-spec.png?w=2500&maxW=2560&auto=format&n=mvenohBb7F5T71_N&q=85&s=eb5e2b7742626f13a3a9d4933bc5dfc1 2500w" data-optimize="true" data-opv="2" />
</Frame>

<Note>
  If the entry is not labeled **Combined Spec**, ensure that the API has an [automatic code sample URL](https://www.speakeasy.com/docs/code-samples/automated-code-sample-urls) configured.
</Note>

From the registry entry's page, copy the provided public URL.

<Frame>
    <img src="https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/speakeasy/copy-combined-spec-url.png?maxW=2560&auto=format&n=mvenohBb7F5T71_N&q=85&s=918dd03b30dddd2f3a52ce2376175678" alt="Screenshot showing the combined spec registry entry with the copy URL function emphasized with a red square." width="2560" height="1440" data-path="images/speakeasy/copy-combined-spec-url.png" srcset="https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/speakeasy/copy-combined-spec-url.png?w=280&maxW=2560&auto=format&n=mvenohBb7F5T71_N&q=85&s=7c931ab39faac5cd5870889e1c370375 280w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/speakeasy/copy-combined-spec-url.png?w=560&maxW=2560&auto=format&n=mvenohBb7F5T71_N&q=85&s=214535a11187b0e1c02f1fe7f4a391bd 560w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/speakeasy/copy-combined-spec-url.png?w=840&maxW=2560&auto=format&n=mvenohBb7F5T71_N&q=85&s=88d7c586694650abeed63bef7cc9128b 840w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/speakeasy/copy-combined-spec-url.png?w=1100&maxW=2560&auto=format&n=mvenohBb7F5T71_N&q=85&s=236912cbd5a51ac4d58804f2c3b9d72f 1100w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/speakeasy/copy-combined-spec-url.png?w=1650&maxW=2560&auto=format&n=mvenohBb7F5T71_N&q=85&s=e9b530c18d6889156c7427aa57287538 1650w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/speakeasy/copy-combined-spec-url.png?w=2500&maxW=2560&auto=format&n=mvenohBb7F5T71_N&q=85&s=666c679189540f2bc45691a028a67173 2500w" data-optimize="true" data-opv="2" />
</Frame>

### Update your `docs.json` configuration file

Add the combined spec URL to an **Anchors** or **Tabs** section in your `docs.json` file.

Add the combined spec URL to an anchor by updating the `anchor` field in your `docs.json` file as follows:

```json docs.json
{
  "anchors": [
    {
      "name": "API Reference",
      // !mark
      "openapi": "SPEAKEASY_COMBINED_SPEC_URL",
      "url": "api-reference",
      "icon": "square-terminal"
    }
  ]
}
```

Add the combined spec URL to a tab by updating the `tab` field in the `docs.json` file as follows:

```json docs.json
{
  "tabs": [
    {
      "name": "API Reference",
      "url": "api-reference",
      // !mark
      "openapi": "SPEAKEASY_COMBINED_SPEC_URL"
    }
  ]
}
```

Speakeasy-generated code snippets can now be viewed in your API docs and interacted with in the playground.


# Stainless
Source: https://mintlify.com/docs/integrations/sdks/stainless

Automate SDK example snippets in your API playground

## Prerequisites

* Have a [Stainless](https://app.stainless.com) account.

## Integrate with Stainless

<Steps>
  <Step title="Set up OpenAPI decoration in Stainless.">
    In your `stainless.yml` config file, add `openapi.code_samples: 'mintlify'`. See the [Stainless documentation](https://app.stainless.com/docs/guides/integrate-docs) for more information.
  </Step>

  <Step title="Publish the URL to your OpenAPI spec.">
    In your Stainless project:

    1. Select the **Release** tab.
    2. Select **Setup OpenAPI publishing**.
    3. Copy the URL to your publicly accessible OpenAPI spec.

    <img src="https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/stainless-public-OpenAPI-spec.png?maxW=2124&auto=format&n=mvenohBb7F5T71_N&q=85&s=2762ca626310669368919d2965db0b5d" alt="Stainless release page with the OpenAPI spec URL highlighted with a green box." width="2124" height="1104" data-path="images/stainless-public-OpenAPI-spec.png" srcset="https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/stainless-public-OpenAPI-spec.png?w=280&maxW=2124&auto=format&n=mvenohBb7F5T71_N&q=85&s=d3a1387830943d0ec7989ac9e74afb8d 280w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/stainless-public-OpenAPI-spec.png?w=560&maxW=2124&auto=format&n=mvenohBb7F5T71_N&q=85&s=c904b199a73c76d78c68259cbc9eb41c 560w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/stainless-public-OpenAPI-spec.png?w=840&maxW=2124&auto=format&n=mvenohBb7F5T71_N&q=85&s=755e2565d17723b18a12740bde9b6516 840w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/stainless-public-OpenAPI-spec.png?w=1100&maxW=2124&auto=format&n=mvenohBb7F5T71_N&q=85&s=d8ca3d95ad9fa8e850b5d124b1fd774f 1100w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/stainless-public-OpenAPI-spec.png?w=1650&maxW=2124&auto=format&n=mvenohBb7F5T71_N&q=85&s=aaf4aadf4d94b24ccc4e2842e33809b0 1650w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/stainless-public-OpenAPI-spec.png?w=2500&maxW=2124&auto=format&n=mvenohBb7F5T71_N&q=85&s=68dfd9150cfc0d29b1957a3d03e95cc8 2500w" data-optimize="true" data-opv="2" />
  </Step>

  <Step title={<>Add your OpenAPI spec URL to your <code>docs.json</code>.</>}>
    In your `docs.json` file, add the URL from Stainless to the `openapi` field. See [OpenAPI Setup](/api-playground/openapi-setup) for more information.
  </Step>
</Steps>


# Front
Source: https://mintlify.com/docs/integrations/support/front



Add the following to your `docs.json` file to add a [Front Chat](https://front.com) widget.

<CodeGroup>
  ```json Integration options in docs.json
  "integrations": {
      "frontchat": "CHAT_ID"
  }
  ```

  ```json Example
  "integrations": {
      "frontchat": "1365d046d7c023e9b030ce90d02d093a"
  }
  ```
</CodeGroup>


# Intercom
Source: https://mintlify.com/docs/integrations/support/intercom



Add the following to your `docs.json` file to add an [Intercom](https://www.intercom.com) widget.

<CodeGroup>
  ```json Integration options in docs.json
  "integrations": {
        "intercom": {
              "appId": "APP_ID"
        }
  }
  ```

  ```json Example
  "integrations": {
        "intercom": {
              "appId": "APP_ID"
        }
  }
  ```
</CodeGroup>


# Support integrations
Source: https://mintlify.com/docs/integrations/support/overview

Integrate with a support widget

<CardGroup>
  <Card title="Intercom" href="/integrations/support/intercom" icon={<svg className="h-6 w-6" width="2500" height="2500" viewBox="0 0 256 256" xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="xMidYMid"><path d="M221.867 140.748a8.534 8.534 0 0 1-17.067 0V64a8.534 8.534 0 0 1 17.067 0v76.748zm-2.978 53.413c-1.319 1.129-32.93 27.655-90.889 27.655-57.958 0-89.568-26.527-90.887-27.656a8.535 8.535 0 0 1-.925-12.033 8.53 8.53 0 0 1 12.013-.942c.501.42 28.729 23.563 79.8 23.563 51.712 0 79.503-23.31 79.778-23.545 3.571-3.067 8.968-2.655 12.033.925a8.534 8.534 0 0 1-.923 12.033zM34.133 64A8.534 8.534 0 0 1 51.2 64v76.748a8.534 8.534 0 0 1-17.067 0V64zm42.668-17.067a8.534 8.534 0 0 1 17.066 0v114.001a8.534 8.534 0 0 1-17.066 0v-114zm42.666-4.318A8.532 8.532 0 0 1 128 34.082a8.532 8.532 0 0 1 8.534 8.533v123.733a8.534 8.534 0 0 1-17.067 0V42.615zm42.667 4.318a8.534 8.534 0 0 1 17.066 0v114.001a8.534 8.534 0 0 1-17.066 0v-114zM224 0H32C14.327 0 0 14.327 0 32v192c0 17.672 14.327 32 32 32h192c17.673 0 32-14.328 32-32V32c0-17.673-14.327-32-32-32z" fill="#1F8DED"/></svg>} horizontal />

  <Card
    href="/integrations/support/front"
    title="Front"
    icon={<svg className="h-6 w-6" width="754" height="754" viewBox="0 0 754 754" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M124 135.5C124 69 177.9 15 244.5 15H630.8V186.4C630.8 219.7 603.8 246.6 570.6 246.6H413.6C381.6 246.6 355.7 272.5 355.7 304.5V678.7C355.7 712 328.7 738.9 295.5 738.9H124V135.5Z" fill="#001B38"/>
<path d="M415 462.4C501.377 462.4 571.4 392.377 571.4 306C571.4 219.623 501.377 149.6 415 149.6C328.623 149.6 258.6 219.623 258.6 306C258.6 392.377 328.623 462.4 415 462.4Z" fill="url(#paint0_linear_66_11)"/>
<path opacity="0.5" d="M415 462.4C501.377 462.4 571.4 392.377 571.4 306C571.4 219.623 501.377 149.6 415 149.6C328.623 149.6 258.6 219.623 258.6 306C258.6 392.377 328.623 462.4 415 462.4Z" fill="url(#paint1_linear_66_11)"/>
<defs>
<linearGradient id="paint0_linear_66_11" x1="301.703" y1="191.962" x2="536.873" y2="428.762" gradientUnits="userSpaceOnUse">
<stop stopColor="#FF0057" stopOpacity="0.16"/>
<stop offset="0.86" stopColor="#FF0057"/>
</linearGradient>
<linearGradient id="paint1_linear_66_11" x1="301.703" y1="191.962" x2="536.873" y2="428.762" gradientUnits="userSpaceOnUse">
<stop stopColor="#FF0057" stopOpacity="0.16"/>
<stop offset="0.86" stopColor="#FF0057"/>
</linearGradient>
</defs>
</svg>
}
    horizontal
  />
</CardGroup>

## Enabling support integrations

Integrate customer support widgets into your documentation. Add the `integrations` field to your `docs.json` file with your respective app ID.

```json
  "integrations": {
    "intercom": "APP_ID",
    "frontchat": "CHAT_ID"
  }
```


# Lists and tables
Source: https://mintlify.com/docs/list-table

Display information in lists and tables

## Lists

Lists follow the official [Markdown syntax](https://www.markdownguide.org/basic-syntax/#lists-1).

### Ordered list

To create an ordered list, add numbers followed by a period before list items.

1. First item
2. Second item
3. Third item
4. Fourth item

```mdx
1. First item
2. Second item
3. Third item
4. Fourth item
```

### Unordered list

To create an unordered list, add dashes (`-`), asterisks (`*`), or plus signs (`+`) before list items.

* First item
* Second item
* Third item
* Fourth item

```mdx
- First item
- Second item
- Third item
- Fourth item
```

### Nested list

Indent list items to nest them.

* First item
* Second item
  * Additional item
  * Additional item
* Third item

```mdx
- First item
- Second item
  - Additional item
  - Additional item
- Third item
```

## Tables

Tables follow the official [Markdown syntax](https://www.markdownguide.org/extended-syntax/#tables).

To add a table, use three or more hyphens (`---`) to create each column's header, and use pipes (`|`) to separate each column. For compatibility, you should also add a pipe on either end of the row.

| Property | Description                           |
| -------- | ------------------------------------- |
| Name     | Full name of user                     |
| Age      | Reported age                          |
| Joined   | Whether the user joined the community |

```mdx
| Property | Description                           |
| -------- | ------------------------------------- |
| Name     | Full name of user                     |
| Age      | Reported age                          |
| Joined   | Whether the user joined the community |
```


# Navigation
Source: https://mintlify.com/docs/navigation

Structure and customize your documentation's navigation hierarchy

The [navigation](settings#param-navigation) property in `docs.json` controls the structure and information hierarchy of your documentation.

With proper navigation configuration, you can organize your content so that users can find exactly what they're looking for.

## Pages

Pages are the most fundamental navigation component. Pages map to the MDX files that make up your documentation.

<img className="block dark:hidden pointer-events-none" src="https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/navigation/pages-light.png?maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=e5721b14bb1400c9a559853a6fa333c4" alt="" width="1184" height="320" data-path="images/navigation/pages-light.png" srcset="https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/navigation/pages-light.png?w=280&maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=c72b2a6d4a00b0b9e66c7a5ca9dd3146 280w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/navigation/pages-light.png?w=560&maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=e4aa97514731c86a6d0ddfdaf463a87b 560w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/navigation/pages-light.png?w=840&maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=5cdb7fc68fe7a057dfb96adeb78abef1 840w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/navigation/pages-light.png?w=1100&maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=b3692a0138df77d140cd2f355bb35eaf 1100w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/navigation/pages-light.png?w=1650&maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=713aa5202781a3be1cb7242ceacba261 1650w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/navigation/pages-light.png?w=2500&maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=cea642e581ea1677e637fc87c5f17943 2500w" data-optimize="true" data-opv="2" />

<img className="hidden dark:block pointer-events-none" src="https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/navigation/pages-dark.png?maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=27a1db5a95067446119c91896fcaeb23" alt="" width="1184" height="320" data-path="images/navigation/pages-dark.png" srcset="https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/navigation/pages-dark.png?w=280&maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=8c07796fd588e5d2d37a2fa1f08c8c11 280w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/navigation/pages-dark.png?w=560&maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=4b71d9d02d748a14f93cbee37903a705 560w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/navigation/pages-dark.png?w=840&maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=8e0f5107229610c270e78fc85f20c678 840w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/navigation/pages-dark.png?w=1100&maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=da0f2cc29018513eab998fa6e7be4058 1100w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/navigation/pages-dark.png?w=1650&maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=2ba6cee931d77129c8fadc0acd59f9b6 1650w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/navigation/pages-dark.png?w=2500&maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=8f473101d4fe507293d74ac0ea34263d 2500w" data-optimize="true" data-opv="2" />

In the `navigation` object, `pages` is an array where each entry must reference the path to a [page file](pages).

```json
{
  "navigation": {
    "pages": [
      "settings",
      "pages",
      "navigation",
      "themes",
      "custom-domain"
    ]
  }
}
```

## Groups

Use groups to organize your sidebar navigation into sections. Groups can be nested within each other, labeled with tags, and styled with icons.

<img className="block dark:hidden pointer-events-none" src="https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/navigation/groups-light.png?maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=250a06593b7403c5940b48ae20fc9d31" alt="" width="1184" height="320" data-path="images/navigation/groups-light.png" srcset="https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/navigation/groups-light.png?w=280&maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=e5ed2422ff3f092848ae6f6dacc76da0 280w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/navigation/groups-light.png?w=560&maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=025d105c292c79dd44a48c7d5b0b4593 560w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/navigation/groups-light.png?w=840&maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=09085633198837b187b0ed1d2b03e560 840w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/navigation/groups-light.png?w=1100&maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=e27fffbde9d4030926dbdd888e39bc33 1100w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/navigation/groups-light.png?w=1650&maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=3fc0e7357ae21925c3dc0612997ec1df 1650w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/navigation/groups-light.png?w=2500&maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=3875d354b9e2e49cb7646cb7d9d14bb6 2500w" data-optimize="true" data-opv="2" />

<img className="hidden dark:block pointer-events-none" src="https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/navigation/groups-dark.png?maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=7034367466a4c005f7f3a7d38821f3e7" alt="" width="1184" height="320" data-path="images/navigation/groups-dark.png" srcset="https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/navigation/groups-dark.png?w=280&maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=39c3adb3d5234df737b751483eaf6f42 280w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/navigation/groups-dark.png?w=560&maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=9e7d74bfe762840e8f643ce8d282531c 560w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/navigation/groups-dark.png?w=840&maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=3bf901ae8f57aefec579c0b5669d2ac7 840w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/navigation/groups-dark.png?w=1100&maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=0aaad40c50363bc2e60326de64ad74d8 1100w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/navigation/groups-dark.png?w=1650&maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=2791996b89ff99b17484d6e493f57238 1650w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/navigation/groups-dark.png?w=2500&maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=9d841ad7d9b05141d5c8fd710f1a5119 2500w" data-optimize="true" data-opv="2" />

In the `navigation` object, `groups` is an array where each entry is an object that requires a `group` field and a `pages` field. The `icon` and `tag` fields are optional.

```json
{
  "navigation": {
    "groups": [
      {
        "group": "Getting started",
        "icon": "play",
        "pages": [
          "quickstart",
          {
            "group": "Editing",
            "icon": "pencil",
            "pages": [
              "installation",
              "editor"
            ]
          }
        ]
      },
      {
        "group": "Writing content",
        "icon": "notebook-text",
        "tag": "NEW",
        "pages": [
          "writing-content/page",
          "writing-content/text"
        ]
      }
    ]
  }
}
```

## Tabs

Tabs create distinct sections of your documentation with separate URL paths. Tabs create a horizontal navigation bar at the top of your documentation that lets users switch between sections.

<img className="block dark:hidden pointer-events-none" src="https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/navigation/tabs-light.png?maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=24fcb20ef0a7544aaf3bad82424f9f2c" alt="" width="1184" height="320" data-path="images/navigation/tabs-light.png" srcset="https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/navigation/tabs-light.png?w=280&maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=094822525f18513c5ee783171d56c8e9 280w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/navigation/tabs-light.png?w=560&maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=799e0b047a70cb72e7a214a1f4d44042 560w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/navigation/tabs-light.png?w=840&maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=02987c00c3ef56851d3e31dbb2560bf5 840w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/navigation/tabs-light.png?w=1100&maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=b8ebc43753d279b1dc91c3d46b0132a6 1100w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/navigation/tabs-light.png?w=1650&maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=8e6d5cac2ad27c0de741a2c3db08a325 1650w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/navigation/tabs-light.png?w=2500&maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=720cc8182b0c1c62d2437dfd861bcf4a 2500w" data-optimize="true" data-opv="2" />

<img className="hidden dark:block pointer-events-none" src="https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/navigation/tabs-dark.png?maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=9463c4f3c23bc995a60577f3ed9677ac" alt="" width="1184" height="320" data-path="images/navigation/tabs-dark.png" srcset="https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/navigation/tabs-dark.png?w=280&maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=dde207908eb3ca68ff44dde3be424523 280w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/navigation/tabs-dark.png?w=560&maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=0866bd804890c491b2bb215adc490854 560w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/navigation/tabs-dark.png?w=840&maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=7b4bd79c2ba1b1bc48a710609930b7b3 840w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/navigation/tabs-dark.png?w=1100&maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=8aaad52871dd965bc1d145c6ba459f84 1100w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/navigation/tabs-dark.png?w=1650&maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=aeacc97a828569fbdf2ad0e2e0ecd7ad 1650w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/navigation/tabs-dark.png?w=2500&maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=f992d6b0e402477c2877338d5212d87b 2500w" data-optimize="true" data-opv="2" />

In the `navigation` object, `tabs` is an array where each entry is an object that requires a `tab` field and can contain other navigation fields such as groups, pages, icons, or links to external pages.

```json
{
  "navigation": {
    "tabs": [
      {
        "tab": "API reference",
        "icon": "square-terminal",
        "pages": [
          "api-reference/get",
          "api-reference/post",
          "api-reference/delete"
        ]
      },
      {
        "tab": "SDKs",
        "icon": "code",
        "pages": [
          "sdk/fetch",
          "sdk/create",
          "sdk/delete"
        ]
      },
      {
        "tab": "Blog",
        "icon": "newspaper",
        "href": "https://external-link.com/blog"
      }
    ]
  }
}
```

### Menus

Menus add dropdown navigation items to a tab. Use menus to help users go directly to specific pages within a tab.

In the `navigation` object, `menu` is an array where each entry is an object that requires an `item` field and can contain other navigation fields such as groups, pages, icons, or links to external pages.

```json
{
  "navigation": {
    "tabs": [
      {
        "tab": "Developer tools",
        "icon": "square-terminal",
        "menu": [
          {
            "item": "API reference",
            "icon": "rocket",
            "groups": [
              {
                "group": "Core endpoints",
                "icon": "square-terminal",
                "pages": [
                  "api-reference/get",
                  "api-reference/post",
                  "api-reference/delete"
                ]
              }
            ]
          },
          {
            "item": "SDKs",
            "icon": "code",
            "description": "SDKs are used to interact with the API.",
            "pages": [
              "sdk/fetch",
              "sdk/create",
              "sdk/delete"
            ]
          }
        ]
      }
    ]
  }
}
```

## Anchors

Anchors add persistent navigation items to the top of your sidebar. Use anchors to section your content, provide quick access to external resources, or create prominent calls to action.

<img className="block dark:hidden pointer-events-none" src="https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/navigation/anchors-light.png?maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=785e18e07da6f0d4eca862e8672f478b" width="1184" height="320" data-path="images/navigation/anchors-light.png" srcset="https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/navigation/anchors-light.png?w=280&maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=46cfae6945d02950d277b90d3e7572ca 280w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/navigation/anchors-light.png?w=560&maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=6f1ac9867d7114f5146fdaa030093e98 560w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/navigation/anchors-light.png?w=840&maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=bb55247f00d3150255882515588ca2fc 840w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/navigation/anchors-light.png?w=1100&maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=4f97511cf8b655862412ef87334a6bac 1100w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/navigation/anchors-light.png?w=1650&maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=c48793416af77655512f0b91abd66360 1650w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/navigation/anchors-light.png?w=2500&maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=f602cd0352a87c6a8a77cdea47087e01 2500w" data-optimize="true" data-opv="2" />

<img className="hidden dark:block pointer-events-none" src="https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/navigation/anchors-dark.png?maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=f87b54a3b182f83d1559558a0b94ff12" width="1184" height="320" data-path="images/navigation/anchors-dark.png" srcset="https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/navigation/anchors-dark.png?w=280&maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=a7580110b79bc3250f23be7d884b4d3a 280w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/navigation/anchors-dark.png?w=560&maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=6f3377d989b2f0341292ed270ee888ad 560w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/navigation/anchors-dark.png?w=840&maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=9fea81f8e49f6716c0df2272e99a161f 840w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/navigation/anchors-dark.png?w=1100&maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=ef61b6d7f9b2013e8e13054808eab1da 1100w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/navigation/anchors-dark.png?w=1650&maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=4416298db4f233a2ca5bada7dd7e6138 1650w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/navigation/anchors-dark.png?w=2500&maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=7671c38020f1ec27e979070d6d0b35c9 2500w" data-optimize="true" data-opv="2" />

In the `navigation` object, `anchors` is an array where each entry is an object that requires an `anchor` field and can contain other navigation fields such as groups, pages, icons, or links to external pages.

```json
{
  "navigation": {
    "anchors": [
      {
        "anchor": "Documentation",
        "icon": "book-open",
        "pages": [
          "quickstart",
          "development",
          "navigation"
        ]
      },
      {
        "anchor": "API reference",
        "icon": "square-terminal",
        "pages": [
          "api-reference/get",
          "api-reference/post",
          "api-reference/delete"
        ]
      },
      {
        "anchor": "Blog",
        "href": "https://external-link.com/blog"
      }
    ]
  }
}
```

For anchors that direct to external links only, use the `global` keyword. Anchors in a `global` object must have an `href` field and cannot point to a relative path.

Global anchors are particularly useful for linking to resources that are not part of your documentation, but should be readily accessible to your users like a blog or support portal

```json
{
  "navigation": {
    "global":  {
      "anchors": [
        {
          "anchor": "Community",
          "icon": "house",
          "href": "https://slack.com"
        },
        {
          "anchor": "Blog",
          "icon": "pencil",
          "href": "https://mintlify.com/blog"
        }
      ]
    },
    "tabs": /*...*/
  }
}
```

## Dropdowns

Dropdowns are contained in an expandable menu at the top of your sidebar navigation. Each item in a dropdown directs to a section of your documentation.

<img className="block dark:hidden pointer-events-none" src="https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/navigation/dropdowns-light.png?maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=265697fae1299d23a5e5d574a4991974" width="1184" height="320" data-path="images/navigation/dropdowns-light.png" srcset="https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/navigation/dropdowns-light.png?w=280&maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=bd066541c4f3bff484a52f894aed7e0d 280w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/navigation/dropdowns-light.png?w=560&maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=249be0e545b55bce5b50ac145aceb7b2 560w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/navigation/dropdowns-light.png?w=840&maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=3967e903baef265d5f7e0417240ac175 840w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/navigation/dropdowns-light.png?w=1100&maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=dbf5233a0891944db1acff41b7a17f2f 1100w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/navigation/dropdowns-light.png?w=1650&maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=2c5d0240b3ad67eda3802aac497e7a93 1650w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/navigation/dropdowns-light.png?w=2500&maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=92aec3268f9d5d35ebd52da8290d5fe8 2500w" data-optimize="true" data-opv="2" />

<img className="hidden dark:block pointer-events-none" src="https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/navigation/dropdowns-dark.png?maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=9ec30def61f45d24bfdd204cbb15ec1b" width="1184" height="320" data-path="images/navigation/dropdowns-dark.png" srcset="https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/navigation/dropdowns-dark.png?w=280&maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=5f03144c9cc1390eae341fed8ef2f10a 280w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/navigation/dropdowns-dark.png?w=560&maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=85ae16bdee7fea5e1dc28d6ae773abbd 560w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/navigation/dropdowns-dark.png?w=840&maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=7eed92ecac592f80e45f0df5056bd914 840w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/navigation/dropdowns-dark.png?w=1100&maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=57b5571e5ec46e4dc78ab54e5231c088 1100w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/navigation/dropdowns-dark.png?w=1650&maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=1bf2633947194b3d123ef891341f88cf 1650w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/navigation/dropdowns-dark.png?w=2500&maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=a6d5a560903f3af8c67f6c83c2bc172d 2500w" data-optimize="true" data-opv="2" />

In the `navigation` object, `dropdowns` is an array where each entry is an object that requires a `dropdown` field and can contain other navigation fields such as groups, pages, icons, or links to external pages.

```json
{
  "navigation": {
    "dropdowns": [
      {
        "dropdown": "Documentation",
        "icon": "book-open",
        "pages": [
          "quickstart",
          "development",
          "navigation"
        ]
      },
      {
        "dropdown": "API reference",
        "icon": "square-terminal",
        "pages": [
          "api-reference/get",
          "api-reference/post",
          "api-reference/delete"
        ]
      },
      {
        "dropdown": "Blog",
        "href": "https://external-link.com/blog"
      }
    ]
  }
}
```

## OpenAPI

Integrate OpenAPI specifications directly into your navigation structure to automatically generate API documentation. Create dedicated API sections or place endpoint pages within other navigation components.

Set a default OpenAPI specification at any level of your navigation hierarchy. Child elements will inherit this specification unless they define their own specification.

```json
{
  "navigation": {
    "groups": [
      {
        "group": "API reference",
        "openapi": "/path/to/openapi-v1.json",
        "pages": [
          "overview",
          "authentication",
          "GET /users",
          "POST /users",
          {
            "group": "Products",
            "openapi": "/path/to/openapi-v2.json",
            "pages": [
              "GET /products",
              "POST /products"
            ]
          }
        ]
      }
    ]
  }
}
```

For more information about referencing OpenAPI endpoints in your docs, see the [OpenAPI setup](/api-playground/openapi-setup).

## Versions

Partition your navigation into different versions. Versions are selectable from a dropdown menu.

<img className="block dark:hidden pointer-events-none" src="https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/navigation/versions-light.png?maxW=1184&auto=format&n=mvenohBb7F5T71_N&q=85&s=e46b3eb2a3e8d4e0573c18bd0bd1bf26" width="1184" height="320" data-path="images/navigation/versions-light.png" srcset="https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/navigation/versions-light.png?w=280&maxW=1184&auto=format&n=mvenohBb7F5T71_N&q=85&s=c4af47b948a2162b5ce95a983dbb021f 280w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/navigation/versions-light.png?w=560&maxW=1184&auto=format&n=mvenohBb7F5T71_N&q=85&s=6d5455e59a3f9088d473421520e935ee 560w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/navigation/versions-light.png?w=840&maxW=1184&auto=format&n=mvenohBb7F5T71_N&q=85&s=2d2819d5d911212c98cb084ef7065718 840w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/navigation/versions-light.png?w=1100&maxW=1184&auto=format&n=mvenohBb7F5T71_N&q=85&s=ce5940c4680b56d8b5247fddab2e8bf5 1100w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/navigation/versions-light.png?w=1650&maxW=1184&auto=format&n=mvenohBb7F5T71_N&q=85&s=6a8b849a10ea2390b86a318f9c4511c3 1650w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/navigation/versions-light.png?w=2500&maxW=1184&auto=format&n=mvenohBb7F5T71_N&q=85&s=4cd375b7b85be40cb4e2a8b71849b6d9 2500w" data-optimize="true" data-opv="2" />

<img className="hidden dark:block pointer-events-none" src="https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/navigation/versions-dark.png?maxW=1184&auto=format&n=mvenohBb7F5T71_N&q=85&s=e5dffffa2fcbd3c5ac42037b95017cb6" width="1184" height="320" data-path="images/navigation/versions-dark.png" srcset="https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/navigation/versions-dark.png?w=280&maxW=1184&auto=format&n=mvenohBb7F5T71_N&q=85&s=87bf9b40519d86e23d33ab4d417f7d2b 280w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/navigation/versions-dark.png?w=560&maxW=1184&auto=format&n=mvenohBb7F5T71_N&q=85&s=415d2f76a330db575abcdaec48c8a83d 560w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/navigation/versions-dark.png?w=840&maxW=1184&auto=format&n=mvenohBb7F5T71_N&q=85&s=6f145a8ff4ef094f4b1d098cd7f536ab 840w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/navigation/versions-dark.png?w=1100&maxW=1184&auto=format&n=mvenohBb7F5T71_N&q=85&s=d0c39a63eb4da544cc742b0b353552af 1100w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/navigation/versions-dark.png?w=1650&maxW=1184&auto=format&n=mvenohBb7F5T71_N&q=85&s=55b9bbf7c3d3fa15b0d1ddeaf2830235 1650w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/navigation/versions-dark.png?w=2500&maxW=1184&auto=format&n=mvenohBb7F5T71_N&q=85&s=2b56e093d89845ae053eb11150a3718a 2500w" data-optimize="true" data-opv="2" />

In the `navigation` object, `versions` is an array where each entry is an object that requires a `version` field and can contain any other navigation fields.

```json
{
  "navigation": {
    "versions": [
      {
        "version": "1.0.0",
        "groups": [
          {
            "group": "Getting started",
            "pages": ["v1/overview", "v1/quickstart", "v1/development"]
          }
        ]
      },
      {
        "version": "2.0.0",
        "groups": [
          {
            "group": "Getting started",
            "pages": ["v2/overview", "v2/quickstart", "v2/development"]
          }
        ]
      }
    ]
  }
}
```

## Languages

Partition your navigation into different languages. Languages are selectable from a dropdown menu.

<img className="block dark:hidden pointer-events-none" src="https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/navigation/languages-light.png?maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=bb0230912f32289cbad58409a796db46" width="1184" height="320" data-path="images/navigation/languages-light.png" srcset="https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/navigation/languages-light.png?w=280&maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=d3305453d45f7028b202058ce6360c4f 280w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/navigation/languages-light.png?w=560&maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=0130aba2025df430f03c43fbcd58af82 560w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/navigation/languages-light.png?w=840&maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=51583dfe68c26fe8002b0d5b8357c8b6 840w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/navigation/languages-light.png?w=1100&maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=89b85cb59debde203289915e47699b9d 1100w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/navigation/languages-light.png?w=1650&maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=2416e8ee42c9c480853e95b814b8ac0f 1650w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/navigation/languages-light.png?w=2500&maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=e19defebc4c665e7fb2f6fe428f50f15 2500w" data-optimize="true" data-opv="2" />

<img className="hidden dark:block pointer-events-none" src="https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/navigation/languages-dark.png?maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=a048674671ad8fe43b2a0ad8495e0a55" width="1184" height="320" data-path="images/navigation/languages-dark.png" srcset="https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/navigation/languages-dark.png?w=280&maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=88e5e467cbd49a04073d41fabffd5665 280w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/navigation/languages-dark.png?w=560&maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=122de186ab6fcc9e729fe386f3a5298d 560w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/navigation/languages-dark.png?w=840&maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=4117e08a25bf9d0f902c04f78a971f85 840w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/navigation/languages-dark.png?w=1100&maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=9f9cb92e09ae89b9c1f55f25c4720f7b 1100w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/navigation/languages-dark.png?w=1650&maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=ccb4d80da9a0e183bee916fe64af5501 1650w, https://dev.mintcdn.com/mintlify/vrB8Q0GeHTqKBEjj/images/navigation/languages-dark.png?w=2500&maxW=1184&auto=format&n=vrB8Q0GeHTqKBEjj&q=85&s=61516695e30c0b0b9669a9550a35bbce 2500w" data-optimize="true" data-opv="2" />

In the `navigation` object, `languages` is an array where each entry is an object that requires a `language` field and can contain any other navigation fields.

We currently support the following languages for localization:

<CardGroup cols={2}>
  <Card title="Arabic (ar)" icon={<img src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/navigation/languages/ar.png" className="w-6 h-6 my-0" />} horizontal />

  <Card title="Chinese (cn)" icon={<img src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/navigation/languages/cn.png" className="w-6 h-6 my-0" />} horizontal />

  <Card title="Chinese (zh-Hant)" icon={<img src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/navigation/languages/cn.png" className="w-6 h-6 my-0" />} horizontal />

  <Card title="English (en)" icon={<img src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/navigation/languages/en.png" className="w-6 h-6 my-0" />} horizontal />

  <Card title="French (fr)" icon={<img src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/navigation/languages/fr.png" className="w-6 h-6 my-0" />} horizontal />

  <Card title="German (de)" icon={<img src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/navigation/languages/de.png" className="w-6 h-6 my-0" />} horizontal />

  <Card title="Indonesian (id)" icon={<img src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/navigation/languages/id.png" className="w-6 h-6 my-0" />} horizontal />

  <Card title="Italian (it)" icon={<img src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/navigation/languages/it.png" className="w-6 h-6 my-0" />} horizontal />

  <Card title="Japanese (jp)" icon={<img src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/navigation/languages/jp.png" className="w-6 h-6 my-0" />} horizontal />

  <Card title="Korean (ko)" icon={<img src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/navigation/languages/ko.png" className="w-6 h-6 my-0" />} horizontal />

  <Card title="Portuguese (pt-BR)" icon={<img src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/navigation/languages/pt-br.png" className="w-6 h-6 my-0" />} horizontal />

  <Card title="Russian (ru)" icon={<img src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/navigation/languages/ru.png" className="w-6 h-6 my-0" />} horizontal />

  <Card title="Spanish (es)" icon={<img src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/navigation/languages/es.png" className="w-6 h-6 my-0" />} horizontal />

  <Card title="Turkish (tr)" icon={<img src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/navigation/languages/tr.png" className="w-6 h-6 my-0" />} horizontal />
</CardGroup>

```json
{
  "navigation": {
    "languages": [
      {
        "language": "en",
        "groups": [
          {
            "group": "Getting started",
            "pages": ["en/overview", "en/quickstart", "en/development"]
          }
        ]
      },
      {
        "language": "es",
        "groups": [
          {
            "group": "Getting started",
            "pages": ["es/overview", "es/quickstart", "es/development"]
          }
        ]
      }
    ]
  }
}
```

For automated translations, [contact our sales team](mailto:gtm@mintlify.com) to discuss solutions.

## Nesting

You can use any combination of anchors, tabs, and dropdowns. The components can be nested within each other interchangeably to create your desired navigation structure.

<CodeGroup>
  ```json Anchors
  {
    "navigation": {
      "anchors": [
        {
          "anchor": "Anchor 1",
          "groups": [
            {
              "group": "Group 1",
              "pages": [
                "some-folder/file-1",
                "another-folder/file-2",
                "just-a-file"
              ]
            }
          ]
        },
        {
          "anchor": "Anchor 2",
          "groups": [
            {
              "group": "Group 2",
              "pages": [
                "some-other-folder/file-1",
                "various-different-folders/file-2",
                "another-file"
              ]
            }
          ]
        }
      ]
    }
  }
  ```

  ```json Tabs
  {
    "navigation": {
      "tabs": [
        {
          "tab": "Tab 1",
          "groups": [
            {
              "group": "Group 1",
              "pages": [
                "some-folder/file-1",
                "another-folder/file-2",
                "just-a-file"
              ]
            }
          ]
        },
        {
          "tab": "Tab 2",
          "groups": [
            {
              "group": "Group 2",
              "pages": [
                "some-other-folder/file-1",
                "various-different-folders/file-2",
                "another-file"
              ]
            }
          ]
        }
      ]
    }
  }
  ```

  ```json Tabs with external anchor
  {
    "navigation": {
      "global": {
        "anchors": [
          {
            "anchor": "Anchor 1",
            "href": "https://mintlify.com/docs"
          }
        ]
      },
      "tabs": [
        {
          "tab": "Tab 1",
          "groups": [
            {
              "group": "Group 1",
              "pages": [
                "some-folder/file-1",
                "another-folder/file-2",
                "just-a-file"
              ]
            }
          ]
        },
        {
          "tab": "Tab 2",
          "groups": [
            {
              "group": "Group 2",
              "pages": [
                "some-other-folder/file-1",
                "various-different-folders/file-2",
                "another-file"
              ]
            }
          ]
        }
      ]
    }
  }
  ```
</CodeGroup>

## Breadcrumbs

Style pages with breadcrumbs to display the full navigation path at the top of pages.

```json
{
  "styling": {
    "eyebrows": "breadcrumbs"
  }
}
```

## FAQ

<Accordion title="What navigation folders should I avoid?">
  Do not use `/api` or `/mcp` as root path names (titles or folders). The `/api` and `/mcp` paths are reserved in production and will cause pages to return 404 errors if their URLs contain `/api` or `/mcp`.
</Accordion>


# Pages
Source: https://mintlify.com/docs/pages

Pages are the building blocks of your documentation

Each page is an MDX file, which combines Markdown content with React components to let you create rich, interactive documentation.

## Page metadata

Every page starts with frontmatter, the YAML metadata enclosed by `---` at the beginning of a file. This metadata defines how your page appears and behaves.

Use metadata to control:

* Page titles and descriptions
* Sidebar titles, icons, and tags

<ResponseField name="title" type="string" required>
  The title of your page that appears in navigation and browser tabs.
</ResponseField>

<ResponseField name="description" type="string">
  A brief description of what this page covers. Appears under the title and improves SEO.
</ResponseField>

<ResponseField name="sidebarTitle" type="string">
  A short title that displays in the sidebar navigation.
</ResponseField>

<ResponseField name="icon" type="string">
  The icon to display.

  Options:

  * [Font Awesome icon](https://fontawesome.com/icons) name
  * [Lucide icon](https://lucide.dev/icons) name
  * JSX-compatible SVG code wrapped in curly braces
  * URL to an externally hosted icon
  * Path to an icon file in your project

  For custom SVG icons:

  1. Convert your SVG using the [SVGR converter](https://react-svgr.com/playground/).
  2. Paste your SVG code into the SVG input field.
  3. Copy the complete `<svg>...</svg>` element from the JSX output field.
  4. Wrap the JSX-compatible SVG code in curly braces: `icon={<svg ...> ... </svg>}`.
  5. Adjust `height` and `width` as needed.
</ResponseField>

<ResponseField name="iconType" type="string">
  The [Font Awesome](https://fontawesome.com/icons) icon style. Only used with Font Awesome icons.

  Options: `regular`, `solid`, `light`, `thin`, `sharp-solid`, `duotone`, `brands`.
</ResponseField>

<ResponseField name="tag" type="string">
  A tag that appears next to your page title in the sidebar.
</ResponseField>

```yaml Example YAML frontmatter wrap
---
title: "About frontmatter"
description: "Frontmatter is the metadata that controls how your page appears and behaves"
sidebarTitle: "Frontmatter"
icon: "book"
tag: "NEW"
---
```

## Page mode

Control how your page displays with the `mode` setting.

### Default

If no mode is defined, defaults to a standard layout with a sidebar navigation and table of contents.

```yaml
---
title: "Default page title"
---
```

### Wide

Wide mode hides the table of contents. This is useful for pages that do not have any headings or if you prefer to use the extra horizontal space.

```yaml
---
title: "Wide page title"
mode: "wide"
---
```

### Custom

Custom mode provides a minimalist layout that removes all elements except for the top navbar. Custom mode is a blank canvas to create landing pages or any other unique layouts that you want to have minimal navigation elements for.

```yaml
---
title: "Custom page title"
mode: "custom"
---
```

### Center

Center mode removes the sidebar and table of contents, centering the content. This is useful for changelogs or other pages where you want to emphasize the content.

```yaml
---
title: "Center page title"
mode: "center"
---
```

## API pages

Create interactive API playgrounds by adding an API specification to your frontmatter, `api` or `openapi`.

```yaml
---
openapi: "GET /endpoint"
---
```

Learn more about building [API documentation](/api-playground/overview).

## External links

Link to external sites directly from your navigation with the `url` metadata.

```yaml
---
title: "npm Package"
url: "https://www.npmjs.com/package/mint"
---
```

## Search engine optimization

Most SEO meta tags are automatically generated. You can set SEO meta tags manually to improve your site's SEO, social sharing, and browser compatibility.

<Note>
  Meta tags with colons must be wrapped in quotes.
</Note>

```yaml
---
"twitter:image": "/images/social-preview.jpg"
---
```

See [SEO](/settings/seo) for complete SEO metadata options.

## Internal search keywords

Enhance a specific page's discoverability in the built-in search by providing `keywords` in your metadata. These keywords won't appear as part of the page content or in search results, but users that search for them will be shown the page as a result.

```yaml
---
keywords: ['configuration', 'setup', 'getting started']
---
```


# Quickstart
Source: https://mintlify.com/docs/quickstart

Deploy your documentation in minutes

This quickstart guide shows you how to set up and deploy your documentation site in minutes.

After completing this guide, you will have a live documentation site ready to customize and expand.

<Info>
  **Prerequisites**: Before you begin, [create an account](https://mintlify.com/start) and complete onboarding.
</Info>

## Getting started

After you complete the onboarding process, your documentation site automatically deploys to a unique URL with this format:

```
https://<your-project-name>.mintlify.app
```

Find your URL on the Overview page of your [dashboard](https://dashboard.mintlify.com/).

<Frame>
  <img src="https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/quickstart/mintlify-domain-light.png?maxW=3024&auto=format&n=mvenohBb7F5T71_N&q=85&s=436d6f555fa2bccec15a127a4cc6ef3e" alt="Mintlify Domain" className="block dark:hidden" width="3024" height="1372" data-path="images/quickstart/mintlify-domain-light.png" srcset="https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/quickstart/mintlify-domain-light.png?w=280&maxW=3024&auto=format&n=mvenohBb7F5T71_N&q=85&s=970b5b4f23102d5fd2e8a4b500f5b5b7 280w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/quickstart/mintlify-domain-light.png?w=560&maxW=3024&auto=format&n=mvenohBb7F5T71_N&q=85&s=fb2a03f623ab5224641cdcd74765f56b 560w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/quickstart/mintlify-domain-light.png?w=840&maxW=3024&auto=format&n=mvenohBb7F5T71_N&q=85&s=a2f6c9cc7b8b57a0288e2caaab951d0d 840w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/quickstart/mintlify-domain-light.png?w=1100&maxW=3024&auto=format&n=mvenohBb7F5T71_N&q=85&s=88009b58436d3d8858953c96dff6cc22 1100w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/quickstart/mintlify-domain-light.png?w=1650&maxW=3024&auto=format&n=mvenohBb7F5T71_N&q=85&s=5fe3b13271ccbf6450dac1871e961fd3 1650w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/quickstart/mintlify-domain-light.png?w=2500&maxW=3024&auto=format&n=mvenohBb7F5T71_N&q=85&s=9d13c4a1dc0bb6272257d7b87a1c83d9 2500w" data-optimize="true" data-opv="2" />

  <img src="https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/quickstart/mintlify-domain-dark.png?maxW=3008&auto=format&n=mvenohBb7F5T71_N&q=85&s=f2278427c1e9db902cdf12f553b94f07" alt="Mintlify Domain" className="hidden dark:block" width="3008" height="1368" data-path="images/quickstart/mintlify-domain-dark.png" srcset="https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/quickstart/mintlify-domain-dark.png?w=280&maxW=3008&auto=format&n=mvenohBb7F5T71_N&q=85&s=369de2ae54b9f2570ca923e8ce8c024e 280w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/quickstart/mintlify-domain-dark.png?w=560&maxW=3008&auto=format&n=mvenohBb7F5T71_N&q=85&s=a8bcd982aaba75a9ecb2a1437f169d00 560w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/quickstart/mintlify-domain-dark.png?w=840&maxW=3008&auto=format&n=mvenohBb7F5T71_N&q=85&s=848cbc90e05164c2e16827ccbbb2b43e 840w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/quickstart/mintlify-domain-dark.png?w=1100&maxW=3008&auto=format&n=mvenohBb7F5T71_N&q=85&s=8eff83021802ab3a56ece99cdeb8f0d6 1100w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/quickstart/mintlify-domain-dark.png?w=1650&maxW=3008&auto=format&n=mvenohBb7F5T71_N&q=85&s=6de0c9a7bb927efc30d3d2cb3533ec84 1650w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/quickstart/mintlify-domain-dark.png?w=2500&maxW=3008&auto=format&n=mvenohBb7F5T71_N&q=85&s=31faaeca882f1141f0b7527b70014c93 2500w" data-optimize="true" data-opv="2" />
</Frame>

Your site's URL is available immediately. Use this URL for testing and sharing with your team while you are setting up your docs site.

### Install the GitHub App

Mintlify provides a GitHub App that automates deployment when you push changes to your repository.

Install the GitHub App by following the instructions from the onboarding checklist or your dashboard.

1. Navigate to **Settings** in your Mintlify dashboard.
2. Select **GitHub App** from the sidebar.
3. Select **Install GitHub App**. This opens a new tab to the GitHub App installation page.
4. Select the organization or user account where you want to install the app.
5. Select the repositories that you want to connect.

<Frame>
  <img src="https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/quickstart/github-app-installation-light.png?maxW=3024&auto=format&n=mvenohBb7F5T71_N&q=85&s=412ed0b3fbfb3cc7c95bd887abe16bb7" alt="GitHub App Installation" className="block dark:hidden" width="3024" height="910" data-path="images/quickstart/github-app-installation-light.png" srcset="https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/quickstart/github-app-installation-light.png?w=280&maxW=3024&auto=format&n=mvenohBb7F5T71_N&q=85&s=053442ec53e3271fa271dc35a643b090 280w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/quickstart/github-app-installation-light.png?w=560&maxW=3024&auto=format&n=mvenohBb7F5T71_N&q=85&s=715ffbafd7c667cce6eb79afb1595e90 560w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/quickstart/github-app-installation-light.png?w=840&maxW=3024&auto=format&n=mvenohBb7F5T71_N&q=85&s=2ebe09d99c6aa33fc3f9782bdcb3cdf2 840w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/quickstart/github-app-installation-light.png?w=1100&maxW=3024&auto=format&n=mvenohBb7F5T71_N&q=85&s=caf313778d9a72c9ca28801eb207a344 1100w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/quickstart/github-app-installation-light.png?w=1650&maxW=3024&auto=format&n=mvenohBb7F5T71_N&q=85&s=7226d499fedf19e2db26c17396e20afa 1650w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/quickstart/github-app-installation-light.png?w=2500&maxW=3024&auto=format&n=mvenohBb7F5T71_N&q=85&s=ebffba0e872659f823c5e0c4aec35e4c 2500w" data-optimize="true" data-opv="2" />

  <img src="https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/quickstart/github-app-installation-dark.png?maxW=3016&auto=format&n=mvenohBb7F5T71_N&q=85&s=241e8c9f2c5d43462d8db01ebfcfa0b5" alt="GitHub App Installation" className="hidden dark:block" width="3016" height="906" data-path="images/quickstart/github-app-installation-dark.png" srcset="https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/quickstart/github-app-installation-dark.png?w=280&maxW=3016&auto=format&n=mvenohBb7F5T71_N&q=85&s=3743d885cf81c58169bfda46428d4bc3 280w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/quickstart/github-app-installation-dark.png?w=560&maxW=3016&auto=format&n=mvenohBb7F5T71_N&q=85&s=a96ab070df60946de2e9650bd59285d5 560w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/quickstart/github-app-installation-dark.png?w=840&maxW=3016&auto=format&n=mvenohBb7F5T71_N&q=85&s=9e2012be691e8ebbddd547b71443f617 840w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/quickstart/github-app-installation-dark.png?w=1100&maxW=3016&auto=format&n=mvenohBb7F5T71_N&q=85&s=e227a70d2e350b02c5a7d63e3892175e 1100w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/quickstart/github-app-installation-dark.png?w=1650&maxW=3016&auto=format&n=mvenohBb7F5T71_N&q=85&s=c31290a3378fd96011102a9304f7e46e 1650w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/quickstart/github-app-installation-dark.png?w=2500&maxW=3016&auto=format&n=mvenohBb7F5T71_N&q=85&s=c459f7cfeaf0a456ef9f03c6cfe13d5d 2500w" data-optimize="true" data-opv="2" />
</Frame>

<Info>
  Update the GitHub App permissions if you move your documentation to a different repository.
</Info>

### Authorize your GitHub account

1. Navigate to **Settings** in your Mintlify dashboard.
2. Select **My Profile** from the sidebar.
3. Select **Authorize GitHub account**. This opens a new tab to the GitHub authorization page.

<Info>
  An admin for your GitHub organization may need to authorize your account depending on your organization settings.
</Info>

## Editing workflows

Mintlify offers two workflows for creating and maintaining your documentation:

<Card title="Code-based workflow" icon="terminal" horizontal href="#code-based-workflow">
  For users who prefer working with existing tools in their local environment. Click to jump to this section.
</Card>

<Card title="Web editor workflow" icon="mouse-pointer-2" horizontal href="#web-editor-workflow">
  For users who prefer a visual interface in their web browser. Click to jump to this section.
</Card>

## Code-based workflow

The code-based workflow integrates with your existing development environment and Git repositories. This workflow is best for technical teams who want to manage documentation alongside code.

### Install the CLI

To work locally with your documentation, install the Command Line Interface (CLI), called [mint](https://www.npmjs.com/package/mint), by running this command in your terminal:

<CodeGroup>
  ```bash npm
  npm i -g mint
  ```

  ```bash pnpm
  pnpm add -g mint
  ```
</CodeGroup>

<Info>
  You need Node.js installed on your machine. If you encounter installation issues, check the troubleshooting guide.
</Info>

### Edit the documentation

After setting up your environment, you can start editing your documentation files. For example, update the title of the introduction page:

1. Open your repository created during onboarding.
2. Open `index.mdx` and locate the top of the file:

```mdx index.mdx
---
title: "Introduction"
description: "This is the introduction to the documentation"
---
```

3. Update the `title` field to `"Hello World"`.

```mdx index.mdx {2}
---
title: "Hello World"
description: "This is the introduction to the documentation"
---
```

### Preview the changes

To preview the changes locally, run the following command:

```bash
mint dev
```

Your preview will be available at `localhost:3000`.

<Frame>
  <img src="https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/quickstart/mintlify-dev-light.png?maxW=3024&auto=format&n=mvenohBb7F5T71_N&q=85&s=e18b6c0cbba2ad2c91c2f1d5bbdc76a4" alt="Mintlify Dev" className="block dark:hidden" width="3024" height="1518" data-path="images/quickstart/mintlify-dev-light.png" srcset="https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/quickstart/mintlify-dev-light.png?w=280&maxW=3024&auto=format&n=mvenohBb7F5T71_N&q=85&s=56768f4a9e4a92ab2ee8ad96b7ed4924 280w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/quickstart/mintlify-dev-light.png?w=560&maxW=3024&auto=format&n=mvenohBb7F5T71_N&q=85&s=dc8d9d6cdc35935047af9e92dc01284b 560w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/quickstart/mintlify-dev-light.png?w=840&maxW=3024&auto=format&n=mvenohBb7F5T71_N&q=85&s=ac036b0378aedfc5c6487d108a3a9b3d 840w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/quickstart/mintlify-dev-light.png?w=1100&maxW=3024&auto=format&n=mvenohBb7F5T71_N&q=85&s=71b8adcab6f08197265047fd0a0deddb 1100w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/quickstart/mintlify-dev-light.png?w=1650&maxW=3024&auto=format&n=mvenohBb7F5T71_N&q=85&s=7cdb2f29b81cdb7dcce7427b0f71ccb3 1650w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/quickstart/mintlify-dev-light.png?w=2500&maxW=3024&auto=format&n=mvenohBb7F5T71_N&q=85&s=d08c54fe984c9d07850227d2f40a78ab 2500w" data-optimize="true" data-opv="2" />

  <img src="https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/quickstart/mintlify-dev-dark.png?maxW=3018&auto=format&n=mvenohBb7F5T71_N&q=85&s=20ef8fb06588c7e422cb60c279f5ceb0" alt="Mintlify Dev" className="hidden dark:block" width="3018" height="1518" data-path="images/quickstart/mintlify-dev-dark.png" srcset="https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/quickstart/mintlify-dev-dark.png?w=280&maxW=3018&auto=format&n=mvenohBb7F5T71_N&q=85&s=7e90cbcda7c917a838d08a1514eef9ec 280w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/quickstart/mintlify-dev-dark.png?w=560&maxW=3018&auto=format&n=mvenohBb7F5T71_N&q=85&s=31000949b5dd053c7180b519d7b1f7f3 560w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/quickstart/mintlify-dev-dark.png?w=840&maxW=3018&auto=format&n=mvenohBb7F5T71_N&q=85&s=3810f85207b69ab7b4750bd7ed95e7cd 840w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/quickstart/mintlify-dev-dark.png?w=1100&maxW=3018&auto=format&n=mvenohBb7F5T71_N&q=85&s=16ad75e9b5b5c8ca419e0ac6846d113c 1100w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/quickstart/mintlify-dev-dark.png?w=1650&maxW=3018&auto=format&n=mvenohBb7F5T71_N&q=85&s=85fc601e8850b31f19c37178b14a6766 1650w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/quickstart/mintlify-dev-dark.png?w=2500&maxW=3018&auto=format&n=mvenohBb7F5T71_N&q=85&s=a40a439ebdf61b8c5b94138f3c95fc2f 2500w" data-optimize="true" data-opv="2" />
</Frame>

### Push the changes

When you are ready to publish your changes, push them to your repository.

Mintlify automatically detects the changes, builds your documentation, and deploys the updates to your site. Monitor the deployment status in your GitHub repository commit history or the [dashboard](https://dashboard.mintlify.com).

After the deployment completes, your latest update will be available at `<your-project-name>.mintlify.app`.

<Card title="Jump to adding a custom domain" icon="arrow-down" href="#adding-a-custom-domain" horizontal>
  Optionally, skip the web editor workflow and jump to adding a custom domain.
</Card>

## Web editor workflow

The web editor workflow provides a what-you-see-is-what-you-get (WYSIWYG) interface for creating and editing documentation. This workflow is best for people who want to work in their web browser without additional local development tools.

### Access the web editor

1. Log in to your [dashboard](https://dashboard.mintlify.com).
2. Select **Editor** on the left sidebar.

<Info>
  If you have not installed the GitHub App, you will be prompted to install the app when you open the web editor.
</Info>

<Frame>
  <img alt="The Mintlify web editor in the visual editor mode" src="https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/quickstart/web-editor-light.png?maxW=3024&auto=format&n=mvenohBb7F5T71_N&q=85&s=82e1678584b1a1a5b47255df6d2ef435" className="block dark:hidden" width="3024" height="1404" data-path="images/quickstart/web-editor-light.png" srcset="https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/quickstart/web-editor-light.png?w=280&maxW=3024&auto=format&n=mvenohBb7F5T71_N&q=85&s=91124f05afe6515fc8773f9d07307ae4 280w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/quickstart/web-editor-light.png?w=560&maxW=3024&auto=format&n=mvenohBb7F5T71_N&q=85&s=693d1bf45ff8ac69df41a7b547680d0e 560w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/quickstart/web-editor-light.png?w=840&maxW=3024&auto=format&n=mvenohBb7F5T71_N&q=85&s=44de6d1cd20af929bccc493e81bf84f8 840w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/quickstart/web-editor-light.png?w=1100&maxW=3024&auto=format&n=mvenohBb7F5T71_N&q=85&s=8df47fa5b34fed8ed94b2fd870251ed8 1100w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/quickstart/web-editor-light.png?w=1650&maxW=3024&auto=format&n=mvenohBb7F5T71_N&q=85&s=a77cf6485e43e1d8564f7da8f6907465 1650w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/quickstart/web-editor-light.png?w=2500&maxW=3024&auto=format&n=mvenohBb7F5T71_N&q=85&s=371923d411fa2da767b648858f1d8ff4 2500w" data-optimize="true" data-opv="2" />

  <img alt="The Mintlify web editor in the visual editor mode" src="https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/quickstart/web-editor-dark.png?maxW=3011&auto=format&n=mvenohBb7F5T71_N&q=85&s=b38c42c2470b44be0701ff80e0e91eeb" className="hidden dark:block" width="3011" height="1402" data-path="images/quickstart/web-editor-dark.png" srcset="https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/quickstart/web-editor-dark.png?w=280&maxW=3011&auto=format&n=mvenohBb7F5T71_N&q=85&s=48c80ed6847712a0d408eb9c41e77512 280w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/quickstart/web-editor-dark.png?w=560&maxW=3011&auto=format&n=mvenohBb7F5T71_N&q=85&s=fcf5b9b1e0e874fdfafb4ed3015d8cea 560w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/quickstart/web-editor-dark.png?w=840&maxW=3011&auto=format&n=mvenohBb7F5T71_N&q=85&s=261aba54d822896cb164d1fb7e8bb07c 840w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/quickstart/web-editor-dark.png?w=1100&maxW=3011&auto=format&n=mvenohBb7F5T71_N&q=85&s=6ea1c277f7cba3910da145ce5fdb82e8 1100w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/quickstart/web-editor-dark.png?w=1650&maxW=3011&auto=format&n=mvenohBb7F5T71_N&q=85&s=fd64711448fd5c7116952bbeb50ecc43 1650w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/quickstart/web-editor-dark.png?w=2500&maxW=3011&auto=format&n=mvenohBb7F5T71_N&q=85&s=a5bf3f6005d17e9a01302a3d386d21b6 2500w" data-optimize="true" data-opv="2" />
</Frame>

### Edit the documentation

In the web editor, you can navigate through your documentation files in the sidebar. Let's update the introduction page:

Find and select `index.mdx` in the file explorer.

Then, in the editor, update the title field to "Hello World".

<Frame>
  <img alt="Editing in Web Editor" src="https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/quickstart/web-editor-editing-light.png?maxW=3022&auto=format&n=mvenohBb7F5T71_N&q=85&s=fa4c9fed7adbbfe0daab47b38b67c50c" className="block dark:hidden" width="3022" height="1130" data-path="images/quickstart/web-editor-editing-light.png" srcset="https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/quickstart/web-editor-editing-light.png?w=280&maxW=3022&auto=format&n=mvenohBb7F5T71_N&q=85&s=ca6dbb1992931003f9e80c275ca3f748 280w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/quickstart/web-editor-editing-light.png?w=560&maxW=3022&auto=format&n=mvenohBb7F5T71_N&q=85&s=a09078d7971e044a45b4f9182b025ef5 560w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/quickstart/web-editor-editing-light.png?w=840&maxW=3022&auto=format&n=mvenohBb7F5T71_N&q=85&s=6d1fa74022f7c6027b1c9b6197b58e69 840w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/quickstart/web-editor-editing-light.png?w=1100&maxW=3022&auto=format&n=mvenohBb7F5T71_N&q=85&s=519b5945581881f8e562ccb1c38d4394 1100w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/quickstart/web-editor-editing-light.png?w=1650&maxW=3022&auto=format&n=mvenohBb7F5T71_N&q=85&s=e4fa50dfe8939ad85c8fa5a8ec39149e 1650w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/quickstart/web-editor-editing-light.png?w=2500&maxW=3022&auto=format&n=mvenohBb7F5T71_N&q=85&s=ca63567711bd67345f25127d8f8c63b5 2500w" data-optimize="true" data-opv="2" />

  <img alt="Editing in Web Editor" src="https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/quickstart/web-editor-editing-dark.png?maxW=3018&auto=format&n=mvenohBb7F5T71_N&q=85&s=2826e292a6efa69bb7c0ddbb366c70e1" className="hidden dark:block" width="3018" height="1127" data-path="images/quickstart/web-editor-editing-dark.png" srcset="https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/quickstart/web-editor-editing-dark.png?w=280&maxW=3018&auto=format&n=mvenohBb7F5T71_N&q=85&s=c09235d6b108dc0c5f58e1ae583dd1b3 280w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/quickstart/web-editor-editing-dark.png?w=560&maxW=3018&auto=format&n=mvenohBb7F5T71_N&q=85&s=ea250577c632dc840e4221277acd6d83 560w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/quickstart/web-editor-editing-dark.png?w=840&maxW=3018&auto=format&n=mvenohBb7F5T71_N&q=85&s=8d46a8058247de18c313a102ee3cdf5e 840w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/quickstart/web-editor-editing-dark.png?w=1100&maxW=3018&auto=format&n=mvenohBb7F5T71_N&q=85&s=10f4e8fb82b63ae9afc214fbe14039d0 1100w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/quickstart/web-editor-editing-dark.png?w=1650&maxW=3018&auto=format&n=mvenohBb7F5T71_N&q=85&s=61bd4cf37c2af65c6870ead0eeed6299 1650w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/quickstart/web-editor-editing-dark.png?w=2500&maxW=3018&auto=format&n=mvenohBb7F5T71_N&q=85&s=2415f132a6282fab44dc8846b704bb3f 2500w" data-optimize="true" data-opv="2" />
</Frame>

<Tip>
  The editor provides a rich set of formatting tools and components. Type <kbd>/</kbd> in the editor to open the command menu and access these tools.
</Tip>

### Publish your changes

When you're satisfied with your edits, select the **Publish** button in the top-right corner. Your changes are immediately deployed to your documentation site.

<Tip>
  Use branches to preview and review changes through pull requests before deploying to your live site.
</Tip>

For more details about using the web editor, including using branches and pull requests to collaborate and preview changes, see our [web editor documentation](/editor).

## Adding a custom domain

While your `<your-project-name>.mintlify.app` subdomain works well for testing and development, most teams prefer using a custom domain for production documentation.

To add a custom domain, navigate to the [Domain Setup](https://dashboard.mintlify.com/settings/deployment/custom-domain) page in your dashboard.

<Frame>
  <img src="https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/quickstart/custom-domain-light.png?maxW=3024&auto=format&n=mvenohBb7F5T71_N&q=85&s=b9b569a5130473a627ba973f78214ae9" alt="Custom Domain" className="block dark:hidden" width="3024" height="1142" data-path="images/quickstart/custom-domain-light.png" srcset="https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/quickstart/custom-domain-light.png?w=280&maxW=3024&auto=format&n=mvenohBb7F5T71_N&q=85&s=649d29cce4ea4e08f45afc53083bfd9f 280w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/quickstart/custom-domain-light.png?w=560&maxW=3024&auto=format&n=mvenohBb7F5T71_N&q=85&s=0ddd065a1bf0528856706081d19163dc 560w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/quickstart/custom-domain-light.png?w=840&maxW=3024&auto=format&n=mvenohBb7F5T71_N&q=85&s=6f963320110bfb3c5dee64dc5b984d30 840w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/quickstart/custom-domain-light.png?w=1100&maxW=3024&auto=format&n=mvenohBb7F5T71_N&q=85&s=68d077e7336909879ea62d5d24a6e2c2 1100w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/quickstart/custom-domain-light.png?w=1650&maxW=3024&auto=format&n=mvenohBb7F5T71_N&q=85&s=9d4977ea74cb165035db0c96f84ad178 1650w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/quickstart/custom-domain-light.png?w=2500&maxW=3024&auto=format&n=mvenohBb7F5T71_N&q=85&s=4397eb75d277438560919ba712be9819 2500w" data-optimize="true" data-opv="2" />

  <img src="https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/quickstart/custom-domain-dark.png?maxW=3018&auto=format&n=mvenohBb7F5T71_N&q=85&s=d462fc8ccc2224dac047dc182460299a" alt="Custom Domain" className="hidden dark:block" width="3018" height="1140" data-path="images/quickstart/custom-domain-dark.png" srcset="https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/quickstart/custom-domain-dark.png?w=280&maxW=3018&auto=format&n=mvenohBb7F5T71_N&q=85&s=139bd2d2e31d36b30f18b113c19e938a 280w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/quickstart/custom-domain-dark.png?w=560&maxW=3018&auto=format&n=mvenohBb7F5T71_N&q=85&s=c60329e51afdbf1beac18199706e89e8 560w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/quickstart/custom-domain-dark.png?w=840&maxW=3018&auto=format&n=mvenohBb7F5T71_N&q=85&s=102619a56d3ecc06e086a5e7bbfadefc 840w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/quickstart/custom-domain-dark.png?w=1100&maxW=3018&auto=format&n=mvenohBb7F5T71_N&q=85&s=d2ec259c01569170c3d0c53f99f8eab2 1100w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/quickstart/custom-domain-dark.png?w=1650&maxW=3018&auto=format&n=mvenohBb7F5T71_N&q=85&s=2be5e8bedbc05e2ce9d34b8bd4e8a420 1650w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/quickstart/custom-domain-dark.png?w=2500&maxW=3018&auto=format&n=mvenohBb7F5T71_N&q=85&s=62fac35c9fde58c3e2de3575e78b3152 2500w" data-optimize="true" data-opv="2" />
</Frame>

Enter your domain (for example, `docs.yourcompany.com`) and follow the provided instructions to configure DNS settings with your domain provider.

<Table>
  | Record Type | Name                | Value              | TTL  |
  | ----------- | ------------------- | ------------------ | ---- |
  | CNAME       | docs (or subdomain) | cname.mintlify.app | 3600 |
</Table>

<Info>
  DNS changes can take up to 48 hours to propagate, though changes often complete much sooner.
</Info>

## Next steps

Congratulations! You have successfully deployed your documentation site with Mintlify. Here are suggested next steps to enhance your documentation:

<Card title="Configure your global settings" icon="settings" href="settings" horizontal>
  Configure site-wide styling, navigation, integrations, and more with the `docs.json` file.
</Card>

<Card title="Customize your theme" icon="paintbrush" href="themes" horizontal>
  Learn how to customize colors, fonts, and the overall appearance of your documentation site.
</Card>

<Card title="Organize navigation" icon="map" href="navigation" horizontal>
  Structure your documentation with intuitive navigation to help users find what they need.
</Card>

<Card title="Add interactive components" icon="puzzle" href="/components/accordions" horizontal>
  Enhance your documentation with interactive components like accordions, tabs, and code samples.
</Card>

<Card title="Set up API references" icon="code" href="/api-playground/overview" horizontal>
  Create interactive API references with OpenAPI and AsyncAPI specifications.
</Card>

## Troubleshooting

If you encounter issues during the setup process, check these common troubleshooting solutions:

<AccordionGroup>
  <Accordion title="Local preview not working">
    Make sure you have Node.js v19+ installed and that you run the `mint dev` command from the directory containing your `docs.json` file.
  </Accordion>

  <Accordion title="Changes not reflecting on live site">
    Deployment can take upwards to a few minutes. Check your GitHub Actions (for code-based workflow) or deployment logs in the Mintlify dashboard to ensure there are no build errors.
  </Accordion>

  <Accordion title="Custom domain not connecting">
    Verify that your DNS records are set up correctly and allow sufficient time for DNS propagation (up to 48 hours). You can use tools like [DNSChecker](https://dnschecker.org) to verify your CNAME record.
  </Accordion>
</AccordionGroup>


# React
Source: https://mintlify.com/docs/react-components

Build interactive and reusable elements with React components

export const ColorGenerator = () => {
  const [hue, setHue] = useState(165);
  const [saturation, setSaturation] = useState(84);
  const [lightness, setLightness] = useState(31);
  const [colors, setColors] = useState([]);
  useEffect(() => {
    const newColors = [];
    for (let i = 0; i < 5; i++) {
      const l = Math.max(10, Math.min(90, lightness - 20 + i * 10));
      newColors.push(`hsl(${hue}, ${saturation}%, ${l}%)`);
    }
    setColors(newColors);
  }, [hue, saturation, lightness]);
  const copyToClipboard = color => {
    navigator.clipboard.writeText(color).then(() => {
      console.log(`Copied ${color} to clipboard!`);
    }).catch(err => {
      console.error("Failed to copy: ", err);
    });
  };
  return <div className="p-4 border dark:border-white/10 rounded-2xl not-prose">
      <div className="space-y-4">
        <div className="space-y-2">
          <label className="block text-sm text-zinc-950/70 dark:text-white/70">
            Hue: {hue}°
            <input type="range" min="0" max="360" value={hue} onChange={e => setHue(Number.parseInt(e.target.value))} className="w-full h-2 bg-zinc-950/20 rounded-lg appearance-none cursor-pointer dark:bg-white/20 mt-1" style={{
    background: `linear-gradient(to right, 
                  hsl(0, ${saturation}%, ${lightness}%), 
                  hsl(60, ${saturation}%, ${lightness}%), 
                  hsl(120, ${saturation}%, ${lightness}%), 
                  hsl(180, ${saturation}%, ${lightness}%), 
                  hsl(240, ${saturation}%, ${lightness}%), 
                  hsl(300, ${saturation}%, ${lightness}%), 
                  hsl(360, ${saturation}%, ${lightness}%))`
  }} />
          </label>

          <label className="block text-sm text-zinc-950/70 dark:text-white/70">
            Saturation: {saturation}%
            <input type="range" min="0" max="100" value={saturation} onChange={e => setSaturation(Number.parseInt(e.target.value))} className="w-full h-2 bg-zinc-950/20 rounded-lg appearance-none cursor-pointer dark:bg-white/20 mt-1" style={{
    background: `linear-gradient(to right, 
                  hsl(${hue}, 0%, ${lightness}%), 
                  hsl(${hue}, 50%, ${lightness}%), 
                  hsl(${hue}, 100%, ${lightness}%))`
  }} />
          </label>

          <label className="block text-sm text-zinc-950/70 dark:text-white/70">
            Lightness: {lightness}%
            <input type="range" min="0" max="100" value={lightness} onChange={e => setLightness(Number.parseInt(e.target.value))} className="w-full h-2 bg-zinc-950/20 rounded-lg appearance-none cursor-pointer dark:bg-white/20 mt-1" style={{
    background: `linear-gradient(to right, 
                  hsl(${hue}, ${saturation}%, 0%), 
                  hsl(${hue}, ${saturation}%, 50%), 
                  hsl(${hue}, ${saturation}%, 100%))`
  }} />
          </label>
        </div>

        <div className="flex space-x-2">
          {colors.map((color, idx) => <div key={idx} className="h-16 rounded flex-1 cursor-pointer transition-transform hover:scale-105" style={{
    backgroundColor: color
  }} title={`Click to copy: ${color}`} onClick={() => copyToClipboard(color)} />)}
        </div>

        <div className="text-sm font-mono text-zinc-950/70 dark:text-white/70">
          <p>
            Base color: hsl({hue}, {saturation}%, {lightness}%)
          </p>
        </div>
      </div>
    </div>;
};

[React components](https://react.dev) are a powerful way to create interactive and reusable elements in your documentation.

## Using React components

You can build React components directly in your `MDX` files using [React hooks](https://react.dev/reference/react/hooks).

### Example

This example declares a `Counter` component and then uses it with `<Counter />`.

```mdx
export const Counter = () => {
  const [count, setCount] = useState(0)

  const increment = () => setCount(count + 1)
  const decrement = () => setCount(count - 1)

  return (
  <div className="flex items-center justify-center">
      <div className="flex items-center rounded-xl overflow-hidden border border-zinc-950/20 dark:border-white/20">
        <button
          onClick={decrement}
          className="flex items-center justify-center h-8 w-8 text-zinc-950/80 dark:text-white/80 border-r border-zinc-950/20 dark:border-white/20"
          aria-label="Decrease"
        >
          -
        </button>

        <div className="flex text-sm items-center justify-center h-8 px-6 text-zinc-950/80 dark:text-white/80 font-medium min-w-[4rem] text-center">
          {count}
        </div>

        <button
          onClick={increment}
          className="flex items-center justify-center h-8 w-8 text-zinc-950/80 dark:text-white/80 border-l border-zinc-950/20 dark:border-white/20"
          aria-label="Increase"
        >
          +
        </button>
      </div>
    </div>
  )
}

<Counter />
```

export const Counter = () => {
  const [count, setCount] = useState(0);
  const increment = () => setCount(count + 1);
  const decrement = () => setCount(count - 1);
  return <div className="flex items-center justify-center">
      <div className="flex items-center rounded-xl overflow-hidden border border-zinc-950/20 dark:border-white/20">
        <button onClick={decrement} className="flex items-center justify-center h-8 w-8 text-zinc-950/80 dark:text-white/80 border-r border-zinc-950/20 dark:border-white/20" aria-label="Decrease">
          -
        </button>

        <div className="flex text-sm items-center justify-center h-8 px-6 text-zinc-950/80 dark:text-white/80 font-medium min-w-[4rem] text-center">
          {count}
        </div>

        <button onClick={increment} className="flex items-center justify-center h-8 w-8 text-zinc-950/80 dark:text-white/80 border-l border-zinc-950/20 dark:border-white/20" aria-label="Increase">
          +
        </button>
      </div>
    </div>;
};


The counter renders as an interactive React component.

<Counter />

## Importing components

You can import components from your `snippets` folder. Unlike regular React, you cannot import components from every `MDX` file. Reusable components must be referenced from files within the `snippets` folder. Learn more about [reusable snippets](/reusable-snippets).

### Example

This example declares a `ColorGenerator` component that uses multiple React hooks and then uses it in an `MDX` file.

Create `color-generator.jsx` file in the `snippets` folder:

```mdx /snippets/color-generator.jsx [expandable]
export const ColorGenerator = () => {
  const [hue, setHue] = useState(180)
  const [saturation, setSaturation] = useState(50)
  const [lightness, setLightness] = useState(50)
  const [colors, setColors] = useState([])

  useEffect(() => {
    const newColors = []
    for (let i = 0; i < 5; i++) {
      const l = Math.max(10, Math.min(90, lightness - 20 + i * 10))
      newColors.push(`hsl(${hue}, ${saturation}%, ${l}%)`)
    }
    setColors(newColors)
  }, [hue, saturation, lightness])

  const copyToClipboard = (color) => {
    navigator.clipboard
      .writeText(color)
      .then(() => {
        console.log(`Copied ${color} to clipboard!`)
      })
      .catch((err) => {
        console.error("Failed to copy: ", err)
      })
  }

  return (
    <div className="p-4 border dark:border-zinc-950/80 rounded-xl not-prose">
      <div className="space-y-4">
        <div className="space-y-2">
          <label className="block text-sm text-zinc-950/70 dark:text-white/70">
            Hue: {hue}°
            <input
              type="range"
              min="0"
              max="360"
              value={hue}
              onChange={(e) => setHue(Number.parseInt(e.target.value))}
              className="w-full h-2 bg-zinc-950/20 rounded-lg appearance-none cursor-pointer dark:bg-white/20 mt-1"
              style={{
                background: `linear-gradient(to right, 
                  hsl(0, ${saturation}%, ${lightness}%), 
                  hsl(60, ${saturation}%, ${lightness}%), 
                  hsl(120, ${saturation}%, ${lightness}%), 
                  hsl(180, ${saturation}%, ${lightness}%), 
                  hsl(240, ${saturation}%, ${lightness}%), 
                  hsl(300, ${saturation}%, ${lightness}%), 
                  hsl(360, ${saturation}%, ${lightness}%))`,
              }}
            />
          </label>

          <label className="block text-sm text-zinc-950/70 dark:text-white/70">
            Saturation: {saturation}%
            <input
              type="range"
              min="0"
              max="100"
              value={saturation}
              onChange={(e) => setSaturation(Number.parseInt(e.target.value))}
              className="w-full h-2 bg-zinc-950/20 rounded-lg appearance-none cursor-pointer dark:bg-white/20 mt-1"
              style={{
                background: `linear-gradient(to right, 
                  hsl(${hue}, 0%, ${lightness}%), 
                  hsl(${hue}, 50%, ${lightness}%), 
                  hsl(${hue}, 100%, ${lightness}%))`,
              }}
            />
          </label>

          <label className="block text-sm text-zinc-950/70 dark:text-white/70">
            Lightness: {lightness}%
            <input
              type="range"
              min="0"
              max="100"
              value={lightness}
              onChange={(e) => setLightness(Number.parseInt(e.target.value))}
              className="w-full h-2 bg-zinc-950/20 rounded-lg appearance-none cursor-pointer dark:bg-white/20 mt-1"
              style={{
                background: `linear-gradient(to right, 
                  hsl(${hue}, ${saturation}%, 0%), 
                  hsl(${hue}, ${saturation}%, 50%), 
                  hsl(${hue}, ${saturation}%, 100%))`,
              }}
            />
          </label>
        </div>

        <div className="flex space-x-1">
          {colors.map((color, idx) => (
            <div
              key={idx}
              className="h-16 rounded flex-1 cursor-pointer transition-transform hover:scale-105"
              style={{ backgroundColor: color }}
              title={`Click to copy: ${color}`}
              onClick={() => copyToClipboard(color)}
            />
          ))}
        </div>

        <div className="text-sm font-mono text-zinc-950/70 dark:text-white/70">
          <p>
            Base color: hsl({hue}, {saturation}%, {lightness}%)
          </p>
        </div>
      </div>
    </div>
  )
}
```

Import the `ColorGenerator` component and use it in an `MDX` file:

```mdx
import { ColorGenerator } from "/snippets/color-generator.jsx"

<ColorGenerator />
```

The color generator renders as an interactive React component.

<ColorGenerator />

## Considerations

<AccordionGroup>
  <Accordion title="Client-side rendering impact">
    React hook components render on the client-side, which has several implications:

    * **SEO**: Search engines might not fully index dynamic content.
    * **Initial load**: Visitors may experience a flash of loading content before components render.
    * **Accessibility**: Ensure dynamic content changes are announced to screen readers.
  </Accordion>

  <Accordion title="Performance best practices">
    * **Optimize dependency arrays**: Include only necessary dependencies in your `useEffect` dependency arrays.
    * **Memoize complex calculations**: Use `useMemo` or `useCallback` for expensive operations.
    * **Reduce re-renders**: Break large components into smaller ones to prevent cascading re-renders.
    * **Lazy loading**: Consider lazy loading complex components to improve initial page load time.
  </Accordion>
</AccordionGroup>


# Reusable snippets
Source: https://mintlify.com/docs/reusable-snippets

Reusable, custom snippets to keep content in sync

One of the core principles of software development is DRY (Don't Repeat
Yourself), which applies to documentation as
well. If you find yourself repeating the same content in multiple places, you
should create a custom snippet to keep your content in sync.

## Creating a custom snippet

**Pre-condition**: You must create your snippet file in the `snippets` directory in order for the import to work.

Any page in the `snippets` directory will be treated as a snippet and will not
be rendered into a standalone page. If you want to create a standalone page
from the snippet, import the snippet into another file and call it as a
component.

### Default export

1. Add content to your snippet file that you want to re-use. Optionally, you can add variables that can be filled in via props
   when you import the snippet. In this example, our variable is word.

```typescript snippets/my-snippet.mdx
Hello world! This is my content I want to reuse across pages. 
```

2. Import the snippet into your destination file.

```typescript destination-file.mdx
---
title: My title
description: My Description
---

import MySnippet from '/snippets/path/to/my-snippet.mdx';

## Header

Lorem impsum dolor sit amet.

<MySnippet/>

```

### Exporting with variables

1. Optionally, you can add variables that can be filled in via props when you import the snippet. In this example, our variable is word.

```typescript snippets/my-snippet.mdx
My keyword of the day is {word}.
```

2. Import the snippet into your destination file with the variable. The property will fill in based on your specification.

```typescript destination-file.mdx
---
title: My title
description: My Description
---

import MySnippet from '/snippets/path/to/my-snippet.mdx';

## Header

Lorem impsum dolor sit amet.

<MySnippet word="bananas" />

```

### Reusable variables

1. Export a variable from your snippet file:

```typescript snippets/path/to/custom-variables.mdx
export const myName = 'my name';

export const myObject = { fruit: 'strawberries' };
```

2. Import the snippet from your destination file and use the variable:

```typescript destination-file.mdx
---
title: My title
description: My Description
---

import { myName, myObject } from '/snippets/path/to/custom-variables.mdx';

Hello, my name is {myName} and I like {myObject.fruit}.
```

### JSX snippets

1. Export a JSX component from your snippet file. (See [React components](/react-components) for more information):

```js icon=square-js snippets/my-jsx-snippet.jsx
export const MyJSXSnippet = () => {
  return (
    <div>
      <h1>Hello, world!</h1>
    </div>
  )
}
```

<Note>
  Important: When creating JSX snippets, use arrow function syntax (`=>`) rather than function declarations. The `function` keyword is not supported in this context.
</Note>

2. Import the snippet from your destination file and use the component:

```typescript destination-file.mdx
---
title: My title
description: My Description
---

import { MyJSXSnippet } from '/snippets/my-jsx-snippet.jsx';

<MyJSXSnippet />
```


# Global settings
Source: https://mintlify.com/docs/settings

Configure site-wide settings with the `docs.json` file

The `docs.json` file lets you turn a collection of Markdown files into a navigable, customized documentation site. This required configuration file controls styling, navigation, integrations, and more. Think of it as the blueprint for your documentation.

Settings in `docs.json` apply globally to all pages.

## Setting up your `docs.json`

To get started, you only need to specify `theme`, `name`, `colors.primary`, and `navigation`. Other fields are optional and you can add them as your documentation needs grow.

For the best editing experience, include the schema reference at the top of your `docs.json` file. This enables autocomplete, validation, and helpful tooltips in most code editors:

```json
{
  "$schema": "https://mintlify.com/docs.json",
  "theme": "mint",
  "name": "Your Docs",
  "colors": {
    "primary": "#ff0000"
  },
  "navigation": {
    // Your navigation structure
  }
  // The rest of your configuration
}
```

## Reference

This section contains the full reference for the `docs.json` file.

### Customization

<ResponseField name="theme" required>
  The layout theme of your site.

  One of the following: `mint`, `maple`, `palm`, `willow`, `linden`, `almond`, `aspen`.

  See [Themes](themes) for more information.
</ResponseField>

<ResponseField name="name" type="string" required>
  The name of your project, organization, or product.
</ResponseField>

<ResponseField name="colors" type="object" required>
  The colors used in your documentation. Colors are applied differently across themes. If you only provide a primary color, it will be used for all color elements.

  <Expandable title="Colors">
    <ResponseField name="primary" type="string matching ^#([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$" required>
      The primary color for your documentation. Generally used for emphasis in light mode, with some variation by theme.

      Must be a hex code beginning with `#`.
    </ResponseField>

    <ResponseField name="light" type="string matching ^#([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$">
      The color used for emphasis in dark mode.

      Must be a hex code beginning with `#`.
    </ResponseField>

    <ResponseField name="dark" type="string matching ^#([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$">
      The color used for buttons and hover states across both light and dark modes, with some variation by theme.

      Must be a hex code beginning with `#`.
    </ResponseField>
  </Expandable>
</ResponseField>

<ResponseField name="description" type="string">
  Description of your site for SEO and AI indexing.
</ResponseField>

<ResponseField name="logo" type="string or object">
  Your logo for both light and dark mode.

  <Expandable title="Logo">
    <ResponseField name="light" type="string" required>
      Path pointing to your logo file for light mode. Include the file extension. Example: `/logo.png`
    </ResponseField>

    <ResponseField name="dark" type="string" required>
      Path pointing to your logo file for dark mode. Include the file extension. Example: `/logo-dark.png`
    </ResponseField>

    <ResponseField name="href" type="string (uri)">
      The URL to redirect to when clicking the logo. If not provided, the logo will link to your homepage. Example: `https://mintlify.com`
    </ResponseField>
  </Expandable>
</ResponseField>

<ResponseField name="favicon" type="string or object">
  Path to your favicon file, including the file extension. Automatically resized to appropriate favicon sizes.
  Can be a single file or separate files for light and dark mode. Example: `/favicon.png`

  <Expandable title="Favicon">
    <ResponseField name="light" type="string" required>
      Path to your favicon file for light mode. Include the file extension. Example: `/favicon.png`
    </ResponseField>

    <ResponseField name="dark" type="string" required>
      Path to your favicon file for dark mode. Include the file extension. Example: `/favicon-dark.png`
    </ResponseField>
  </Expandable>
</ResponseField>

<ResponseField name="thumbnails" type="object">
  Thumbnail customization for social media and page previews.

  <Expandable title="Thumbnails">
    <ResponseField name="appearance" type="&#x22;light&#x22; | &#x22;dark&#x22;">
      The visual theme of your thumbnails. If not specified, thumbnails use your site's color scheme defined by the `colors` field.
    </ResponseField>

    <ResponseField name="background" type="string">
      Background image for your thumbnails. Can be a relative path or absolute URL.
    </ResponseField>
  </Expandable>
</ResponseField>

<ResponseField name="styling" type="object">
  Visual styling configurations.

  <Expandable title="Styling">
    <ResponseField name="eyebrows" type="&#x22;section&#x22; | &#x22;breadcrumbs&#x22;">
      The style of the page eyebrow. Choose `section` to show the section name or `breadcrumbs` to show the full navigation path. Defaults to `section`.
    </ResponseField>

    <ResponseField name="codeblocks" type="&#x22;system&#x22; | &#x22;dark&#x22;">
      The theme of the code blocks. Choose `system` to match the site theme or `dark` for always dark code blocks. Defaults to `system`.
    </ResponseField>
  </Expandable>
</ResponseField>

<ResponseField name="icons" type="object">
  Icon library settings.

  <Expandable title="Icons">
    <ResponseField name="library" type="&#x22;fontawesome&#x22; | &#x22;lucide&#x22;" required>
      Icon library to use throughout your documentation. Defaults to `fontawesome`.

      <Note>
        You can specify a URL to an externally hosted icon, path to an icon file in your project, or JSX-compatible SVG code for any individual icon, regardless of the library setting.
      </Note>
    </ResponseField>
  </Expandable>
</ResponseField>

<ResponseField name="fonts" type="object">
  Font configuration for your documentation. The default font is [Inter](https://fonts.google.com/specimen/Inter).

  <Expandable title="Fonts">
    <ResponseField name="family" type="string" required>
      Font family, such as "Open Sans", "Playfair Display."
    </ResponseField>

    <ResponseField name="weight" type="number">
      Font weight, such as 400 or 700. Variable fonts support precise weights  such as 550.
    </ResponseField>

    <ResponseField name="source" type="string (uri)">
      URL to your font source, such as [https://mintlify-assets.b-cdn.net/fonts/Hubot-Sans.woff2](https://mintlify-assets.b-cdn.net/fonts/Hubot-Sans.woff2). [Google Fonts](https://fonts.google.com) are loaded automatically when you specify a Google Font `family` name, so no source URL is needed.
    </ResponseField>

    <ResponseField name="format" type="&#x22;woff&#x22; | &#x22;woff2&#x22;">
      Font file format.
    </ResponseField>

    <ResponseField name="heading" type="object">
      Override font settings specifically for headings.

      <Expandable title="Heading">
        <ResponseField name="family" type="string" required>
          Font family, such as "Open Sans", "Playfair Display."
        </ResponseField>

        <ResponseField name="weight" type="number">
          Font weight, such as 400, 700. Variable fonts support precise weights such as 550.
        </ResponseField>

        <ResponseField name="source" type="string (uri)">
          URL to your font source, such as [https://mintlify-assets.b-cdn.net/fonts/Hubot-Sans.woff2](https://mintlify-assets.b-cdn.net/fonts/Hubot-Sans.woff2). [Google Fonts](https://fonts.google.com) are loaded automatically when you specify a Google Font `family` name, so no source URL is needed.
        </ResponseField>

        <ResponseField name="format" type="&#x22;woff&#x22; | &#x22;woff2&#x22;">
          Font file format.
        </ResponseField>
      </Expandable>
    </ResponseField>

    <ResponseField name="body" type="object">
      Override font settings specifically for body text.

      <Expandable title="Body">
        <ResponseField name="family" type="string" required>
          Font family, such as "Open Sans", "Playfair Display."
        </ResponseField>

        <ResponseField name="weight" type="number">
          Font weight, such as 400, 700. Variable fonts support precise weights such as 550.
        </ResponseField>

        <ResponseField name="source" type="string (uri)">
          URL to your font source, such as [https://mintlify-assets.b-cdn.net/fonts/Hubot-Sans.woff2](https://mintlify-assets.b-cdn.net/fonts/Hubot-Sans.woff2). [Google Fonts](https://fonts.google.com) are loaded automatically when you specify a Google Font `family` name, so no source URL is needed.
        </ResponseField>

        <ResponseField name="format" type="&#x22;woff&#x22; | &#x22;woff2&#x22;">
          Font file format.
        </ResponseField>
      </Expandable>
    </ResponseField>
  </Expandable>
</ResponseField>

<ResponseField name="appearance" type="object">
  Light/dark mode toggle settings.

  <Expandable title="Appearance">
    <ResponseField name="default" type="&#x22;system&#x22; | &#x22;light&#x22; | &#x22;dark&#x22;">
      Default theme mode. Choose `system` to match users' OS settings, or `light` or `dark` to force a specific mode. Defaults to `system`.
    </ResponseField>

    <ResponseField name="strict" type="boolean">
      Whether to hide the light/dark mode toggle. Defaults to `true`.
    </ResponseField>
  </Expandable>
</ResponseField>

<ResponseField name="background" type="object">
  Background color and decoration settings.

  <Expandable title="Background">
    <ResponseField name="image" type="string or object">
      Background image for your site. Can be a single file or separate files for light and dark mode.

      <Expandable title="Image">
        <ResponseField name="light" type="string" required>
          Path to your background image for light mode. Include the file extension. Example: `/background.png`.
        </ResponseField>

        <ResponseField name="dark" type="string" required>
          Path to your background image for dark mode. Include the file extension. Example: `/background-dark.png`.
        </ResponseField>
      </Expandable>
    </ResponseField>

    <ResponseField name="decoration" type="&#x22;gradient&#x22; | &#x22;grid&#x22; | &#x22;windows&#x22;">
      Background decoration for your theme.
    </ResponseField>

    <ResponseField name="color" type="object">
      Custom background colors for light and dark modes.

      <Expandable title="Color">
        <ResponseField name="light" type="string matching ^#([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$">
          Background color for light mode.

          Must be a hex code beginning with `#`.
        </ResponseField>

        <ResponseField name="dark" type="string matching ^#([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$">
          Background color for dark mode.

          Must be a hex code beginning with `#`.
        </ResponseField>
      </Expandable>
    </ResponseField>
  </Expandable>
</ResponseField>

### Structure

<ResponseField name="navbar" type="object">
  Navigation bar items.

  <Expandable title="Navbar">
    <ResponseField name="links" type="array of object">
      Links to display in the navbar

      <Expandable title="Links">
        <ResponseField name="label" type="string" required>
          Text for the link.
        </ResponseField>

        <ResponseField name="href" type="string (uri)" required>
          URL or path for the link destination.
        </ResponseField>

        <ResponseField name="icon" type="string">
          The icon to display.

          Options:

          * [Font Awesome icon](https://fontawesome.com/icons) name
          * [Lucide icon](https://lucide.dev/icons) name
          * JSX-compatible SVG code wrapped in curly braces
          * URL to an externally hosted icon
          * Path to an icon file in your project

          For custom SVG icons:

          1. Convert your SVG using the [SVGR converter](https://react-svgr.com/playground/).
          2. Paste your SVG code into the SVG input field.
          3. Copy the complete `<svg>...</svg>` element from the JSX output field.
          4. Wrap the JSX-compatible SVG code in curly braces: `icon={<svg ...> ... </svg>}`.
          5. Adjust `height` and `width` as needed.
        </ResponseField>

        <ResponseField name="iconType" type="string">
          The [Font Awesome](https://fontawesome.com/icons) icon style. Only used with Font Awesome icons.

          Options: `regular`, `solid`, `light`, `thin`, `sharp-solid`, `duotone`, `brands`.
        </ResponseField>
      </Expandable>
    </ResponseField>

    <ResponseField name="primary" type="object">
      Primary button in the navbar.

      <Expandable title="Primary">
        <ResponseField name="type" type="&#x22;button&#x22; | &#x22;github&#x22;" required>
          Button style. Choose `button` for a standard button with a label or `github` for a link to a GitHub repository with icon.
        </ResponseField>

        <ResponseField name="label" type="string" required>
          Button text. Only applies when `type` is `button`.
        </ResponseField>

        <ResponseField name="href" type="string (uri)" required>
          Button destination. Must be a valid path or external URL. If `type` is `github`, must be a GitHub repository URL.
        </ResponseField>
      </Expandable>
    </ResponseField>
  </Expandable>
</ResponseField>

<ResponseField name="navigation" type="object" required>
  The navigation structure of your content.

  <Expandable title="Navigation">
    <ResponseField name="global" type="object">
      Global navigation elements that appear accross all pages and sections.

      <Expandable title="Global">
        <ResponseField name="languages" type="array of object">
          Language switcher configuration for localized sites.

          <Expandable title="Languages">
            <ResponseField name="language" type="&#x22;en&#x22; | &#x22;cn&#x22; | &#x22;zh&#x22; | &#x22;zh-Hans&#x22; | &#x22;zh-Hant&#x22; | &#x22;es&#x22; | &#x22;fr&#x22; | &#x22;ja&#x22; | &#x22;jp&#x22; | &#x22;pt&#x22; | &#x22;pt-BR&#x22; | &#x22;de&#x22; | &#x22;ko&#x22; | &#x22;it&#x22; | &#x22;ru&#x22; | &#x22;id&#x22; | &#x22;ar&#x22; | &#x22;tr&#x22;" required>
              Language code in ISO 639-1 format
            </ResponseField>

            <ResponseField name="default" type="boolean">
              Whether this is the default language.
            </ResponseField>

            <ResponseField name="hidden" type="boolean">
              Whether to hide this language option by default.
            </ResponseField>

            <ResponseField name="href" type="string (uri)" required>
              A valid path or external link to this language version of your documentation.
            </ResponseField>
          </Expandable>
        </ResponseField>

        <ResponseField name="versions" type="array of object">
          Version switcher configuration for multi-version sites.

          <Expandable title="Versions">
            <ResponseField name="version" type="string" required>
              Display name of the version.

              Minimum length: 1
            </ResponseField>

            <ResponseField name="default" type="boolean">
              Whether this is the default version.
            </ResponseField>

            <ResponseField name="hidden" type="boolean">
              Whether to hide this version option by default.
            </ResponseField>

            <ResponseField name="href" type="string (uri)" required>
              URL or path to this version of your documentation.
            </ResponseField>
          </Expandable>
        </ResponseField>

        <ResponseField name="tabs" type="array of object">
          Top-level navigation tabs for organizing major sections.

          <Expandable title="Tabs">
            <ResponseField name="tab" type="string" required>
              Display name of the tab.

              Minimum length: 1
            </ResponseField>

            <ResponseField name="icon" type="string">
              The icon to display.

              Options:

              * [Font Awesome icon](https://fontawesome.com/icons) name
              * [Lucide icon](https://lucide.dev/icons) name
              * JSX-compatible SVG code wrapped in curly braces
              * URL to an externally hosted icon
              * Path to an icon file in your project

              For custom SVG icons:

              1. Convert your SVG using the [SVGR converter](https://react-svgr.com/playground/).
              2. Paste your SVG code into the SVG input field.
              3. Copy the complete `<svg>...</svg>` element from the JSX output field.
              4. Wrap the JSX-compatible SVG code in curly braces: `icon={<svg ...> ... </svg>}`.
              5. Adjust `height` and `width` as needed.
            </ResponseField>

            <ResponseField name="iconType" type="string">
              The [Font Awesome](https://fontawesome.com/icons) icon style. Only used with Font Awesome icons.

              Options: `regular`, `solid`, `light`, `thin`, `sharp-solid`, `duotone`, `brands`.
            </ResponseField>

            <ResponseField name="hidden" type="boolean">
              Whether to hide this tab by default.
            </ResponseField>

            <ResponseField name="href" type="string (uri)" required>
              URL or path for the tab destination.
            </ResponseField>
          </Expandable>
        </ResponseField>

        <ResponseField name="anchors" type="array of object">
          Anchored links that appear prominently in the sidebar navigation.

          <Expandable title="Anchors">
            <ResponseField name="anchor" type="string" required>
              Display name of the anchor.

              Minimum length: 1
            </ResponseField>

            <ResponseField name="icon" type="string">
              The icon to display.

              Options:

              * [Font Awesome icon](https://fontawesome.com/icons) name
              * [Lucide icon](https://lucide.dev/icons) name
              * JSX-compatible SVG code wrapped in curly braces
              * URL to an externally hosted icon
              * Path to an icon file in your project

              For custom SVG icons:

              1. Convert your SVG using the [SVGR converter](https://react-svgr.com/playground/).
              2. Paste your SVG code into the SVG input field.
              3. Copy the complete `<svg>...</svg>` element from the JSX output field.
              4. Wrap the JSX-compatible SVG code in curly braces: `icon={<svg ...> ... </svg>}`.
              5. Adjust `height` and `width` as needed.
            </ResponseField>

            <ResponseField name="iconType" type="string">
              The [Font Awesome](https://fontawesome.com/icons) icon style. Only used with Font Awesome icons.

              Options: `regular`, `solid`, `light`, `thin`, `sharp-solid`, `duotone`, `brands`.
            </ResponseField>

            <ResponseField name="color" type="object">
              Custom colors for the anchor.

              <Expandable title="Color">
                <ResponseField name="light" type="string matching ^#([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$">
                  Anchor color for light mode.

                  Must be a hex code beginning with `#`.
                </ResponseField>

                <ResponseField name="dark" type="string matching ^#([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$">
                  Anchor color for dark mode.

                  Must be a hex code beginning with `#`.
                </ResponseField>
              </Expandable>
            </ResponseField>

            <ResponseField name="hidden" type="boolean">
              Whether to hide this anchor by default.
            </ResponseField>

            <ResponseField name="href" type="string (uri)" required>
              URL or path for the anchor destination.
            </ResponseField>
          </Expandable>
        </ResponseField>

        <ResponseField name="dropdowns" type="array of object">
          Dropdown menus for organizing related content.

          <Expandable title="Dropdowns">
            <ResponseField name="dropdown" type="string" required>
              Display name of the dropdown.

              Minimum length: 1
            </ResponseField>

            <ResponseField name="icon" type="string">
              The icon to display.

              Options:

              * [Font Awesome icon](https://fontawesome.com/icons) name
              * [Lucide icon](https://lucide.dev/icons) name
              * JSX-compatible SVG code wrapped in curly braces
              * URL to an externally hosted icon
              * Path to an icon file in your project

              For custom SVG icons:

              1. Convert your SVG using the [SVGR converter](https://react-svgr.com/playground/).
              2. Paste your SVG code into the SVG input field.
              3. Copy the complete `<svg>...</svg>` element from the JSX output field.
              4. Wrap the JSX-compatible SVG code in curly braces: `icon={<svg ...> ... </svg>}`.
              5. Adjust `height` and `width` as needed.
            </ResponseField>

            <ResponseField name="iconType" type="string">
              The [Font Awesome](https://fontawesome.com/icons) icon style. Only used with Font Awesome icons.

              Options: `regular`, `solid`, `light`, `thin`, `sharp-solid`, `duotone`, `brands`.
            </ResponseField>

            <ResponseField name="hidden" type="boolean">
              Whether to hide this dropdown by default.
            </ResponseField>

            <ResponseField name="href" type="string (uri)" required>
              URL or path for the dropdown destination.
            </ResponseField>
          </Expandable>
        </ResponseField>
      </Expandable>
    </ResponseField>

    <ResponseField name="languages" type="array of object">
      Language switcher for [multi-language](navigation#languages) sites.
    </ResponseField>

    <ResponseField name="versions" type="array of object">
      Version switcher for sites with multiple [versions](navigation#versions).
    </ResponseField>

    <ResponseField name="tabs" type="array of object">
      Top-level navigation [tabs](navigation#tabs).
    </ResponseField>

    <ResponseField name="anchors" type="array of object">
      Sidebar [anchors](navigation#anchors).
    </ResponseField>

    <ResponseField name="dropdowns" type="array of object">
      [Dropdowns](navigation#dropdowns) for grouping related content.
    </ResponseField>

    <ResponseField name="groups" type="array of object">
      [Groups](navigation#groups) for organizing content into sections.
    </ResponseField>

    <ResponseField name="pages" type="array of string or object">
      Individual [pages](navigation#pages) that make up your documentation.
    </ResponseField>
  </Expandable>
</ResponseField>

<ResponseField name="footer" type="object">
  Footer content and social media links.

  <Expandable title="Footer">
    <ResponseField name="socials" type="object">
      Social media profiles to display in the footer. Each key is a platform name and each value is your profile URL. For example:

      ```json
      {
        "x": "https://x.com/mintlify"
      }
      ```

      Valid property names: `x`, `website`, `facebook`, `youtube`, `discord`, `slack`, `github`, `linkedin`, `instagram`, `hacker-news`, `medium`, `telegram`, `twitter`, `x-twitter`, `earth-americas`, `bluesky`, `threads`, `reddit`, `podcast`
    </ResponseField>

    <ResponseField name="links" type="array of object">
      Links to display in the footer.

      <Expandable title="Links">
        <ResponseField name="header" type="string">
          Header title for the column.

          Minimum length: 1
        </ResponseField>

        <ResponseField name="items" type="array of object" required>
          Links to display in the column.

          <Expandable title="Items">
            <ResponseField name="label" type="string" required>
              Link text.

              Minimum length: 1
            </ResponseField>

            <ResponseField name="href" type="string (uri)" required>
              Link destination URL.
            </ResponseField>
          </Expandable>
        </ResponseField>
      </Expandable>
    </ResponseField>
  </Expandable>
</ResponseField>

<ResponseField name="banner" type="object">
  Site-wide banner displayed at the top of pages.

  <Expandable title="Banner">
    <ResponseField name="content" type="string">
      The content of the banner. Supports plain text and Markdown formatting. For example:

      ```json
      {
        "content": "🚀 Banner is live! [Learn more](mintlify.com)"
      }
      ```
    </ResponseField>

    <ResponseField name="dismissible" type="boolean">
      Whether users can dismiss the banner. Defaults to `false`.
    </ResponseField>
  </Expandable>
</ResponseField>

<ResponseField name="redirects" type="array of object">
  Redirects for moved, renamed, or deleted pages.

  <Expandable title="Redirects">
    <ResponseField name="source" type="string" required>
      Source path to redirect from. Example: `/old-page`
    </ResponseField>

    <ResponseField name="destination" type="string" required>
      Destination path to redirect to. Example: `/new-page`
    </ResponseField>

    <ResponseField name="permanent" type="boolean">
      Whether to use a permanent redirect (301). Defaults to `true`.
    </ResponseField>
  </Expandable>
</ResponseField>

<ResponseField name="contextual" type="object">
  Contextual menu for AI-optimized content and integrations.

  <Expandable title="Contextual">
    <ResponseField name="options" type="array of &#x22;copy&#x22; | &#x22;view&#x22; | &#x22;chatgpt&#x22; | &#x22;claude&#x22;" required>
      Actions available in the contextual menu. The first option appears as the default.

      * `copy`: Copy the current page as Markdown to the clipboard.
      * `view`: View the current page as Markdown in a new tab.
      * `chatgpt`: Send the current page content to ChatGPT.
      * `claude`: Send the current page content to Claude.

      <img src="https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/page-context-menu.png?maxW=1348&auto=format&n=mvenohBb7F5T71_N&q=85&s=c287d914c9cdf7ba66ea4d76095e329a" alt="Contextual Menu" className="rounded-xl" width="1348" height="824" data-path="images/page-context-menu.png" srcset="https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/page-context-menu.png?w=280&maxW=1348&auto=format&n=mvenohBb7F5T71_N&q=85&s=1a2102e0c02be1c186b626f1ef63f046 280w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/page-context-menu.png?w=560&maxW=1348&auto=format&n=mvenohBb7F5T71_N&q=85&s=705b080884669056a308ff62a13f0423 560w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/page-context-menu.png?w=840&maxW=1348&auto=format&n=mvenohBb7F5T71_N&q=85&s=f61cedf8d8ade6e043b1b5621dbb6b0f 840w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/page-context-menu.png?w=1100&maxW=1348&auto=format&n=mvenohBb7F5T71_N&q=85&s=22310355dead2830f54056210262f618 1100w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/page-context-menu.png?w=1650&maxW=1348&auto=format&n=mvenohBb7F5T71_N&q=85&s=967e2abf7ab896d238d6d1acee203754 1650w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/page-context-menu.png?w=2500&maxW=1348&auto=format&n=mvenohBb7F5T71_N&q=85&s=5b4dadbe034c4f0add6ea5b46d109749 2500w" data-optimize="true" data-opv="2" />

      <Note>
        The contextual menu is only available on preview and production deployments.
      </Note>
    </ResponseField>
  </Expandable>
</ResponseField>

### API Configurations

<ResponseField name="api" type="object">
  API documentation and interactive playground settings.

  <Expandable title="Api">
    <ResponseField name="openapi" type="string or array or object">
      OpenAPI specification files for generating API documentation. Can be a single URL/path or an array of URLs/paths.

      <Expandable title="Openapi">
        <ResponseField name="source" type="string">
          URL or path to your OpenAPI specification file.

          Minimum length: 1
        </ResponseField>

        <ResponseField name="directory" type="string">
          Directory to search for OpenAPI files.

          Do not include a leading slash.
        </ResponseField>
      </Expandable>
    </ResponseField>

    <ResponseField name="asyncapi" type="string or array or object">
      AsyncAPI specification files for generating API documentation. Can be a single URL/path or an array of URLs/paths.

      <Expandable title="Asyncapi">
        <ResponseField name="source" type="string">
          URL or path to your AsyncAPI specification file.

          Minimum length: 1
        </ResponseField>

        <ResponseField name="directory" type="string">
          Directory to search for AsyncAPI files.

          Do not include a leading slash.
        </ResponseField>
      </Expandable>
    </ResponseField>

    <ResponseField name="params" type="object">
      Display settings for API parameters.

      <Expandable title="Params">
        <ResponseField name="expanded" type="&#x22;all&#x22; | &#x22;closed&#x22;">
          Whether to expand all parameters by default. Defaults to `closed`.
        </ResponseField>
      </Expandable>
    </ResponseField>

    <ResponseField name="playground" type="object">
      API playground settings.

      <Expandable title="Playground">
        <ResponseField name="display" type="&#x22;interactive&#x22; | &#x22;simple&#x22; | &#x22;none&#x22;">
          The display mode of the API playground. Defaults to `interactive`.
        </ResponseField>

        <ResponseField name="proxy" type="boolean">
          Whether to pass API requests through a proxy server. Defaults to `true`.
        </ResponseField>
      </Expandable>
    </ResponseField>

    <ResponseField name="examples" type="object">
      Configurations for the autogenerated API examples.

      <Expandable title="Examples">
        <ResponseField name="languages" type="array of string">
          Example languages for the autogenerated API snippets
        </ResponseField>

        <ResponseField name="defaults" type="&#x22;required&#x22; | &#x22;all&#x22;">
          Whether to show optional parameters in API examples. Defaults to `all`.
        </ResponseField>
      </Expandable>
    </ResponseField>

    <ResponseField name="mdx" type="object">
      Configurations for API pages generated from `MDX` files.

      <Expandable title="Mdx">
        <ResponseField name="auth" type="object">
          Authentication configuration for MDX-based API requests.

          <Expandable title="Auth">
            <ResponseField name="method" type="&#x22;bearer&#x22; | &#x22;basic&#x22; | &#x22;key&#x22; | &#x22;cobo&#x22;">
              Authentication method for API requests.
            </ResponseField>

            <ResponseField name="name" type="string">
              Authentication name for API requests.
            </ResponseField>
          </Expandable>
        </ResponseField>

        <ResponseField name="server" type="string or array">
          Server configuration for API requests.
        </ResponseField>
      </Expandable>
    </ResponseField>
  </Expandable>
</ResponseField>

### SEO and search

<ResponseField name="seo" type="object">
  SEO indexing configurations.

  <Expandable title="Seo">
    <ResponseField name="metatags" type="object">
      Meta tags added to every page. Must be a valid key-value pair. See [common meta tags reference](/settings/seo#common-meta-tags-reference) for options.
    </ResponseField>

    <ResponseField name="indexing" type="&#x22;navigable&#x22; | &#x22;all&#x22;">
      Specify which pages search engines should index. Choose `navigable` to index only pages that are in your `docs.json` navigation or choose `all` to index every page. Defaults to `navigable`.
    </ResponseField>
  </Expandable>
</ResponseField>

<ResponseField name="search" type="object">
  Search display settings.

  <Expandable title="Search">
    <ResponseField name="prompt" type="string">
      Placeholder text to display in the search bar.
    </ResponseField>
  </Expandable>
</ResponseField>

### Integrations

<ResponseField name="integrations" type="object">
  Third-party integrations.

  <Expandable title="Integrations">
    <ResponseField name="amplitude" type="object">
      Amplitude analytics integration.

      <Expandable title="Amplitude">
        <ResponseField name="apiKey" type="string" required>
          Your Amplitude API key.
        </ResponseField>
      </Expandable>
    </ResponseField>

    <ResponseField name="clearbit" type="object">
      Clearbit data enrichment integration.

      <Expandable title="Clearbit">
        <ResponseField name="publicApiKey" type="string" required>
          Your Clearbit API key.
        </ResponseField>
      </Expandable>
    </ResponseField>

    <ResponseField name="fathom" type="object">
      Fathom analytics integration.

      <Expandable title="Fathom">
        <ResponseField name="siteId" type="string" required>
          Your Fathom site ID.
        </ResponseField>
      </Expandable>
    </ResponseField>

    <ResponseField name="frontchat" type="object">
      Front chat integration.

      <Expandable title="Frontchat">
        <ResponseField name="snippetId" type="string" required>
          Your Front chat snippet ID.

          Minimum length: 6
        </ResponseField>
      </Expandable>
    </ResponseField>

    <ResponseField name="ga4" type="object">
      Google Analytics 4 integration.

      <Expandable title="Ga4">
        <ResponseField name="measurementId" type="string matching ^G" required>
          Your Google Analytics 4 measurement ID.

          Must match pattern: ^G
        </ResponseField>
      </Expandable>
    </ResponseField>

    <ResponseField name="gtm" type="object">
      Google Tag Manager integration.

      <Expandable title="Gtm">
        <ResponseField name="tagId" type="string matching ^G" required>
          Your Google Tag Manager tag ID.

          Must match pattern: ^G
        </ResponseField>
      </Expandable>
    </ResponseField>

    <ResponseField name="heap" type="object">
      Heap analytics integration.

      <Expandable title="Heap">
        <ResponseField name="appId" type="string" required>
          Your Heap app ID.
        </ResponseField>
      </Expandable>
    </ResponseField>

    <ResponseField name="hotjar" type="object">
      Hotjar integration.

      <Expandable title="Hotjar">
        <ResponseField name="hjid" type="string" required>
          Your Hotjar ID.
        </ResponseField>

        <ResponseField name="hjsv" type="string" required>
          Your Hotjar script version.
        </ResponseField>
      </Expandable>
    </ResponseField>

    <ResponseField name="intercom" type="object">
      Intercom integration.

      <Expandable title="Intercom">
        <ResponseField name="appId" type="string" required>
          Your Intercom app ID.

          Minimum length: 6
        </ResponseField>
      </Expandable>
    </ResponseField>

    <ResponseField name="koala" type="object">
      Koala integration.

      <Expandable title="Koala">
        <ResponseField name="publicApiKey" type="string" required>
          Your Koala public API key.

          Minimum length: 2
        </ResponseField>
      </Expandable>
    </ResponseField>

    <ResponseField name="logrocket" type="object">
      LogRocket integration.

      <Expandable title="Logrocket">
        <ResponseField name="appId" type="string" required>
          Your LogRocket app ID.
        </ResponseField>
      </Expandable>
    </ResponseField>

    <ResponseField name="mixpanel" type="object">
      Mixpanel integration.

      <Expandable title="Mixpanel">
        <ResponseField name="projectToken" type="string" required>
          Your Mixpanel project token.
        </ResponseField>
      </Expandable>
    </ResponseField>

    <ResponseField name="osano" type="object">
      Osano integration.

      <Expandable title="Osano">
        <ResponseField name="scriptSource" type="string" required>
          Your Osano script source.
        </ResponseField>
      </Expandable>
    </ResponseField>

    <ResponseField name="pirsch" type="object">
      Pirsch analytics integration.

      <Expandable title="Pirsch">
        <ResponseField name="id" type="string" required>
          Your Pirsch ID.
        </ResponseField>
      </Expandable>
    </ResponseField>

    <ResponseField name="posthog" type="object">
      PostHog integration.

      <Expandable title="Posthog">
        <ResponseField name="apiKey" type="string matching ^phc\_" required>
          Your PostHog API key.

          Must match pattern: ^phc\_
        </ResponseField>

        <ResponseField name="apiHost" type="string (uri)">
          Your PostHog API host.
        </ResponseField>
      </Expandable>
    </ResponseField>

    <ResponseField name="plausible" type="object">
      Plausible analytics integration.

      <Expandable title="Plausible">
        <ResponseField name="domain" type="string" required>
          Your Plausible domain.
        </ResponseField>

        <ResponseField name="server" type="string">
          Your Plausible server.
        </ResponseField>
      </Expandable>
    </ResponseField>

    <ResponseField name="segment" type="object">
      Segment integration.

      <Expandable title="Segment">
        <ResponseField name="key" type="string" required>
          Your Segment key.
        </ResponseField>
      </Expandable>
    </ResponseField>

    <ResponseField name="telemetry" type="object">
      Telemetry settings.

      <Expandable title="Telemetry">
        <ResponseField name="enabled" type="boolean">
          Whether to enable telemetry.
        </ResponseField>
      </Expandable>
    </ResponseField>

    <ResponseField name="cookies" type="object">
      Cookie settings.

      <Expandable title="Cookies">
        <ResponseField name="key" type="string">
          Key for cookies.
        </ResponseField>

        <ResponseField name="value" type="string">
          Value for cookies.
        </ResponseField>
      </Expandable>
    </ResponseField>
  </Expandable>
</ResponseField>

### Errors

<ResponseField name="errors" type="object">
  Error handling settings.

  <Expandable title="Errors">
    <ResponseField name="404" type="object">
      404 "Page not found" error handling.

      <Expandable title="404">
        <ResponseField name="redirect" type="boolean">
          Whether to automatically redirect to the home page when a page is not
          found.
        </ResponseField>
      </Expandable>
    </ResponseField>
  </Expandable>
</ResponseField>

## Examples

<Tabs>
  <Tab title="Basic example">
    ```json title="docs.json" wrap lines
    {
      "$schema": "https://mintlify.com/docs.json",
      "theme": "maple",
      "name": "Example Co.",
      "description": "Example Co. is a company that provides example content and placeholder text.",
      "colors": {
        "primary": "#3B82F6",
        "light": "#F8FAFC",
        "dark": "#0F172A"
      },
      "navigation": {
        "dropdowns": [
          {
            "dropdown": "Documentation",
            "icon": "book",
            "description": "How to use the Example Co. product",
            "groups": [
              {
                "group": "Getting started",
                "pages": [
                  "index",
                  "quickstart"
                ]
              },
              {
                "group": "Customization",
                "pages": [
                  "settings",
                  "users",
                  "features"
                ]
              },
              {
                "group": "Billing",
                "pages": [
                  "billing/overview",
                  "billing/payments",
                  "billing/subscriptions"
                ]
              }
            ]
          },
          {
            "dropdown": "Changelog",
            "icon": "history",
            "description": "Updates and changes",
            "pages": [
              "changelog"
            ]
          }
        ]
      },
      "logo": {
        "light": "/logo-light.svg",
        "dark": "/logo-dark.svg",
        "href": "https://example.com"
      },
      "navbar": {
        "links": [
          {
            "label": "Community",
            "href": "https://example.com/community"
          }
        ],
        "primary": {
          "type": "button",
          "label": "Get Started",
          "href": "https://example.com/start"
        }
      },
      "footer": {
        "socials": {
          "x": "https://x.com/example",
          "linkedin": "https://www.linkedin.com/company/example",
          "github": "https://github.com/example",
          "slack": "https://example.com/community"
        },
        "links": [
          {
            "header": "Resources",
            "items": [
              {
                "label": "Customers",
                "href": "https://example.com/customers"
              },
              {
                "label": "Enterprise",
                "href": "https://example.com/enterprise"
              },
              {
                "label": "Request Preview",
                "href": "https://example.com/preview"
              }
            ]
          },
          {
            "header": "Company",
            "items": [
              {
                "label": "Careers",
                "href": "https://example.com/careers"
              },
              {
                "label": "Blog",
                "href": "https://example.com/blog"
              },
              {
                "label": "Privacy Policy",
                "href": "https://example.com/legal/privacy"
              }
            ]
          }
        ]
      },
      "integrations": {
        "ga4": {
          "measurementId": "G-XXXXXXXXXX"
        },
        "koala": {
          "publicApiKey": "pk_example_key_123"
        },
        "telemetry": {
          "enabled": true
        },
        "cookies": {
          "key": "example_cookie_key",
          "value": "example_cookie_value"
        }
      },
      "contextual": {
        "options": [
          "copy",
          "view",
          "chatgpt",
          "claude"
        ]
      },
      "errors": {
        "404": {
          "redirect": true
        }
      }
    }
    ```
  </Tab>

  <Tab title="Interactive API example">
    ```json title="docs.json" wrap lines highlight={43-61, 72-79}
    {
      "$schema": "https://mintlify.com/docs.json",
      "theme": "maple",
      "name": "Example Co.",
      "description": "Example Co. is a company that provides example content and placeholder text.",
      "colors": {
        "primary": "#3B82F6",
        "light": "#F8FAFC",
        "dark": "#0F172A"
      },
      "navigation": {
        "dropdowns": [
          {
            "dropdown": "Documentation",
            "icon": "book",
            "description": "How to use the Example Co. product",
            "groups": [
              {
                "group": "Getting started",
                "pages": [
                  "index",
                  "quickstart"
                ]
              },
              {
                "group": "Customization",
                "pages": [
                  "settings",
                  "users",
                  "features"
                ]
              },
              {
                "group": "Billing",
                "pages": [
                  "billing/overview",
                  "billing/payments",
                  "billing/subscriptions"
                ]
              }
            ]
          },
          {
            "dropdown": "API reference",
            "icon": "terminal",
            "description": "How to use the Example Co. API",
            "groups": [
              {
                "group": "API reference",
                "pages": [
                  "api-reference/introduction"
                ]
              },
              {
                "group": "Endpoints",
                "openapi": {
                  "source": "openapi.json"
                }
              }
            ]
          },
          {
            "dropdown": "Changelog",
            "icon": "history",
            "description": "Updates and changes",
            "pages": [
              "changelog"
            ]
          }
        ]
      },
      "api": {
        "playground": {
          "display": "interactive"
        },
        "examples": {
          "languages": ["javascript", "curl", "python"]
        }
      },
      "logo": {
        "light": "/logo-light.svg",
        "dark": "/logo-dark.svg",
        "href": "https://example.com"
      },
      "navbar": {
        "links": [
          {
            "label": "Community",
            "href": "https://example.com/community"
          }
        ],
        "primary": {
          "type": "button",
          "label": "Get Started",
          "href": "https://example.com/start"
        }
      },
      "footer": {
        "socials": {
          "x": "https://x.com/example",
          "linkedin": "https://www.linkedin.com/company/example",
          "github": "https://github.com/example",
          "slack": "https://example.com/community"
        },
        "links": [
          {
            "header": "Resources",
            "items": [
              {
                "label": "Customers",
                "href": "https://example.com/customers"
              },
              {
                "label": "Enterprise",
                "href": "https://example.com/enterprise"
              },
              {
                "label": "Request Preview",
                "href": "https://example.com/preview"
              }
            ]
          },
          {
            "header": "Company",
            "items": [
              {
                "label": "Careers",
                "href": "https://example.com/careers"
              },
              {
                "label": "Blog",
                "href": "https://example.com/blog"
              },
              {
                "label": "Privacy Policy",
                "href": "https://example.com/legal/privacy"
              }
            ]
          }
        ]
      },
      "integrations": {
        "ga4": {
          "measurementId": "G-XXXXXXXXXX"
        },
        "koala": {
          "publicApiKey": "pk_example_key_123"
        },
        "telemetry": {
          "enabled": true
        },
        "cookies": {
          "key": "example_cookie_key",
          "value": "example_cookie_value"
        }
      },
      "contextual": {
        "options": [
          "copy",
          "view",
          "chatgpt",
          "claude"
        ]
      },
      "errors": {
        "404": {
          "redirect": true
        }
      }
    }
    ```
  </Tab>

  <Tab title="Multi-language example">
    ```json title="docs.json" wrap lines
    {
      "$schema": "https://mintlify.com/docs.json",
      "theme": "maple",
      "name": "Example Co.",
      "description": "Example Co. is a company that provides example content and placeholder text.",
      "colors": {
        "primary": "#3B82F6",
        "light": "#F8FAFC",
        "dark": "#0F172A"
      },
      "navigation": {
        "global": {
          "anchors": [
            {
              "anchor": "Documentation",
              "href": "https://mintlify.com/docs"
            },
            {
              "anchor": "Changelog",
              "href": "https://mintlify.com/docs/changelog"
            }
          ]
        },
        "languages": [ // [!code highlight:3]
          {
            "language": "en",
            "dropdowns": [
              {
                "dropdown": "Documentation",
                "icon": "book",
                "description": "How to use the Example Co. product",
                "pages": [
                  {
                    "group": "Getting started",
                    "pages": ["index", "quickstart"]
                  },
                  {
                    "group": "Customization",
                    "pages": ["settings", "users", "features"]
                  },
                  {
                    "group": "Billing",
                    "pages": [
                      "billing/overview",
                      "billing/payments",
                      "billing/subscriptions"
                    ]
                  }
                ]
              },
              {
                "dropdown": "Changelog",
                "icon": "history",
                "description": "Updates and changes",
                "pages": ["changelog"]
              }
            ]
          },
          {
            "language": "es",// [!code highlight]
            "dropdowns": [
              {
                "dropdown": "Documentación",
                "icon": "book",
                "description": "Cómo usar el producto de Example Co.",
                "pages": [
                  {
                    "group": "Comenzando",
                    "pages": ["es/index", "es/quickstart"]
                  },
                  {
                    "group": "Personalización",
                    "pages": ["es/settings", "es/users", "es/features"]
                  },
                  {
                    "group": "Billing",
                    "pages": [
                      "es/billing/overview",
                      "es/billing/payments",
                      "es/billing/subscriptions"
                    ]
                  }
                ]
              },
              {
                "dropdown": "Changelog",
                "icon": "history",
                "description": "Actualizaciones y cambios",
                "pages": ["es/changelog"]
              }
            ]
          }
        ]
      },
      "logo": {
        "light": "/logo-light.svg",
        "dark": "/logo-dark.svg",
        "href": "https://example.com"
      },
      "navbar": {
        "links": [
          {
            "label": "Community",
            "href": "https://example.com/community"
          }
        ],
        "primary": {
          "type": "button",
          "label": "Get Started",
          "href": "https://example.com/start"
        }
      },
      "footer": {
        "socials": {
          "x": "https://x.com/example",
          "linkedin": "https://www.linkedin.com/company/example",
          "github": "https://github.com/example",
          "slack": "https://example.com/community"
        },
        "links": [
          {
            "header": "Resources",
            "items": [
              {
                "label": "Customers",
                "href": "https://example.com/customers"
              },
              {
                "label": "Enterprise",
                "href": "https://example.com/enterprise"
              },
              {
                "label": "Request Preview",
                "href": "https://example.com/preview"
              }
            ]
          },
          {
            "header": "Company",
            "items": [
              {
                "label": "Careers",
                "href": "https://example.com/careers"
              },
              {
                "label": "Blog",
                "href": "https://example.com/blog"
              },
              {
                "label": "Privacy Policy",
                "href": "https://example.com/legal/privacy"
              }
            ]
          }
        ]
      },
      "integrations": {
        "ga4": {
          "measurementId": "G-XXXXXXXXXX"
        },
        "koala": {
          "publicApiKey": "pk_example_key_123"
        },
        "telemetry": {
          "enabled": true
        },
        "cookies": {
          "key": "example_cookie_key",
          "value": "example_cookie_value"
        }
      },
      "contextual": {
        "options": ["copy", "view", "chatgpt", "claude"]
      },
      "errors": {
        "404": {
          "redirect": true
        }
      }
    }
    ```
  </Tab>
</Tabs>

## Upgrading from `mint.json`

If your docs project uses the deprecated `mint.json` file, follow these steps to upgrade to `docs.json`.

<Steps>
  <Step title="Install or update the CLI">
    If you haven't installed the [CLI](/installation), install it now:

    <CodeGroup>
      ```bash npm
      npm i -g mint
      ```

      ```bash yarn
      yarn global add mint
      ```

      ```bash pnpm
      pnpm add -g mint
      ```
    </CodeGroup>

    If you already have the CLI installed, make sure it is up to date:

    ```bash
    mint update
    ```
  </Step>

  <Step title="Create your docs.json file">
    In your docs repository, run:

    ```bash
    mint upgrade
    ```

    This command will create a `docs.json` file from your existing `mint.json`. Review the generated file to ensure all settings are correct.
  </Step>

  <Step title="Delete your mint.json file">
    After verifying your `docs.json` is configured properly, you can safely delete your old `mint.json` file.
  </Step>
</Steps>


# Redirects and broken links
Source: https://mintlify.com/docs/settings/broken-links

Tools to help prevent invalid links

When you change the path of a file in your docs folder, it also changes the URL path to that page. This may happen when restructuring your docs or changing the sidebar title.

## Broken links

Catch broken links with our CLI. [Install the CLI](/installation) and run the command:

```bash
mint broken-links
```

The CLI identifies any relative links in your docs that don't exist.

## Redirects

Set up 301 redirects by adding the `redirects` field to your `docs.json` file.

```json
"redirects": [
  {
    "source": "/source/path",
    "destination": "/destination/path"
  }
]
```

This permanently redirects `/source/path` to `/destination/path` so that you don't lose any previous SEO for the original page.

To match a wildcard path, use `*` after a parameter. In this example, `/beta/:slug*` matches `/beta/introduction` and redirects it to `/v2/introduction`.

```json
"redirects": [
  {
    "source": "/beta/:slug*",
    "destination": "/v2/:slug*"
  }
]
```


# CI checks
Source: https://mintlify.com/docs/settings/ci

Add checks for broken links, linting, and grammar to the updating process

<Info>
  [Pro and Enterprise plans](https://mintlify.com/pricing?ref=docs-ci) include CI checks for GitHub repositories.
</Info>

Use CI checks to lint your docs for errors and provide warnings before you deploy. CI checks are configured to run on commits to your configured deployment branch, or on pull requests against that branch.

## Installation

To begin, follow the steps on the [GitHub](/settings/github) page.

For GitHub Apps, you can choose to give permissions to only a single repository. We highly recommend you do so as we only need access to the repository where your docs are hosted.

## Configuration

Configure the CI checks enabled for a deployment by navigating to the [Add-ons](https://dashboard.mintlify.com/products/addons) page of your dashboard. Enable the checks that you want to run.

When enabling checks, you can choose to run them at a `Warning` or `Blocking` level.

* A `Warning` level check will never provide a failure status, even if there is an error or suggestions.
* A `Blocking` level check will provide a failure status if not passed, or changes are suggested.

## Available CI checks

### Broken links

Similar to how the [CLI link checker](/settings/broken-links#broken-links) works on your local machine, we automatically check your docs for broken links.

To see the results of this check, visit GitHub's check results page for a specific commit.

### Vale

[Vale](https://vale.sh/) is an open-source rule-based prose linter which supports a range of document types, including Markdown and MDX.

Mintlify supports automatically running Vale in a CI check and displaying the results as a check status.

#### Configuration

If you have a `.vale.ini` file in the root content directory for your deployment, we automatically use that configuration file. We also automatically use any configuration files in your specified `stylesPath`.

If you do not have a Vale config file, the default configuration automatically loads.

```mdx Default vale.ini configuration expandable
# Top level styles
StylesPath = /app/styles
MinAlertLevel = suggestion
IgnoredScopes = code, tt, img, url, a
SkippedScopes = script, style, pre, figure, code

# Vocabularies
Vocab = Mintlify

# This is required since Vale doesn't officially support MDX
[formats]
mdx = md

# MDX support
[*.mdx]
BasedOnStyles = Vale
Vale.Terms = NO # Enforces really harsh capitalization rules, keep off

# `import ...`, `export ...`
# `<Component ... />`
# `<Component>...</Component>`
# `{ ... }`
TokenIgnores = (?sm)((?:import|export) .+?$), \
(?<!`)(<\w+ ?.+ ?\/>)(?!`), \
(<[A-Z]\w+>.+?<\/[A-Z]\w+>)

# Exclude:
# `<Component \n ... />`
BlockIgnores = (?sm)^(<\w+\n .*\s\/>)$, \
(?sm)^({.+.*})

CommentDelimiters = {/*, */}
```

```text Default Vale vocabulary expandable
Mintlify
mintlify
VSCode
openapi
OpenAPI
Github
APIs

repo
npm
dev

Lorem
ipsum
impsum
amet

const
myName
myObject
bearerAuth
favicon
topbar
url
borderRadius
args
modeToggle
ModeToggle
isHidden
autoplay

_italic_
Strikethrough
Blockquotes
Blockquote
Singleline
Multiline

onboarding

async
await
boolean
enum
func
impl
init
instanceof
typeof
params
stdin
stdout
stderr
stdout
stdin
var
const
let
null
undefined
struct
bool

cors
csrf
env
xhr
xhr2
jwt
oauth
websocket
localhost
middleware
runtime
webhook
stdin
stdout

json
yaml
yml
md
txt
tsx
jsx
css
scss
html
png
jpg
svg

cdn
cli
css
dom
dto
env
git
gui
http
https
ide
jvm
mvc
orm
rpc
sdk
sql
ssh
ssl
tcp
tls
uri
url
ux
ui

nodejs
npm
yarn
pnpm
eslint
pytest
golang
rustc
kubectl
mongo
postgres
redis

JavaScript
TypeScript
Python
Ruby
Rust
Go
Golang
Java
Kotlin
Swift
Node.js
NodeJS
Deno

React
Vue
Angular
Next.js
Nuxt
Express
Django
Flask
Spring
Laravel
Redux
Vuex
TensorFlow
PostgreSQL
MongoDB
Redis
PNPM

Docker
Kubernetes
AWS
Azure
GCP
Terraform
Jenkins
CircleCI
GitLab
Heroku

Git
git
GitHub
GitLab
Bitbucket
VSCode
Visual Studio Code
IntelliJ
WebStorm
ESLint
eslint
Prettier
prettier
Webpack
webpack
Vite
vite
Babel
babel
Jest
jest
Mocha
Cypress
Postman

HTTP
HTTPS
OAuth
JWT
GraphQL
REST
WebSocket
TCP/IP

NPM
Yarn
PNPM
Pip
PIP
Cargo
RubyGems

Swagger
OpenAPI
Markdown
MDX
Storybook
TypeDoc
JSDoc

MySQL
PostgreSQL
MongoDB
Redis
Elasticsearch
DynamoDB

Linux
Unix
macOS
iOS

Firefox
Chromium
WebKit

config
ctx
desc
dir
elem
err
len
msg
num
obj
prev
proc
ptr
req
res
str
tmp
val
vars

todo
href
lang
nav
prev
next
toc
```

<Warning>
  Please note that for security reasons, we are unable to support any absolute `stylesPath`, or `stylesPath` which include `..` values. Please use relative paths and include the `stylesPath` in your repository.
</Warning>

#### Packages

Vale supports a range of [packages](https://vale.sh/docs/keys/packages), which can be used to check for spelling and style errors.
Any packages you include in your repository under the correct `stylesPath` are automatically installed and used in your Vale configuration.

For packages not included in your repository, you may specify any packages from the [Vale package registry](https://vale.sh/explorer), and they are automatically downloaded and used in your Vale configuration.

<Warning>
  Please note that for security reasons, we are unable to support automatically downloading packages that are not from the [Vale package registry](https://vale.sh/explorer).
</Warning>

#### Vale with `MDX`

Vale does not natively support `MDX`, but Vale's author has provided a [custom extension](https://github.com/errata-ai/MDX) to support it.

If you prefer not to use this extension, we recommend the following lines in your `.vale.ini` file:

```ini
[formats]
mdx = md

[*.mdx]
CommentDelimiters = {/*, */}

TokenIgnores = (?sm)((?:import|export) .+?$), \
(?<!`)(<\w+ ?.+ ?\/>)(?!`), \
(<[A-Z]\w+>.+?<\/[A-Z]\w+>)

BlockIgnores = (?sm)^(<\w+\n .*\s\/>)$, \
(?sm)^({.+.*})
```

To use Vale's in-document comments, use MDX-style comments `{/* ... */}`. If you use the `CommentDelimiters = {/*, */}` [setting](https://vale.sh/docs/keys/commentdelimiters) in your configuration, Vale automatically interprets these comments while linting. This means you can easily use Vale's built-in features, like skipping lines or sections.

```mdx
{/* vale off */}

This text will be ignored by Vale

{/* vale on */}
```

If you choose not to use `CommentDelimiters` but still choose to use Vale's comments, you must wrap any Vale comments in MDX comments `{/* ... */}`. For example:

```mdx
{/* <!-- vale off --> */}

This text will be ignored by Vale

{/* <!-- vale on --> */}
```

These comment tags are not supported within Mintlify components but can be used anywhere at the base level of a document.


# Custom domain
Source: https://mintlify.com/docs/settings/custom-domain

Host your documentation at your website's custom domain

To set up your documentation on a custom domain, you'll need to set your desired custom domain in your Mintlify settings and configure your DNS settings on your domain provider.

<Info>
  Looking to set up a custom subdirectory like `mintlify.com/docs`? See the [custom subdirectory](/advanced/subpath/cloudflare) docs.
</Info>

## Dashboard settings

1. Navigate to your [dashboard](https://dashboard.mintlify.com)
2. Select **Settings**
3. Select **Domain Setup**
4. Enter your desired custom domain. For example, `docs.mintlify.com`

<Frame>
  <img alt="Custom Domain" className="block dark:hidden" src="https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/add-custom-domain-light.png?maxW=3024&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=130866d58de6549953e432468d08d3ba" width="3024" height="1194" data-path="images/add-custom-domain-light.png" srcset="https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/add-custom-domain-light.png?w=280&maxW=3024&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=1780a41fc08e774fbdc54bc86228963f 280w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/add-custom-domain-light.png?w=560&maxW=3024&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=7eb6bf41dce0cdbd9c2e882d216a9999 560w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/add-custom-domain-light.png?w=840&maxW=3024&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=6c000dd132ddf648d2f20abd6968eda0 840w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/add-custom-domain-light.png?w=1100&maxW=3024&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=6bb5cec0eb3876ca1bd3298414d4f47e 1100w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/add-custom-domain-light.png?w=1650&maxW=3024&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=18f10f82f4a1a434517c043e0d565b43 1650w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/add-custom-domain-light.png?w=2500&maxW=3024&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=e206ce0be581124d7d365b832812127b 2500w" data-optimize="true" data-opv="2" />

  <img alt="Custom Domain" className="hidden dark:block" src="https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/add-custom-domain-dark.png?maxW=3024&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=24ba24a515781f2f186038324687612e" width="3024" height="1114" data-path="images/add-custom-domain-dark.png" srcset="https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/add-custom-domain-dark.png?w=280&maxW=3024&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=c0c7acb146e1277e01d571cb79ef4d1c 280w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/add-custom-domain-dark.png?w=560&maxW=3024&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=7c96584f2ffd77da19f172c710acc0c0 560w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/add-custom-domain-dark.png?w=840&maxW=3024&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=8a7f9ed6785b547ef19817b4a1d5f61b 840w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/add-custom-domain-dark.png?w=1100&maxW=3024&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=eac2b255d048c8f3d2e86ab3153dbc0c 1100w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/add-custom-domain-dark.png?w=1650&maxW=3024&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=528b8081c37d9ab2c3e5399744dc8a7e 1650w, https://dev.mintcdn.com/mintlify/KT_Q5fTvRvVCZfQ_/images/add-custom-domain-dark.png?w=2500&maxW=3024&auto=format&n=KT_Q5fTvRvVCZfQ_&q=85&s=2f9bae61bef9997907daa315a232a9a6 2500w" data-optimize="true" data-opv="2" />
</Frame>

## Configuring your DNS

1. Proceed to your domain's DNS settings on your domain provider's website.
2. Create a new DNS entry, inputting the following values:

```bash
CNAME | docs | cname.vercel-dns.com.
```

<Frame>
  <img alt="DNS" src="https://mintlify-assets.b-cdn.net/mintlify-dns.png" />
</Frame>

## Provider-specific settings

<AccordionGroup>
  <Accordion title="Vercel verification">
    If Vercel is your domain provider, you must add a verification `TXT` record. This information will show on your dashboard after submitting your custom domain, as well as be emailed to you.
  </Accordion>

  <Accordion title="Cloudflare security settings">
    If Cloudflare is your DNS provider, you must enable the "full strict" security option for the https setting.
  </Accordion>
</AccordionGroup>


# Custom scripts
Source: https://mintlify.com/docs/settings/custom-scripts

Fully customize your documentation with custom CSS and JS

Use CSS to style HTML elements or add custom CSS and JavaScript to fully customize the look and feel of your documentation.

## Styling with Tailwind CSS

Use Tailwind CSS v3 to style HTML elements. You can control layout, spacing, colors, and other visual properties. Some common classes are:

* `w-full` - Full width
* `aspect-video` - 16:9 aspect ratio
* `rounded-xl` - Large rounded corners
* `block`, `hidden` - Display control
* `dark:hidden`, `dark:block` - Dark mode visibility

Tailwind CSS arbitrary values are not supported. For custom values, use the `style` prop instead.

```html
<img style={{ width: '350px', margin: '12px auto' }} src="/path/image.jpg" />
```

## Custom CSS

Add CSS files to your repository and their defined class names will be applied and available in all of your `MDX` files.

### Adding `style.css`

For example, you can add the following `style.css` file to customize the styling of the navbar and footer.

```css
#navbar {
  background: "#fffff2";
  padding: 1rem;
}

footer {
  margin-top: 2rem;
}
```

### Using identifiers and selectors

Mintlify has a set of common identifiers and selectors to help you tag important elements of the UI.

<Tip>
  Use inspect element to find references to elements you're looking to customize.
</Tip>

<AccordionGroup>
  <Accordion title="Identifiers">
    * APIPlaygroundInput: `api-playground-input`
    * AssistantEntry: `assistant-entry`
    * AssistantEntryMobile: `assistant-entry-mobile`
    * Banner: `banner`
    * ChangelogFilters: `changelog-filters`
    * ChangelogFiltersContent: `changelog-filters-content`
    * ChatAssistantSheet: `chat-assistant-sheet`
    * ChatAssistantTextArea: `chat-assistant-textarea`
    * ContentArea: `content-area`
    * ContentContainer: `content-container`
    * ContentSideLayout: `content-side-layout`
    * Footer: `footer`
    * Header: `header`
    * NavBarTransition: `navbar-transition`
    * NavigationItems: `navigation-items`
    * Navbar: `navbar`
    * PageContextMenu: `page-context-menu`
    * PageContextMenuButton: `page-context-menu-button`
    * PageTitle: `page-title`
    * Pagination: `pagination`
    * Panel: `panel`
    * RequestExample: `request-example`
    * ResponseExample: `response-example`
    * SearchBarEntry: `search-bar-entry`
    * SearchBarEntryMobile: `search-bar-entry-mobile`
    * SearchInput: `search-input`
    * Sidebar: `sidebar`
    * SidebarContent: `sidebar-content`
    * TableOfContents: `table-of-contents`
    * TableOfContentsContent: `table-of-contents-content`
    * TableOfContentsLayout: `table-of-contents-layout`
    * TopbarCtaButton: `topbar-cta-button`
  </Accordion>

  <Accordion title="Selectors">
    * Accordion: `accordion`
    * AccordionGroup: `accordion-group`
    * AlmondLayout: `almond-layout`
    * AlmondNavBottomSection: `almond-nav-bottom-section`
    * AlmondNavBottomSectionDivider: `almond-nav-bottom-section-divider`
    * Anchor: `nav-anchor`
    * Anchors: `nav-anchors`
    * APISection: `api-section`
    * APISectionHeading: `api-section-heading`
    * APISectionHeadingSubtitle: `api-section-heading-subtitle`
    * APISectionHeadingTitle: `api-section-heading-title`
    * Callout: `callout`
    * Card: `card`
    * CardGroup: `card-group`
    * ChatAssistantSheet: `chat-assistant-sheet`
    * ChatAssistantSheetHeader: `chat-assistant-sheet-header`
    * ChatAssistantSheetContent: `chat-assistant-sheet-content`
    * ChatAssistantInput: `chat-assistant-input`
    * ChatAssistantSendButton: `chat-assistant-send-button`
    * CodeBlock: `code-block`
    * CodeGroup: `code-group`
    * Content: `mdx-content`
    * DropdownTrigger: `nav-dropdown-trigger`
    * DropdownContent: `nav-dropdown-content`
    * DropdownItem: `nav-dropdown-item`
    * DropdownItemTextContainer: `nav-dropdown-item-text-container`
    * DropdownItemTitle: `nav-dropdown-item-title`
    * DropdownItemDescription: `nav-dropdown-item-description`
    * DropdownItemIcon: `nav-dropdown-item-icon`
    * Expandable: `expandable`
    * Eyebrow: `eyebrow`
    * FeedbackToolbar: `feedback-toolbar`
    * Field: `field`
    * Frame: `frame`
    * Icon: `icon`
    * Link: `link`
    * LoginLink: `login-link`
    * Logo: `nav-logo`
    * Mermaid: `mermaid`
    * MethodNavPill: `method-nav-pill`
    * MethodPill: `method-pill`
    * NavBarLink: `navbar-link`
    * NavTagPill: `nav-tag-pill`
    * NavTagPillText: `nav-tag-pill-text`
    * OptionDropdown: `option-dropdown`
    * PaginationNext: `pagination-next`
    * PaginationPrev: `pagination-prev`
    * PaginationTitle: `pagination-title`
    * Panel: `panel`
    * SidebarGroup: `sidebar-group`
    * SidebarGroupIcon: `sidebar-group-icon`
    * SidebarGroupHeader: `sidebar-group-header`
    * SidebarTitle: `sidebar-title`
    * Step: `step`
    * Steps: `steps`
    * Tab: `tab`
    * Tabs: `tabs`
    * TabsBar: `nav-tabs`
    * TabsBarItem: `nav-tabs-item`
    * TableOfContents: `toc`
    * TableOfContentsItem: `toc-item`
    * Tooltip: `tooltip`
    * TopbarRightContainer: `topbar-right-container`
    * TryitButton: `tryit-button`
    * Update: `update`
  </Accordion>
</AccordionGroup>

<Warning>
  References and the styling of common elements are subject to change as the platform evolves. Please use custom styling with caution.
</Warning>

## Custom JavaScript

Custom JS allows you to add custom executable code globally. It is the equivalent of adding a `<script>` tag with JS code into every page.

### Adding custom JavaScript

Any `.js` file inside the content directory of your docs will be included in every documentation page. For example, you can add the following `ga.js` file to enable [Google Analytics](https://marketingplatform.google.com/about/analytics) across the entire documentation.

```js
window.dataLayer = window.dataLayer || [];
function gtag() {
  dataLayer.push(arguments);
}
gtag('js', new Date());

gtag('config', 'TAG_ID');
```

<Warning>
  Please use with caution to not introduce security vulnerabilities.
</Warning>


# GitHub
Source: https://mintlify.com/docs/settings/github

Sync your docs with a GitHub repo

Mintlify uses a GitHub App to automatically sync your documentation with your GitHub repository.

## Installing the GitHub App

Install the Mintlify GitHub App on the GitHub account or organization that owns your docs repository. You must have organization ownership or admin permissions in a repository to install the app. If you lack the necessary permissions, the repository owner must approve the installation request.

Install the Mintlify GitHub App through your [dashboard](https://dashboard.mintlify.com/settings/organization/github-app).

<Tip>
  We recommend granting access only to the repository where your docs are hosted.
</Tip>

<Frame>
  <img className="h-80" alt="Mintlify GitHub App installation page with the 'Only select repositories' option selected." src="https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/github/select-repos.png?maxW=2980&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=2b211ee75f539b359d3a2fb561a9f91b" width="2980" height="1702" data-path="images/github/select-repos.png" srcset="https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/github/select-repos.png?w=280&maxW=2980&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=39f21e5da1aee70c3cf1472d790d5b65 280w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/github/select-repos.png?w=560&maxW=2980&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=aa7cd6ae0eac3f73f47bc7fca3083929 560w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/github/select-repos.png?w=840&maxW=2980&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=eb86040dc63188971491218c3f29b772 840w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/github/select-repos.png?w=1100&maxW=2980&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=9a966be7af7be28151a66a135b4a7645 1100w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/github/select-repos.png?w=1650&maxW=2980&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=8dfadcdc22ecb5c193ef1b1661215c80 1650w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/github/select-repos.png?w=2500&maxW=2980&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=d0675f9501f5f1156e025b6cf7e51b85 2500w" data-optimize="true" data-opv="2" />
</Frame>

## Permissions

When you install the GitHub app, you will be prompted to grant the following permissions:

Read permissions:

* `metadata`: Basic repository information

Read and write permissions:

* `checks`: Create status checks on pull requests
* `code`: Read file changes when you commit to your docs branch
* `deployments`: Generate preview deployments for pull requests
* `pull requests`: Create branches and pull requests from the web editor
* `workflows`: Manage GitHub Actions for docs deployments

<Info>
  The app only accesses repositories that you explicitly grant it access to. If you have branch protection rules enabled, the app cannot push directly to protected branches.
</Info>

## Managing repository access

When installing our GitHub App, you can grant access to all of your repositories or specific ones. We recommend only granting access to the repositories where your documentation is located. You can modify this selection anytime in your [GitHub app settings](https://github.com/apps/mintlify/installations/new).

## Configuring docs source

Change the organization, repository, or branch that your documentation is built from in the [Git Settings](https://dashboard.mintlify.com/settings/deployment/git-settings) section of your dashboard.

## Troubleshooting

If you encounter problems with the GitHub app, resetting the connection can solve most problems.

<Steps>
  <Step title="Uninstall the Mintlify app through GitHub.">
    1. In GitHub, go to [installations](https://github.com/settings/installations) and select **Configure** next to the Mintlify app. Scroll down and select **Uninstall**.
    2. Go to [Authorized GitHub Apps](https://github.com/settings/apps/authorizations) and select **Revoke** next to the Mintlify app.
  </Step>

  <Step title="Reinstall the Mintlify app.">
    1. In your Mintlify dashboard, go to [Git Settings](https://dashboard.mintlify.com/settings/deployment/git-settings) and install the GitHub app.
    2. Authorize your account in the [My Profile](https://dashboard.mintlify.com/settings/account) section of your dashboard.
  </Step>
</Steps>


# GitLab
Source: https://mintlify.com/docs/settings/gitlab

Sync your docs with a GitLab repo

We use a combination of Access tokens and Webhooks to authenticate and sync
changes between GitLab and Mintlify.

* We use Access tokens to pull information from GitLab.
* We use Webhooks so GitLab can notify Mintlify when changes are made.
  * This allows Mintlify to create preview deployments when a MR is created.

## Set up the connection

<Steps>
  <Step title="Find your project ID">
    Within your GitLab project, navigate to `Settings` > `General` and find the `Project ID`.

    <Frame>
      <img src="https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/gitlab/gitlab-project-id.png?maxW=950&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=1fd612f285dac829c2df76104380d9f8" width="950" height="775" data-path="images/gitlab/gitlab-project-id.png" srcset="https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/gitlab/gitlab-project-id.png?w=280&maxW=950&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=bc0e9ee9bc3ea3d3556a1e83d681b3b0 280w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/gitlab/gitlab-project-id.png?w=560&maxW=950&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=a22479fe78a6702c1f34d6e5a070e77d 560w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/gitlab/gitlab-project-id.png?w=840&maxW=950&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=2cb789556d338d9a10b4e8b0f0ee51a6 840w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/gitlab/gitlab-project-id.png?w=1100&maxW=950&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=a856c6d10303c52fb4d11b10f931ee0c 1100w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/gitlab/gitlab-project-id.png?w=1650&maxW=950&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=f39ac29bca957b8f7a7b2ce8dc598bdc 1650w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/gitlab/gitlab-project-id.png?w=2500&maxW=950&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=517831ffb543db280dddc3a85cf68395 2500w" data-optimize="true" data-opv="2" />
    </Frame>
  </Step>

  <Step title="Generate an access token">
    a. Navigate to `Settings` > `Access Tokens`.

    b. Select `Add new token`.

    1. Name the token "Mintlify".
    2. If you have a private repo, you must set the role as `Maintainer`.
    3. Choose `api` and `read_api` for the scopes.

    c. Finally click `Create project access token` and copy the token.

    <Frame>
      <img src="https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/gitlab/gitlab-project-access-token.png?maxW=1166&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=69bb4626998045b6d69c32e02032451a" width="1166" height="904" data-path="images/gitlab/gitlab-project-access-token.png" srcset="https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/gitlab/gitlab-project-access-token.png?w=280&maxW=1166&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=eb4ed627d89e04fedaefd63601b8e50c 280w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/gitlab/gitlab-project-access-token.png?w=560&maxW=1166&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=9dd52ce12291a1406d6791a33885f265 560w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/gitlab/gitlab-project-access-token.png?w=840&maxW=1166&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=73795654e1b3c89a18114de888805650 840w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/gitlab/gitlab-project-access-token.png?w=1100&maxW=1166&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=73331e96f6a578a9898688b9aa973c59 1100w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/gitlab/gitlab-project-access-token.png?w=1650&maxW=1166&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=5dbb70ae1b3c8c1316b6755590661da9 1650w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/gitlab/gitlab-project-access-token.png?w=2500&maxW=1166&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=2ac397239fd6170107904661fe95f99d 2500w" data-optimize="true" data-opv="2" />
    </Frame>
  </Step>

  <Step title="Set up the connection">
    Within the [Mintlify dashboard](https://dashboard.mintlify.com/settings/deployment/git-settings), add the project ID and access token from the previous steps alongside the other configurations. Click "Save Changes" when you're done.

    <Frame>
      <img src="https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/gitlab/gitlab-config.png?maxW=2994&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=edf8c0b17bdcbf0bbaef5ca207e18ac1" width="2994" height="1704" data-path="images/gitlab/gitlab-config.png" srcset="https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/gitlab/gitlab-config.png?w=280&maxW=2994&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=4488f491919f634ab233332e5e5c9233 280w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/gitlab/gitlab-config.png?w=560&maxW=2994&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=995461c8e589fa89f9162c740db26c4f 560w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/gitlab/gitlab-config.png?w=840&maxW=2994&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=6ec83727ebda0d8e61b69b21df0ee136 840w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/gitlab/gitlab-config.png?w=1100&maxW=2994&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=2c85e04fd16b833090a0153cd86ddcb8 1100w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/gitlab/gitlab-config.png?w=1650&maxW=2994&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=ce36827b6abed092e51939bb7967f1ab 1650w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/gitlab/gitlab-config.png?w=2500&maxW=2994&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=b2837aa160f63762ec0485a93f0c0fc6 2500w" data-optimize="true" data-opv="2" />
    </Frame>
  </Step>
</Steps>

## Create the webhook

Webhooks allow us to receive events when changes are made so that we can
automatically trigger deployments.

<Steps>
  <Step title="Navigate to Settings > Webhooks and click 'Add new Webhook'">
    <Frame>
      <img src="https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/gitlab/gitlab-webhook.png?maxW=3014&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=96da93c6ba46720354c3eeda031ee531" width="3014" height="1704" data-path="images/gitlab/gitlab-webhook.png" srcset="https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/gitlab/gitlab-webhook.png?w=280&maxW=3014&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=47c95fd4d1618dda92069c1464c0d290 280w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/gitlab/gitlab-webhook.png?w=560&maxW=3014&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=8c3761311142fd102042b5a35976bc13 560w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/gitlab/gitlab-webhook.png?w=840&maxW=3014&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=e135eafc30254a8239bbe652fa5df3ac 840w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/gitlab/gitlab-webhook.png?w=1100&maxW=3014&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=143a2ef687f15b2bc027a48594bce6bf 1100w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/gitlab/gitlab-webhook.png?w=1650&maxW=3014&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=16736a6f44b91e321473f33a0322df04 1650w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/gitlab/gitlab-webhook.png?w=2500&maxW=3014&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=e812e70d1ca28773a1d441e342bfa3a2 2500w" data-optimize="true" data-opv="2" />
    </Frame>
  </Step>

  <Step title="Set up URL and webhook">
    In the "URL" field, enter the endpoint `https://leaves.mintlify.com/gitlab-webhook` and name the webhook "Mintlify".
  </Step>

  <Step title="Paste token">
    Paste the Webhook token generated after setting up the connection.

    <Frame>
      <img src="https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/gitlab/gitlab-show-webtoken.png?maxW=555&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=daa00f612ab8d8a052816a067ae57ad7" width="555" height="527" data-path="images/gitlab/gitlab-show-webtoken.png" srcset="https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/gitlab/gitlab-show-webtoken.png?w=280&maxW=555&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=5cecf9609a26adc5254945bb81079efb 280w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/gitlab/gitlab-show-webtoken.png?w=560&maxW=555&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=1c9bd1f537f96876ebf96325c4ada346 560w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/gitlab/gitlab-show-webtoken.png?w=840&maxW=555&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=3ce1b19d2b7074f3f2aad0ee5db520d0 840w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/gitlab/gitlab-show-webtoken.png?w=1100&maxW=555&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=5d4ad5839843eef538255046096144ae 1100w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/gitlab/gitlab-show-webtoken.png?w=1650&maxW=555&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=aaafc4234df5e46572aee649f937fa72 1650w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/gitlab/gitlab-show-webtoken.png?w=2500&maxW=555&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=6b7dca98d1c0ef298671c1520bb4a606 2500w" data-optimize="true" data-opv="2" />
    </Frame>
  </Step>

  <Step title="Select events">
    Select the events you want to trigger the webhook:

    * Push events (All branches)
    * Merge requests events

    When you're done it should look like this:

    <Frame>
      <img src="https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/gitlab/gitlab-project-webtoken.png?maxW=1161&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=536e73fed1d4251bc0abbab3dbbc48af" width="1161" height="1740" data-path="images/gitlab/gitlab-project-webtoken.png" srcset="https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/gitlab/gitlab-project-webtoken.png?w=280&maxW=1161&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=d1942e0cd6a3b3d351ea93bf33c21c57 280w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/gitlab/gitlab-project-webtoken.png?w=560&maxW=1161&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=9edce571b7a45a41eefec1e243565597 560w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/gitlab/gitlab-project-webtoken.png?w=840&maxW=1161&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=ee3b583bc7c7596dbd90c16358cda1c7 840w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/gitlab/gitlab-project-webtoken.png?w=1100&maxW=1161&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=9ad6f35309cad081d0765831d495aa57 1100w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/gitlab/gitlab-project-webtoken.png?w=1650&maxW=1161&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=69640323ae0e87f869e8d225ddf2c059 1650w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/gitlab/gitlab-project-webtoken.png?w=2500&maxW=1161&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=89b92948c09f6e24c338c82e4dc09814 2500w" data-optimize="true" data-opv="2" />
    </Frame>
  </Step>

  <Step title="Test the Webhook">
    After creating the Webhook, click the "Test" dropdown and select "Push events" to send a sample payload to ensure it's configured correctly. It'll say "Hook executed successfully: HTTP 200" if configured correctly.

    This will help you verify that everything is working correctly and that your documentation will sync properly with your GitLab repository.

    <Frame>
      <img src="https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/gitlab/gitlab-project-webtoken-test.png?maxW=1161&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=0bf6ca68bfdb3f6303d7bf8290025320" width="1161" height="724" data-path="images/gitlab/gitlab-project-webtoken-test.png" srcset="https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/gitlab/gitlab-project-webtoken-test.png?w=280&maxW=1161&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=fb5bda08b57151a6a8330ce572a9650f 280w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/gitlab/gitlab-project-webtoken-test.png?w=560&maxW=1161&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=1eb91318b219c23c9cfa52971b517b94 560w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/gitlab/gitlab-project-webtoken-test.png?w=840&maxW=1161&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=71d824eb3eaf99db6700d5d5ce7bffa4 840w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/gitlab/gitlab-project-webtoken-test.png?w=1100&maxW=1161&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=2e0120b5aa6df753d31984be005ed353 1100w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/gitlab/gitlab-project-webtoken-test.png?w=1650&maxW=1161&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=8622b5b50a3271e501ddbc47cccb6819 1650w, https://dev.mintcdn.com/mintlify/Khh2tU2DRm-hiGai/images/gitlab/gitlab-project-webtoken-test.png?w=2500&maxW=1161&auto=format&n=Khh2tU2DRm-hiGai&q=85&s=45c6e2b42069416069706016a4d0e43d 2500w" data-optimize="true" data-opv="2" />
    </Frame>
  </Step>
</Steps>

<Note>
  Reach out to the Mintlify team if you need help. Contact us
  [here](https://mintlify.com/enterprise).
</Note>

[git-settings]: https://dashboard.mintlify.com/settings/deployment/git-settings


# Preview deployments
Source: https://mintlify.com/docs/settings/preview-deployments

Preview changes to your docs in a live deployment

<Info>
  Preview deployments are available on [Pro and Enterprise plans](https://mintlify.com/pricing?ref=preview-deployments).
</Info>

Preview deployments let you see how changes to your docs will look before merging to production. Each preview creates a shareable URL that updates automatically as you push new changes.

## Creating preview deployments

Preview deployments are created automatically through pull requests or manually from your dashboard.

### Automatic previews

When you create a pull request, the Mintlify bot automatically adds a link to view the preview deployment in your pull request. The preview updates each time you push new commits to the branch.

<Frame>
  <img src="https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/previews/preview-deployment-light.png?maxW=1704&auto=format&n=mvenohBb7F5T71_N&q=85&s=e0142427cfeba23dcc915e13865c1c9e" alt="Link to view deployment in the pull request timeline" className="block dark:hidden" width="1704" height="142" data-path="images/previews/preview-deployment-light.png" srcset="https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/previews/preview-deployment-light.png?w=280&maxW=1704&auto=format&n=mvenohBb7F5T71_N&q=85&s=7399dd8581cd219cc8fdef6d54cda779 280w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/previews/preview-deployment-light.png?w=560&maxW=1704&auto=format&n=mvenohBb7F5T71_N&q=85&s=35608486ea77d691c97d5d96379b517b 560w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/previews/preview-deployment-light.png?w=840&maxW=1704&auto=format&n=mvenohBb7F5T71_N&q=85&s=7130867ed886572016462ea7927bdd94 840w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/previews/preview-deployment-light.png?w=1100&maxW=1704&auto=format&n=mvenohBb7F5T71_N&q=85&s=e0ff178c3b2731fadf97fcad973f90ad 1100w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/previews/preview-deployment-light.png?w=1650&maxW=1704&auto=format&n=mvenohBb7F5T71_N&q=85&s=4a7cbc600356c03420e69efb851f9ccd 1650w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/previews/preview-deployment-light.png?w=2500&maxW=1704&auto=format&n=mvenohBb7F5T71_N&q=85&s=f300481f461826fec954388f0846e4ac 2500w" data-optimize="true" data-opv="2" />

  <img src="https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/previews/preview-deployment-dark.png?maxW=1704&auto=format&n=mvenohBb7F5T71_N&q=85&s=8a8108ee209b5e707ae18c2eac9a8005" alt="Link to view deployment in the pull request timeline" className="hidden dark:block" width="1704" height="142" data-path="images/previews/preview-deployment-dark.png" srcset="https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/previews/preview-deployment-dark.png?w=280&maxW=1704&auto=format&n=mvenohBb7F5T71_N&q=85&s=77108bf9042c6c615b0e559a02df917b 280w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/previews/preview-deployment-dark.png?w=560&maxW=1704&auto=format&n=mvenohBb7F5T71_N&q=85&s=e450e3d97cd6c501e19d90558cb14856 560w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/previews/preview-deployment-dark.png?w=840&maxW=1704&auto=format&n=mvenohBb7F5T71_N&q=85&s=447b339ff8a96806f8681e686cca3fa2 840w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/previews/preview-deployment-dark.png?w=1100&maxW=1704&auto=format&n=mvenohBb7F5T71_N&q=85&s=1a6b395d7c76541879ae78968b1304f0 1100w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/previews/preview-deployment-dark.png?w=1650&maxW=1704&auto=format&n=mvenohBb7F5T71_N&q=85&s=ed0cb87e55c91404a59a4733dab31f21 1650w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/previews/preview-deployment-dark.png?w=2500&maxW=1704&auto=format&n=mvenohBb7F5T71_N&q=85&s=79617be3e525e457842edc23a95ef22d 2500w" data-optimize="true" data-opv="2" />
</Frame>

### Manual previews

You can manually create a preview for any branch.

1. Go to your [dashboard](https://dashboard.mintlify.com/).
2. Select **Previews**.
3. Select **Create preview**.
4. Enter your branch name.
5. Select **Create deployment**.

## Redeploying a preview

Redeploy a preview to refresh content or retry after a failed deployment.

1. Select the preview from your [dashboard](https://dashboard.mintlify.com/).
2. Select **Redeploy**.

<Frame>
  <img src="https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/previews/redeploy-preview-light.png?maxW=2104&auto=format&n=mvenohBb7F5T71_N&q=85&s=28f7b66a8d0ac81fabf3d3b2b716694a" alt="The Previews menu with the deploy button emphasized by an orange rectangle." className="block dark:hidden" width="2104" height="634" data-path="images/previews/redeploy-preview-light.png" srcset="https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/previews/redeploy-preview-light.png?w=280&maxW=2104&auto=format&n=mvenohBb7F5T71_N&q=85&s=303b0d45385f56cd920f003b3ca23500 280w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/previews/redeploy-preview-light.png?w=560&maxW=2104&auto=format&n=mvenohBb7F5T71_N&q=85&s=87dd7e84e5ff60156f63e42ba815b46c 560w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/previews/redeploy-preview-light.png?w=840&maxW=2104&auto=format&n=mvenohBb7F5T71_N&q=85&s=cfd725aaabf66c97c076a8b8caa624bf 840w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/previews/redeploy-preview-light.png?w=1100&maxW=2104&auto=format&n=mvenohBb7F5T71_N&q=85&s=05c471672ae794d1237ef511bda0ba4f 1100w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/previews/redeploy-preview-light.png?w=1650&maxW=2104&auto=format&n=mvenohBb7F5T71_N&q=85&s=30def5d90f4b1ae1eed36868b1af8417 1650w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/previews/redeploy-preview-light.png?w=2500&maxW=2104&auto=format&n=mvenohBb7F5T71_N&q=85&s=a0d199f3c8e3678872e9f512ebe18184 2500w" data-optimize="true" data-opv="2" />

  <img src="https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/previews/redeploy-preview-dark.png?maxW=2104&auto=format&n=mvenohBb7F5T71_N&q=85&s=35187abdc418eed08fb342b84a5f1757" alt="The Previews menu with the deploy button emphasized by an orange rectangle." className="hidden dark:block" width="2104" height="634" data-path="images/previews/redeploy-preview-dark.png" srcset="https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/previews/redeploy-preview-dark.png?w=280&maxW=2104&auto=format&n=mvenohBb7F5T71_N&q=85&s=f688b30a2caab0a4ceda8c8bd13ed8f8 280w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/previews/redeploy-preview-dark.png?w=560&maxW=2104&auto=format&n=mvenohBb7F5T71_N&q=85&s=b2662c390a4cbca213b542579d347032 560w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/previews/redeploy-preview-dark.png?w=840&maxW=2104&auto=format&n=mvenohBb7F5T71_N&q=85&s=c694c75c8f47410af73a04db608559da 840w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/previews/redeploy-preview-dark.png?w=1100&maxW=2104&auto=format&n=mvenohBb7F5T71_N&q=85&s=db02c7ed9911a1c3364af3c1f01a0352 1100w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/previews/redeploy-preview-dark.png?w=1650&maxW=2104&auto=format&n=mvenohBb7F5T71_N&q=85&s=ba2f4eff2d4380a7bff917f8dfd68d54 1650w, https://dev.mintcdn.com/mintlify/mvenohBb7F5T71_N/images/previews/redeploy-preview-dark.png?w=2500&maxW=2104&auto=format&n=mvenohBb7F5T71_N&q=85&s=3ef1b62c7fa1aac687589977a4c1686d 2500w" data-optimize="true" data-opv="2" />
</Frame>

## Sharing preview deployments

Preview deployments can be publicly accessible or restricted to authenticated users.

**Public access**: Preview URLs are publicly viewable by default. Share a preview link with anyone who needs to review your changes.

**Restricted access**: Enable preview deployment authentication to limit preview access to authenticated Mintlify users only. See [Authentication Setup](/authentication-personalization/authentication-setup) for more information.


# SEO
Source: https://mintlify.com/docs/settings/seo

SEO best practices and meta tag configuration for better search visibility

Mintlify automatically handles many SEO best practices, including:

* Meta tag generation
* Sitemap and `robots.txt` file generation
* Semantic HTML structure
* Mobile optimization

You can fully customize your site's meta tags by adding the `metatags` field to your `docs.json` or a page's frontmatter.

## Global meta tags

You can set default meta tags by adding the `metadata` field to your `docs.json`.

```json
"seo": {
    "metatags": {
        "og:image": "link to your default meta tag image"
    }
}
```

## Page-specific meta tags

Add your meta tags to the page's metadata like so:

```mdx
---
title: 'Your Example Page Title'
'og:image': 'link to your meta tag image'
---
```

<Warning>
  Meta tags with colons need to be typed with quotes around them when you put them in the page metadata.
</Warning>

## Common Meta Tags Reference

Below is a comprehensive list of meta tags you can add to your `docs.json`. These meta tags help improve your site's SEO, social sharing, and browser compatibility.

You can preview how your meta tags will appear on different platforms using [metatags.io](https://metatags.io/).

```json expandable
"seo": {
    "metatags": {
      "robots": "noindex",
      "charset": "UTF-8",
      "viewport": "width=device-width, initial-scale=1.0",
      "description": "Page description",
      "keywords": "keyword1, keyword2, keyword3",
      "author": "Author Name",
      "robots": "index, follow",
      "googlebot": "index, follow",
      "google": "notranslate",
      "google-site-verification": "verification_token",
      "generator": "Mintlify",
      "theme-color": "#000000",
      "color-scheme": "light dark",
      "format-detection": "telephone=no",
      "referrer": "origin",
      "refresh": "30",
      "rating": "general",
      "revisit-after": "7 days",
      "language": "en",
      "copyright": "Copyright 2024",
      "reply-to": "email@example.com",
      "distribution": "global",
      "coverage": "Worldwide",
      "category": "Technology",
      "target": "all",
      "HandheldFriendly": "True",
      "MobileOptimized": "320",
      "apple-mobile-web-app-capable": "yes",
      "apple-mobile-web-app-status-bar-style": "black",
      "apple-mobile-web-app-title": "App Title",
      "application-name": "App Name",
      "msapplication-TileColor": "#000000",
      "msapplication-TileImage": "path/to/tile.png",
      "msapplication-config": "path/to/browserconfig.xml",
      "og:title": "Open Graph Title",
      "og:type": "website",
      "og:url": "https://example.com",
      "og:image": "https://example.com/image.jpg",
      "og:description": "Open Graph Description",
      "og:site_name": "Site Name",
      "og:locale": "en_US",
      "og:video": "https://example.com/video.mp4",
      "og:audio": "https://example.com/audio.mp3",
      "twitter:card": "summary",
      "twitter:site": "@username",
      "twitter:creator": "@username",
      "twitter:title": "Twitter Title",
      "twitter:description": "Twitter Description",
      "twitter:image": "https://example.com/image.jpg",
      "twitter:image:alt": "Image Description",
      "twitter:player": "https://example.com/player",
      "twitter:player:width": "480",
      "twitter:player:height": "480",
      "twitter:app:name:iphone": "App Name",
      "twitter:app:id:iphone": "12345",
      "twitter:app:url:iphone": "app://",
      "article:published_time": "2024-01-01T00:00:00+00:00",
      "article:modified_time": "2024-01-02T00:00:00+00:00",
      "article:expiration_time": "2024-12-31T00:00:00+00:00",
      "article:author": "Author Name",
      "article:section": "Technology",
      "article:tag": "tag1, tag2, tag3",
      "book:author": "Author Name",
      "book:isbn": "1234567890",
      "book:release_date": "2024-01-01",
      "book:tag": "tag1, tag2, tag3",
      "profile:first_name": "John",
      "profile:last_name": "Doe",
      "profile:username": "johndoe",
      "profile:gender": "male",
      "music:duration": "205",
      "music:album": "Album Name",
      "music:album:disc": "1",
      "music:album:track": "1",
      "music:musician": "Artist Name",
      "music:song": "Song Name",
      "music:song:disc": "1",
      "music:song:track": "1",
      "video:actor": "Actor Name",
      "video:actor:role": "Role Name",
      "video:director": "Director Name",
      "video:writer": "Writer Name",
      "video:duration": "120",
      "video:release_date": "2024-01-01",
      "video:tag": "tag1, tag2, tag3",
      "video:series": "Series Name"
  }
}
```

## Sitemaps and robots.txt files

Mintlify automatically generates a `sitemap.xml` file and a `robots.txt` file. You can view your sitemap by appending `/sitemap.xml` to your documentation site's URL.

Only pages included in your `docs.json` are included by default. To include hidden links, add `seo.indexing` to your `docs.json`:

```json
"seo": {
    "indexing": all
}
```

### Custom sitemaps and robots.txt files

To add a custom `sitemap.xml` or `robots.txt` file, create a `sitemap.xml` or `robots.txt` file at the root of your project. Adding a custom file will override the automatically generated file of the same name. If you delete a custom file, the default file will be used again.

## Disabling indexing

If you want to stop a page from being indexed by search engines, you can include the following in the [frontmatter](pages) of your page:

```
---
noindex: true
---
```

You can also specify `noindex` for all pages in your docs by setting the `metadata.robots` field to `"noindex"` in your `docs.json`:

```json
"seo": {
    "metatags": {
      "robots": "noindex"
    }
  }
```

## SEO best practices

<AccordionGroup>
  <Accordion title="Write descriptive titles and descriptions">
    * Use clear, descriptive page titles (50-60 characters)
    * Write compelling descriptions (150-160 characters)
    * Include relevant keywords
    * Make each page title and description unique
  </Accordion>

  <Accordion title="Optimize your content structure">
    * Use proper heading hierarchy (H1 → H2 → H3)
    * Write for humans first, search engines second
    * Include relevant keywords in headings and content
    * Keep URLs short, descriptive, and organized hierarchically
    * Break up long content with subheadings and lists
  </Accordion>

  <Accordion title="Internal linking strategy">
    * Link to related pages within your documentation
    * Use descriptive anchor text instead of "click here"
    * Create topic clusters by linking related concepts
    * Use the automatic cross-referencing features
  </Accordion>

  <Accordion title="Image SEO">
    * Use descriptive file names for images
    * Always include alt text for accessibility and SEO
    * Optimize image file sizes for faster loading
    * Use relevant images that support your content
  </Accordion>
</AccordionGroup>


# Headers and text
Source: https://mintlify.com/docs/text

Learn how to format text, create headers, and style content

## Headers

Headers organize your content and create navigation anchors. They appear in the table of contents and help users scan your documentation.

### Creating headers

Use `#` symbols to create headers of different levels:

```mdx
## Main section header
### Subsection header
#### Sub-subsection header
```

<Tip>
  Use descriptive, keyword-rich headers that clearly indicate the content that follows. This improves both user navigation and search engine optimization.
</Tip>

## Text formatting

We support most Markdown formatting for emphasizing and styling text.

### Basic formatting

Apply these formatting styles to your text:

| Style             | Syntax     | Example                | Result                 |
| ----------------- | ---------- | ---------------------- | ---------------------- |
| **Bold**          | `**text**` | `**important note**`   | **important note**     |
| *Italic*          | `_text_`   | `_emphasis_`           | *emphasis*             |
| ~~Strikethrough~~ | `~text~`   | `~deprecated feature~` | ~~deprecated feature~~ |

### Combining formats

You can combine formatting styles:

```mdx
**_bold and italic_**
**~~bold and strikethrough~~**
*~~italic and strikethrough~~**
```

***bold and italic***<br />
**~~bold and strikethrough~~**<br />
*~~italic and strikethrough~~*

### Superscript and subscript

For mathematical expressions or footnotes, use HTML tags:

| Type        | Syntax            | Example               | Result              |
| ----------- | ----------------- | --------------------- | ------------------- |
| Superscript | `<sup>text</sup>` | `example<sup>2</sup>` | example<sup>2</sup> |
| Subscript   | `<sub>text</sub>` | `example<sub>n</sub>` | example<sub>n</sub> |

## Links

Links help users navigate between pages and access external resources. Use descriptive link text to improve accessibility and user experience.

### Internal links

Link to other pages in your documentation using root-relative paths:

```mdx
[Quickstart](/quickstart)
[Steps](/components/steps)
```

[Quickstart](/quickstart)<br />
[Steps](/components/steps)

<Note>
  Avoid relative links like `[page](../page)` as they load slower and cannot be optimized as effectively as root-relative links.
</Note>

### External links

For external resources, include the full URL:

```mdx
[Markdown Guide](https://www.markdownguide.org/)
```

[Markdown Guide](https://www.markdownguide.org/)

### Broken links

You can check for broken links in your documentation using the [CLI](/installation):

```bash
mint broken-links
```

## Blockquotes

Blockquotes highlight important information, quotes, or examples within your content.

### Single line blockquotes

Add `>` before text to create a blockquote:

```mdx
> This is a quote that stands out from the main content.
```

> This is a quote that stands out from the main content.

### Multi-line blockquotes

For longer quotes or multiple paragraphs:

```mdx
> This is the first paragraph of a multi-line blockquote.
>
> This is the second paragraph, separated by an empty line with `>`.
```

> This is the first paragraph of a multi-line blockquote.
>
> This is the second paragraph, separated by an empty line with `>`.

<Tip>
  Use blockquotes sparingly to maintain their visual impact and meaning. Consider using [callouts](/components/callouts) for notes, warnings, and other information.
</Tip>

## Mathematical expressions

We support LaTeX for rendering mathematical expressions and equations.

### Inline math

Use single dollar signs, `$`, for inline mathematical expressions:

```mdx
The Pythagorean theorem states that $(a^2 + b^2 = c^2)$ in a right triangle.
```

The Pythagorean theorem states that $(a^2 + b^2 = c^2)$ in a right triangle.

### Block equations

Use double dollar signs, `$$`, for standalone equations:

```mdx
$$
E = mc^2
$$
```

$$
E = mc^2
$$

<Info>
  LaTeX support requires proper mathematical syntax. Refer to the [LaTeX documentation](https://www.latex-project.org/help/documentation/) for comprehensive syntax guidelines.
</Info>

## Line breaks and spacing

Control spacing and line breaks to improve content readability.

### Paragraph breaks

Separate paragraphs with blank lines:

```mdx
This is the first paragraph.

This is the second paragraph, separated by a blank line.
```

This is the first paragraph.

This is the second paragraph, separated by a blank line.

### Manual line breaks

Use HTML `<br />` tags for forced line breaks within paragraphs:

```mdx
This line ends here.<br />
This line starts on a new line.
```

This line ends here.<br />
This line starts on a new line.

<Tip>
  In most cases, paragraph breaks with blank lines provide better readability than manual line breaks.
</Tip>

## Best practices

### Content organization

* Use headers to create clear content hierarchy
* Follow proper header hierarchy (don't skip from H2 to H4)
* Write descriptive, keyword-rich header text

### Text formatting

* Use bold for emphasis, not for entire paragraphs
* Reserve italics for terms, titles, or subtle emphasis
* Avoid over-formatting that distracts from content

### Links

* Write descriptive link text instead of "click here" or "read more"
* Use root-relative paths for internal links
* Test links regularly to prevent broken references


# Themes
Source: https://mintlify.com/docs/themes

Customize the appearance of your documentation

export const ThemeCard = ({title, value, description, href}) => {
  return <a className="mt-4 gap-10 group cursor-pointer" href={href}>
      <div>
        <img className="mt-0 rounded-2xl group-hover:scale-105 transition-all block dark:hidden" src={`https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/themes/${value}-light.png`} alt={title} noZoom />
        <img className="mt-0 rounded-2xl group-hover:scale-105 transition-all hidden dark:block" src={`https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/themes/${value}-dark.png`} alt={title} noZoom />
      </div>
      <div>
        <div className="mt-4 flex space-x-2 items-center">
        <h4 className="text-base font-medium text-gray-900 dark:text-gray-200">{title}</h4>
        <label className="text-sm text-gray-500 dark:text-gray-400">"{value}"</label>
      </div>
        <div class="mt-1 prose-sm prose-gray mb-2 text-gray-500 dark:text-gray-400">{description}</div>
        <div className="flex items-center gap-1 mt-2 text-green-600 group-hover:text-green-800 dark:text-green-500 dark:group-hover:text-green-400">
          <span className="text-sm font-medium">
            See preview
          </span>
          <svg className="size-3 group-hover:translate-x-0.5 transition-all" width="14" height="15" viewBox="0 0 14 15" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M5.05566 2.70996L9.91678 7.57107L5.05566 12.4322" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" />
          </svg>
        </div>
      </div>
    </a>;
};


<div className="pt-10 pb-24 px-4 px-4 max-w-3xl mx-auto prose prose-gray">
  <label className="eyebrow h-5 text-primary dark:text-primary-light text-sm font-semibold">Core Concepts</label>
  <h1 className="mt-1 mb-2 text-2xl sm:text-3xl text-gray-900 tracking-tight dark:text-gray-200 font-semibold">Themes</h1>
  <label className="text-lg prose prose-gray dark:prose-invert">Custom the appearance of your documentation<br /><br />Configure [theme](settings#param-theme) in docs.json using one of the following themes.</label>

  <br />

  <div className="mt-10 grid grid-cols-1 sm:grid-cols-2 gap-8 not-prose">
    <ThemeCard title="Mint" value="mint" description="Classic documentation theme with time-tested layouts and familiar navigation." href="https://mint.mintlify.app" />

    <ThemeCard title="Maple" value="maple" description="Modern, clean aesthetics perfect for AI and SaaS products." href="https://maple.mintlify.app" />

    <ThemeCard title="Palm" value="palm" description="Sophisticated fintech theme with deep customization for enterprise documentation." href="https://palm.mintlify.app" />

    <ThemeCard title="Willow" value="willow" description="Stripped-back essentials for distraction-free documentation." href="https://willow.mintlify.app" />

    <ThemeCard title="Linden" value="linden" description="Retro terminal vibes with monospace fonts for that 80s hacker aesthetic." href="https://linden.mintlify.app" />

    <ThemeCard title="Almond" value="almond" description="Card-based organization meets minimalist design for intuitive navigation." href="https://almond.mintlify.app" />

    <ThemeCard title="Aspen" value="aspen" description="Modern documentation crafted for complex navigation and custom components." href="https://aspen.mintlify.app" />
  </div>
</div>

