name: 手动部署

# 仅支持手动触发
on:
  workflow_dispatch:
    inputs:
      environment:
        description: '部署环境'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - preview
          - development
      skip_build:
        description: '跳过构建步骤'
        required: false
        default: false
        type: boolean
      skip_tests:
        description: '跳过测试步骤'
        required: false
        default: false
        type: boolean
      deploy_message:
        description: '部署说明'
        required: false
        default: '手动部署'
        type: string

# 环境变量
env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8'

# 作业定义
jobs:
  # 预检查作业
  pre-check:
    name: 部署前检查
    runs-on: ubuntu-latest
    
    outputs:
      should-deploy: ${{ steps.check.outputs.should-deploy }}
      environment: ${{ github.event.inputs.environment }}
    
    steps:
      # 检出代码
      - name: 检出代码
        uses: actions/checkout@v4
      
      # 检查部署条件
      - name: 检查部署条件
        id: check
        run: |
          echo "🔍 检查部署条件..."
          
          # 检查分支
          current_branch=$(git branch --show-current)
          echo "当前分支: $current_branch"
          
          # 生产环境只能从main分支部署
          if [ "${{ github.event.inputs.environment }}" = "production" ] && [ "$current_branch" != "main" ]; then
            echo "❌ 生产环境只能从main分支部署"
            echo "should-deploy=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # 检查是否有未提交的更改
          if ! git diff --quiet; then
            echo "⚠️ 检测到未提交的更改"
          fi
          
          echo "✅ 部署前检查通过"
          echo "should-deploy=true" >> $GITHUB_OUTPUT
      
      # 显示部署信息
      - name: 显示部署信息
        run: |
          echo "📋 部署信息"
          echo "=================="
          echo "环境: ${{ github.event.inputs.environment }}"
          echo "分支: $(git branch --show-current)"
          echo "提交: $(git rev-parse --short HEAD)"
          echo "说明: ${{ github.event.inputs.deploy_message }}"
          echo "跳过构建: ${{ github.event.inputs.skip_build }}"
          echo "跳过测试: ${{ github.event.inputs.skip_tests }}"
          echo "=================="

  # 测试作业
  test:
    name: 运行测试
    runs-on: ubuntu-latest
    needs: pre-check
    if: needs.pre-check.outputs.should-deploy == 'true' && github.event.inputs.skip_tests != 'true'
    
    steps:
      # 检出代码
      - name: 检出代码
        uses: actions/checkout@v4
      
      # 设置Node.js环境
      - name: 设置Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      # 设置pnpm
      - name: 设置pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
      
      # 安装依赖
      - name: 安装依赖
        run: pnpm install --frozen-lockfile
      
      # 运行测试
      - name: 运行测试
        run: |
          echo "🧪 运行测试套件..."
          pnpm run test || {
            echo "❌ 测试失败，部署已取消"
            exit 1
          }

  # 构建作业
  build:
    name: 构建项目
    runs-on: ubuntu-latest
    needs: [pre-check, test]
    if: always() && needs.pre-check.outputs.should-deploy == 'true' && (needs.test.result == 'success' || needs.test.result == 'skipped') && github.event.inputs.skip_build != 'true'
    
    steps:
      # 检出代码
      - name: 检出代码
        uses: actions/checkout@v4
      
      # 设置Node.js环境
      - name: 设置Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      # 设置pnpm
      - name: 设置pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
      
      # 安装依赖
      - name: 安装依赖
        run: pnpm install --frozen-lockfile
      
      # 构建项目
      - name: 构建项目
        run: |
          echo "🔨 构建项目..."
          pnpm run build
      
      # 上传构建产物
      - name: 上传构建产物
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts-${{ github.event.inputs.environment }}
          path: |
            dist/
            .next/
            out/
          retention-days: 7

  # 部署作业
  deploy:
    name: 部署到 ${{ needs.pre-check.outputs.environment }}
    runs-on: ubuntu-latest
    needs: [pre-check, test, build]
    if: always() && needs.pre-check.outputs.should-deploy == 'true' && (needs.test.result == 'success' || needs.test.result == 'skipped') && (needs.build.result == 'success' || needs.build.result == 'skipped')
    
    environment:
      name: ${{ needs.pre-check.outputs.environment }}
      url: ${{ steps.deploy.outputs.url }}
    
    steps:
      # 检出代码
      - name: 检出代码
        uses: actions/checkout@v4
      
      # 设置Node.js环境
      - name: 设置Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      # 设置pnpm
      - name: 设置pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
      
      # 安装依赖（如果跳过了构建）
      - name: 安装依赖
        if: github.event.inputs.skip_build == 'true'
        run: pnpm install --frozen-lockfile
      
      # 构建项目（如果跳过了构建）
      - name: 构建项目
        if: github.event.inputs.skip_build == 'true'
        run: pnpm run build
      
      # 下载构建产物（如果没有跳过构建）
      - name: 下载构建产物
        if: github.event.inputs.skip_build != 'true'
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts-${{ github.event.inputs.environment }}
      
      # 部署到Vercel
      - name: 部署到Vercel
        id: deploy
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: ${{ github.event.inputs.environment == 'production' && '--prod' || '' }}
          working-directory: ./
      
      # 输出部署信息
      - name: 输出部署信息
        run: |
          echo "🚀 部署完成！"
          echo "=================="
          echo "环境: ${{ github.event.inputs.environment }}"
          echo "URL: ${{ steps.deploy.outputs.preview-url }}"
          echo "说明: ${{ github.event.inputs.deploy_message }}"
          echo "时间: $(date)"
          echo "=================="

  # 部署后验证
  post-deploy:
    name: 部署后验证
    runs-on: ubuntu-latest
    needs: [deploy]
    if: needs.deploy.result == 'success'
    
    steps:
      # 等待部署生效
      - name: 等待部署生效
        run: |
          echo "⏳ 等待部署生效..."
          sleep 30
      
      # 健康检查
      - name: 健康检查
        run: |
          echo "🔍 执行健康检查..."
          
          # 获取部署URL（这里需要根据实际情况调整）
          if [ "${{ github.event.inputs.environment }}" = "production" ]; then
            url="https://claude-code-hub.vercel.app"
          else
            url="${{ needs.deploy.outputs.url }}"
          fi
          
          echo "检查URL: $url"
          
          # 检查网站是否可访问
          if curl -f -s "$url" > /dev/null; then
            echo "✅ 网站可正常访问"
          else
            echo "❌ 网站无法访问"
            exit 1
          fi
          
          # 检查关键页面
          key_pages=("/" "/getting-started" "/workflows" "/commands" "/roles")
          
          for page in "${key_pages[@]}"; do
            if curl -f -s "${url}${page}" > /dev/null; then
              echo "✅ 页面 ${page} 可正常访问"
            else
              echo "⚠️ 页面 ${page} 无法访问"
            fi
          done
      
      # 性能检查
      - name: 性能检查
        run: |
          echo "⚡ 执行性能检查..."
          
          # 这里可以添加更详细的性能检查
          # 例如使用lighthouse-ci或其他工具
          echo "ℹ️ 性能检查功能待实现"

  # 通知作业
  notify:
    name: 发送通知
    runs-on: ubuntu-latest
    needs: [pre-check, test, build, deploy, post-deploy]
    if: always()
    
    steps:
      # 发送成功通知
      - name: 发送成功通知
        if: needs.deploy.result == 'success' && needs.post-deploy.result == 'success'
        run: |
          echo "✅ 手动部署成功完成！"
          echo "📊 部署统计:"
          echo "  - 环境: ${{ github.event.inputs.environment }}"
          echo "  - 说明: ${{ github.event.inputs.deploy_message }}"
          echo "  - 测试: ${{ needs.test.result }}"
          echo "  - 构建: ${{ needs.build.result }}"
          echo "  - 部署: ${{ needs.deploy.result }}"
          echo "  - 验证: ${{ needs.post-deploy.result }}"
      
      # 发送失败通知
      - name: 发送失败通知
        if: failure() || cancelled()
        run: |
          echo "❌ 手动部署失败！"
          echo "📋 失败信息:"
          echo "  - 预检查: ${{ needs.pre-check.result }}"
          echo "  - 测试: ${{ needs.test.result }}"
          echo "  - 构建: ${{ needs.build.result }}"
          echo "  - 部署: ${{ needs.deploy.result }}"
          echo "  - 验证: ${{ needs.post-deploy.result }}"
          echo "  - 环境: ${{ github.event.inputs.environment }}"
          echo "  - 说明: ${{ github.event.inputs.deploy_message }}"